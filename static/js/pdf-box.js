/**
 * @license
 * Copyright 2019 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
console.log("tarun", "===============")
const dd = globalThis, f0 = dd.ShadowRoot && (dd.ShadyCSS === void 0 || dd.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype, P0 = Symbol(), rZ = /* @__PURE__ */ new WeakMap();
let iB = class {
  constructor(I, g, C) {
    if (this._$cssResult$ = !0, C !== P0) throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
    this.cssText = I, this.t = g;
  }
  get styleSheet() {
    let I = this.o;
    const g = this.t;
    if (f0 && I === void 0) {
      const C = g !== void 0 && g.length === 1;
      C && (I = rZ.get(g)), I === void 0 && ((this.o = I = new CSSStyleSheet()).replaceSync(this.cssText), C && rZ.set(g, I));
    }
    return I;
  }
  toString() {
    return this.cssText;
  }
};
const xF = (l) => new iB(typeof l == "string" ? l : l + "", void 0, P0), OF = (l, ...I) => {
  const g = l.length === 1 ? l[0] : I.reduce((C, A, d) => C + ((Z) => {
    if (Z._$cssResult$ === !0) return Z.cssText;
    if (typeof Z == "number") return Z;
    throw Error("Value passed to 'css' function must be a 'css' function result: " + Z + ". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.");
  })(A) + l[d + 1], l[0]);
  return new iB(g, l, P0);
}, fF = (l, I) => {
  if (f0) l.adoptedStyleSheets = I.map((g) => g instanceof CSSStyleSheet ? g : g.styleSheet);
  else for (const g of I) {
    const C = document.createElement("style"), A = dd.litNonce;
    A !== void 0 && C.setAttribute("nonce", A), C.textContent = g.cssText, l.appendChild(C);
  }
}, zZ = f0 ? (l) => l : (l) => l instanceof CSSStyleSheet ? ((I) => {
  let g = "";
  for (const C of I.cssRules) g += C.cssText;
  return xF(g);
})(l) : l;
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const { is: PF, defineProperty: qF, getOwnPropertyDescriptor: _F, getOwnPropertyNames: $F, getOwnPropertySymbols: Is, getPrototypeOf: gs } = Object, Jd = globalThis, TZ = Jd.trustedTypes, Cs = TZ ? TZ.emptyScript : "", As = Jd.reactiveElementPolyfillSupport, cl = (l, I) => l, Vd = { toAttribute(l, I) {
  switch (I) {
    case Boolean:
      l = l ? Cs : null;
      break;
    case Object:
    case Array:
      l = l == null ? l : JSON.stringify(l);
  }
  return l;
}, fromAttribute(l, I) {
  let g = l;
  switch (I) {
    case Boolean:
      g = l !== null;
      break;
    case Number:
      g = l === null ? null : Number(l);
      break;
    case Object:
    case Array:
      try {
        g = JSON.parse(l);
      } catch {
        g = null;
      }
  }
  return g;
} }, q0 = (l, I) => !PF(l, I), LZ = { attribute: !0, type: String, converter: Vd, reflect: !1, hasChanged: q0 };
Symbol.metadata ??= Symbol("metadata"), Jd.litPropertyMetadata ??= /* @__PURE__ */ new WeakMap();
class SA extends HTMLElement {
  static addInitializer(I) {
    this._$Ei(), (this.l ??= []).push(I);
  }
  static get observedAttributes() {
    return this.finalize(), this._$Eh && [...this._$Eh.keys()];
  }
  static createProperty(I, g = LZ) {
    if (g.state && (g.attribute = !1), this._$Ei(), this.elementProperties.set(I, g), !g.noAccessor) {
      const C = Symbol(), A = this.getPropertyDescriptor(I, C, g);
      A !== void 0 && qF(this.prototype, I, A);
    }
  }
  static getPropertyDescriptor(I, g, C) {
    const { get: A, set: d } = _F(this.prototype, I) ?? { get() {
      return this[g];
    }, set(Z) {
      this[g] = Z;
    } };
    return { get() {
      return A?.call(this);
    }, set(Z) {
      const i = A?.call(this);
      d.call(this, Z), this.requestUpdate(I, i, C);
    }, configurable: !0, enumerable: !0 };
  }
  static getPropertyOptions(I) {
    return this.elementProperties.get(I) ?? LZ;
  }
  static _$Ei() {
    if (this.hasOwnProperty(cl("elementProperties"))) return;
    const I = gs(this);
    I.finalize(), I.l !== void 0 && (this.l = [...I.l]), this.elementProperties = new Map(I.elementProperties);
  }
  static finalize() {
    if (this.hasOwnProperty(cl("finalized"))) return;
    if (this.finalized = !0, this._$Ei(), this.hasOwnProperty(cl("properties"))) {
      const g = this.properties, C = [...$F(g), ...Is(g)];
      for (const A of C) this.createProperty(A, g[A]);
    }
    const I = this[Symbol.metadata];
    if (I !== null) {
      const g = litPropertyMetadata.get(I);
      if (g !== void 0) for (const [C, A] of g) this.elementProperties.set(C, A);
    }
    this._$Eh = /* @__PURE__ */ new Map();
    for (const [g, C] of this.elementProperties) {
      const A = this._$Eu(g, C);
      A !== void 0 && this._$Eh.set(A, g);
    }
    this.elementStyles = this.finalizeStyles(this.styles);
  }
  static finalizeStyles(I) {
    const g = [];
    if (Array.isArray(I)) {
      const C = new Set(I.flat(1 / 0).reverse());
      for (const A of C) g.unshift(zZ(A));
    } else I !== void 0 && g.push(zZ(I));
    return g;
  }
  static _$Eu(I, g) {
    const C = g.attribute;
    return C === !1 ? void 0 : typeof C == "string" ? C : typeof I == "string" ? I.toLowerCase() : void 0;
  }
  constructor() {
    super(), this._$Ep = void 0, this.isUpdatePending = !1, this.hasUpdated = !1, this._$Em = null, this._$Ev();
  }
  _$Ev() {
    this._$ES = new Promise((I) => this.enableUpdating = I), this._$AL = /* @__PURE__ */ new Map(), this._$E_(), this.requestUpdate(), this.constructor.l?.forEach((I) => I(this));
  }
  addController(I) {
    (this._$EO ??= /* @__PURE__ */ new Set()).add(I), this.renderRoot !== void 0 && this.isConnected && I.hostConnected?.();
  }
  removeController(I) {
    this._$EO?.delete(I);
  }
  _$E_() {
    const I = /* @__PURE__ */ new Map(), g = this.constructor.elementProperties;
    for (const C of g.keys()) this.hasOwnProperty(C) && (I.set(C, this[C]), delete this[C]);
    I.size > 0 && (this._$Ep = I);
  }
  createRenderRoot() {
    const I = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);
    return fF(I, this.constructor.elementStyles), I;
  }
  connectedCallback() {
    this.renderRoot ??= this.createRenderRoot(), this.enableUpdating(!0), this._$EO?.forEach((I) => I.hostConnected?.());
  }
  enableUpdating(I) {
  }
  disconnectedCallback() {
    this._$EO?.forEach((I) => I.hostDisconnected?.());
  }
  attributeChangedCallback(I, g, C) {
    this._$AK(I, C);
  }
  _$EC(I, g) {
    const C = this.constructor.elementProperties.get(I), A = this.constructor._$Eu(I, C);
    if (A !== void 0 && C.reflect === !0) {
      const d = (C.converter?.toAttribute !== void 0 ? C.converter : Vd).toAttribute(g, C.type);
      this._$Em = I, d == null ? this.removeAttribute(A) : this.setAttribute(A, d), this._$Em = null;
    }
  }
  _$AK(I, g) {
    const C = this.constructor, A = C._$Eh.get(I);
    if (A !== void 0 && this._$Em !== A) {
      const d = C.getPropertyOptions(A), Z = typeof d.converter == "function" ? { fromAttribute: d.converter } : d.converter?.fromAttribute !== void 0 ? d.converter : Vd;
      this._$Em = A, this[A] = Z.fromAttribute(g, d.type), this._$Em = null;
    }
  }
  requestUpdate(I, g, C) {
    if (I !== void 0) {
      if (C ??= this.constructor.getPropertyOptions(I), !(C.hasChanged ?? q0)(this[I], g)) return;
      this.P(I, g, C);
    }
    this.isUpdatePending === !1 && (this._$ES = this._$ET());
  }
  P(I, g, C) {
    this._$AL.has(I) || this._$AL.set(I, g), C.reflect === !0 && this._$Em !== I && (this._$Ej ??= /* @__PURE__ */ new Set()).add(I);
  }
  async _$ET() {
    this.isUpdatePending = !0;
    try {
      await this._$ES;
    } catch (g) {
      Promise.reject(g);
    }
    const I = this.scheduleUpdate();
    return I != null && await I, !this.isUpdatePending;
  }
  scheduleUpdate() {
    return this.performUpdate();
  }
  performUpdate() {
    if (!this.isUpdatePending) return;
    if (!this.hasUpdated) {
      if (this.renderRoot ??= this.createRenderRoot(), this._$Ep) {
        for (const [A, d] of this._$Ep) this[A] = d;
        this._$Ep = void 0;
      }
      const C = this.constructor.elementProperties;
      if (C.size > 0) for (const [A, d] of C) d.wrapped !== !0 || this._$AL.has(A) || this[A] === void 0 || this.P(A, this[A], d);
    }
    let I = !1;
    const g = this._$AL;
    try {
      I = this.shouldUpdate(g), I ? (this.willUpdate(g), this._$EO?.forEach((C) => C.hostUpdate?.()), this.update(g)) : this._$EU();
    } catch (C) {
      throw I = !1, this._$EU(), C;
    }
    I && this._$AE(g);
  }
  willUpdate(I) {
  }
  _$AE(I) {
    this._$EO?.forEach((g) => g.hostUpdated?.()), this.hasUpdated || (this.hasUpdated = !0, this.firstUpdated(I)), this.updated(I);
  }
  _$EU() {
    this._$AL = /* @__PURE__ */ new Map(), this.isUpdatePending = !1;
  }
  get updateComplete() {
    return this.getUpdateComplete();
  }
  getUpdateComplete() {
    return this._$ES;
  }
  shouldUpdate(I) {
    return !0;
  }
  update(I) {
    this._$Ej &&= this._$Ej.forEach((g) => this._$EC(g, this[g])), this._$EU();
  }
  updated(I) {
  }
  firstUpdated(I) {
  }
}
SA.elementStyles = [], SA.shadowRootOptions = { mode: "open" }, SA[cl("elementProperties")] = /* @__PURE__ */ new Map(), SA[cl("finalized")] = /* @__PURE__ */ new Map(), As?.({ ReactiveElement: SA }), (Jd.reactiveElementVersions ??= []).push("2.0.4");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const _0 = globalThis, Wd = _0.trustedTypes, EZ = Wd ? Wd.createPolicy("lit-html", { createHTML: (l) => l }) : void 0, BB = "$lit$", zC = `lit$${Math.random().toFixed(9).slice(2)}$`, FB = "?" + zC, ls = `<${FB}>`, sA = document, el = () => sA.createComment(""), ml = (l) => l === null || typeof l != "object" && typeof l != "function", $0 = Array.isArray, ds = (l) => $0(l) || typeof l?.[Symbol.iterator] == "function", Z0 = `[ 	
\f\r]`, jA = /<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g, jZ = /-->/g, vZ = />/g, AA = RegExp(`>|${Z0}(?:([^\\s"'>=/]+)(${Z0}*=${Z0}*(?:[^ 	
\f\r"'\`<>=]|("|')|))|$)`, "g"), xZ = /'/g, OZ = /"/g, sB = /^(?:script|style|textarea|title)$/i, Zs = (l) => (I, ...g) => ({ _$litType$: l, strings: I, values: g }), is = Zs(1), HA = Symbol.for("lit-noChange"), ag = Symbol.for("lit-nothing"), fZ = /* @__PURE__ */ new WeakMap(), BA = sA.createTreeWalker(sA, 129);
function cB(l, I) {
  if (!$0(l) || !l.hasOwnProperty("raw")) throw Error("invalid template strings array");
  return EZ !== void 0 ? EZ.createHTML(I) : I;
}
const Bs = (l, I) => {
  const g = l.length - 1, C = [];
  let A, d = I === 2 ? "<svg>" : I === 3 ? "<math>" : "", Z = jA;
  for (let i = 0; i < g; i++) {
    const B = l[i];
    let F, s, c = -1, G = 0;
    for (; G < B.length && (Z.lastIndex = G, s = Z.exec(B), s !== null); ) G = Z.lastIndex, Z === jA ? s[1] === "!--" ? Z = jZ : s[1] !== void 0 ? Z = vZ : s[2] !== void 0 ? (sB.test(s[2]) && (A = RegExp("</" + s[2], "g")), Z = AA) : s[3] !== void 0 && (Z = AA) : Z === AA ? s[0] === ">" ? (Z = A ?? jA, c = -1) : s[1] === void 0 ? c = -2 : (c = Z.lastIndex - s[2].length, F = s[1], Z = s[3] === void 0 ? AA : s[3] === '"' ? OZ : xZ) : Z === OZ || Z === xZ ? Z = AA : Z === jZ || Z === vZ ? Z = jA : (Z = AA, A = void 0);
    const V = Z === AA && l[i + 1].startsWith("/>") ? " " : "";
    d += Z === jA ? B + ls : c >= 0 ? (C.push(F), B.slice(0, c) + BB + B.slice(c) + zC + V) : B + zC + (c === -2 ? i : V);
  }
  return [cB(l, d + (l[g] || "<?>") + (I === 2 ? "</svg>" : I === 3 ? "</math>" : "")), C];
};
class hl {
  constructor({ strings: I, _$litType$: g }, C) {
    let A;
    this.parts = [];
    let d = 0, Z = 0;
    const i = I.length - 1, B = this.parts, [F, s] = Bs(I, g);
    if (this.el = hl.createElement(F, C), BA.currentNode = this.el.content, g === 2 || g === 3) {
      const c = this.el.content.firstChild;
      c.replaceWith(...c.childNodes);
    }
    for (; (A = BA.nextNode()) !== null && B.length < i; ) {
      if (A.nodeType === 1) {
        if (A.hasAttributes()) for (const c of A.getAttributeNames()) if (c.endsWith(BB)) {
          const G = s[Z++], V = A.getAttribute(c).split(zC), W = /([.?@])?(.*)/.exec(G);
          B.push({ type: 1, index: d, name: W[2], strings: V, ctor: W[1] === "." ? ss : W[1] === "?" ? cs : W[1] === "@" ? Gs : Dd }), A.removeAttribute(c);
        } else c.startsWith(zC) && (B.push({ type: 6, index: d }), A.removeAttribute(c));
        if (sB.test(A.tagName)) {
          const c = A.textContent.split(zC), G = c.length - 1;
          if (G > 0) {
            A.textContent = Wd ? Wd.emptyScript : "";
            for (let V = 0; V < G; V++) A.append(c[V], el()), BA.nextNode(), B.push({ type: 2, index: ++d });
            A.append(c[G], el());
          }
        }
      } else if (A.nodeType === 8) if (A.data === FB) B.push({ type: 2, index: d });
      else {
        let c = -1;
        for (; (c = A.data.indexOf(zC, c + 1)) !== -1; ) B.push({ type: 7, index: d }), c += zC.length - 1;
      }
      d++;
    }
  }
  static createElement(I, g) {
    const C = sA.createElement("template");
    return C.innerHTML = I, C;
  }
}
function pA(l, I, g = l, C) {
  if (I === HA) return I;
  let A = C !== void 0 ? g._$Co?.[C] : g._$Cl;
  const d = ml(I) ? void 0 : I._$litDirective$;
  return A?.constructor !== d && (A?._$AO?.(!1), d === void 0 ? A = void 0 : (A = new d(l), A._$AT(l, g, C)), C !== void 0 ? (g._$Co ??= [])[C] = A : g._$Cl = A), A !== void 0 && (I = pA(l, A._$AS(l, I.values), A, C)), I;
}
class Fs {
  constructor(I, g) {
    this._$AV = [], this._$AN = void 0, this._$AD = I, this._$AM = g;
  }
  get parentNode() {
    return this._$AM.parentNode;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  u(I) {
    const { el: { content: g }, parts: C } = this._$AD, A = (I?.creationScope ?? sA).importNode(g, !0);
    BA.currentNode = A;
    let d = BA.nextNode(), Z = 0, i = 0, B = C[0];
    for (; B !== void 0; ) {
      if (Z === B.index) {
        let F;
        B.type === 2 ? F = new Dl(d, d.nextSibling, this, I) : B.type === 1 ? F = new B.ctor(d, B.name, B.strings, this, I) : B.type === 6 && (F = new Vs(d, this, I)), this._$AV.push(F), B = C[++i];
      }
      Z !== B?.index && (d = BA.nextNode(), Z++);
    }
    return BA.currentNode = sA, A;
  }
  p(I) {
    let g = 0;
    for (const C of this._$AV) C !== void 0 && (C.strings !== void 0 ? (C._$AI(I, C, g), g += C.strings.length - 2) : C._$AI(I[g])), g++;
  }
}
class Dl {
  get _$AU() {
    return this._$AM?._$AU ?? this._$Cv;
  }
  constructor(I, g, C, A) {
    this.type = 2, this._$AH = ag, this._$AN = void 0, this._$AA = I, this._$AB = g, this._$AM = C, this.options = A, this._$Cv = A?.isConnected ?? !0;
  }
  get parentNode() {
    let I = this._$AA.parentNode;
    const g = this._$AM;
    return g !== void 0 && I?.nodeType === 11 && (I = g.parentNode), I;
  }
  get startNode() {
    return this._$AA;
  }
  get endNode() {
    return this._$AB;
  }
  _$AI(I, g = this) {
    I = pA(this, I, g), ml(I) ? I === ag || I == null || I === "" ? (this._$AH !== ag && this._$AR(), this._$AH = ag) : I !== this._$AH && I !== HA && this._(I) : I._$litType$ !== void 0 ? this.$(I) : I.nodeType !== void 0 ? this.T(I) : ds(I) ? this.k(I) : this._(I);
  }
  O(I) {
    return this._$AA.parentNode.insertBefore(I, this._$AB);
  }
  T(I) {
    this._$AH !== I && (this._$AR(), this._$AH = this.O(I));
  }
  _(I) {
    this._$AH !== ag && ml(this._$AH) ? this._$AA.nextSibling.data = I : this.T(sA.createTextNode(I)), this._$AH = I;
  }
  $(I) {
    const { values: g, _$litType$: C } = I, A = typeof C == "number" ? this._$AC(I) : (C.el === void 0 && (C.el = hl.createElement(cB(C.h, C.h[0]), this.options)), C);
    if (this._$AH?._$AD === A) this._$AH.p(g);
    else {
      const d = new Fs(A, this), Z = d.u(this.options);
      d.p(g), this.T(Z), this._$AH = d;
    }
  }
  _$AC(I) {
    let g = fZ.get(I.strings);
    return g === void 0 && fZ.set(I.strings, g = new hl(I)), g;
  }
  k(I) {
    $0(this._$AH) || (this._$AH = [], this._$AR());
    const g = this._$AH;
    let C, A = 0;
    for (const d of I) A === g.length ? g.push(C = new Dl(this.O(el()), this.O(el()), this, this.options)) : C = g[A], C._$AI(d), A++;
    A < g.length && (this._$AR(C && C._$AB.nextSibling, A), g.length = A);
  }
  _$AR(I = this._$AA.nextSibling, g) {
    for (this._$AP?.(!1, !0, g); I && I !== this._$AB; ) {
      const C = I.nextSibling;
      I.remove(), I = C;
    }
  }
  setConnected(I) {
    this._$AM === void 0 && (this._$Cv = I, this._$AP?.(I));
  }
}
class Dd {
  get tagName() {
    return this.element.tagName;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  constructor(I, g, C, A, d) {
    this.type = 1, this._$AH = ag, this._$AN = void 0, this.element = I, this.name = g, this._$AM = A, this.options = d, C.length > 2 || C[0] !== "" || C[1] !== "" ? (this._$AH = Array(C.length - 1).fill(new String()), this.strings = C) : this._$AH = ag;
  }
  _$AI(I, g = this, C, A) {
    const d = this.strings;
    let Z = !1;
    if (d === void 0) I = pA(this, I, g, 0), Z = !ml(I) || I !== this._$AH && I !== HA, Z && (this._$AH = I);
    else {
      const i = I;
      let B, F;
      for (I = d[0], B = 0; B < d.length - 1; B++) F = pA(this, i[C + B], g, B), F === HA && (F = this._$AH[B]), Z ||= !ml(F) || F !== this._$AH[B], F === ag ? I = ag : I !== ag && (I += (F ?? "") + d[B + 1]), this._$AH[B] = F;
    }
    Z && !A && this.j(I);
  }
  j(I) {
    I === ag ? this.element.removeAttribute(this.name) : this.element.setAttribute(this.name, I ?? "");
  }
}
class ss extends Dd {
  constructor() {
    super(...arguments), this.type = 3;
  }
  j(I) {
    this.element[this.name] = I === ag ? void 0 : I;
  }
}
class cs extends Dd {
  constructor() {
    super(...arguments), this.type = 4;
  }
  j(I) {
    this.element.toggleAttribute(this.name, !!I && I !== ag);
  }
}
class Gs extends Dd {
  constructor(I, g, C, A, d) {
    super(I, g, C, A, d), this.type = 5;
  }
  _$AI(I, g = this) {
    if ((I = pA(this, I, g, 0) ?? ag) === HA) return;
    const C = this._$AH, A = I === ag && C !== ag || I.capture !== C.capture || I.once !== C.once || I.passive !== C.passive, d = I !== ag && (C === ag || A);
    A && this.element.removeEventListener(this.name, this, C), d && this.element.addEventListener(this.name, this, I), this._$AH = I;
  }
  handleEvent(I) {
    typeof this._$AH == "function" ? this._$AH.call(this.options?.host ?? this.element, I) : this._$AH.handleEvent(I);
  }
}
class Vs {
  constructor(I, g, C) {
    this.element = I, this.type = 6, this._$AN = void 0, this._$AM = g, this.options = C;
  }
  get _$AU() {
    return this._$AM._$AU;
  }
  _$AI(I) {
    pA(this, I);
  }
}
const Ws = _0.litHtmlPolyfillSupport;
Ws?.(hl, Dl), (_0.litHtmlVersions ??= []).push("3.2.1");
const bs = (l, I, g) => {
  const C = g?.renderBefore ?? I;
  let A = C._$litPart$;
  if (A === void 0) {
    const d = g?.renderBefore ?? null;
    C._$litPart$ = A = new Dl(I.insertBefore(el(), d), d, void 0, g ?? {});
  }
  return A._$AI(l), A;
};
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
let Gl = class extends SA {
  constructor() {
    super(...arguments), this.renderOptions = { host: this }, this._$Do = void 0;
  }
  createRenderRoot() {
    const I = super.createRenderRoot();
    return this.renderOptions.renderBefore ??= I.firstChild, I;
  }
  update(I) {
    const g = this.render();
    this.hasUpdated || (this.renderOptions.isConnected = this.isConnected), super.update(I), this._$Do = bs(g, this.renderRoot, this.renderOptions);
  }
  connectedCallback() {
    super.connectedCallback(), this._$Do?.setConnected(!0);
  }
  disconnectedCallback() {
    super.disconnectedCallback(), this._$Do?.setConnected(!1);
  }
  render() {
    return HA;
  }
};
Gl._$litElement$ = !0, Gl.finalized = !0, globalThis.litElementHydrateSupport?.({ LitElement: Gl });
const Rs = globalThis.litElementPolyfillSupport;
Rs?.({ LitElement: Gl });
(globalThis.litElementVersions ??= []).push("4.1.1");
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const ns = (l) => (I, g) => {
  g !== void 0 ? g.addInitializer(() => {
    customElements.define(l, I);
  }) : customElements.define(l, I);
};
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const Us = { attribute: !0, type: String, converter: Vd, reflect: !1, hasChanged: q0 }, as = (l = Us, I, g) => {
  const { kind: C, metadata: A } = g;
  let d = globalThis.litPropertyMetadata.get(A);
  if (d === void 0 && globalThis.litPropertyMetadata.set(A, d = /* @__PURE__ */ new Map()), d.set(g.name, l), C === "accessor") {
    const { name: Z } = g;
    return { set(i) {
      const B = I.get.call(this);
      I.set.call(this, i), this.requestUpdate(Z, B, l);
    }, init(i) {
      return i !== void 0 && this.P(Z, void 0, l), i;
    } };
  }
  if (C === "setter") {
    const { name: Z } = g;
    return function(i) {
      const B = this[Z];
      I.call(this, i), this.requestUpdate(Z, B, l);
    };
  }
  throw Error("Unsupported decorator location: " + C);
};
function ud(l) {
  return (I, g) => typeof g == "object" ? as(l, I, g) : ((C, A, d) => {
    const Z = A.hasOwnProperty(d);
    return A.constructor.createProperty(d, Z ? { ...C, wrapped: !0 } : C), Z ? Object.getOwnPropertyDescriptor(A, d) : void 0;
  })(l, I, g);
}
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
const os = (l, I, g) => (g.configurable = !0, g.enumerable = !0, Reflect.decorate && typeof I != "object" && Object.defineProperty(l, I, g), g);
/**
 * @license
 * Copyright 2017 Google LLC
 * SPDX-License-Identifier: BSD-3-Clause
 */
function GB(l, I) {
  return (g, C, A) => {
    const d = (Z) => Z.renderRoot?.querySelector(l) ?? null;
    return os(g, C, { get() {
      return d(this);
    } });
  };
}
var Vl = {};
Vl.d = (l, I) => {
  for (var g in I)
    Vl.o(I, g) && !Vl.o(l, g) && Object.defineProperty(l, g, { enumerable: !0, get: I[g] });
};
Vl.o = (l, I) => Object.prototype.hasOwnProperty.call(l, I);
var hI = globalThis.pdfjsLib = {};
Vl.d(hI, {
  AbortException: () => (
    /* reexport */
    xC
  ),
  AnnotationEditorLayer: () => (
    /* reexport */
    YC
  ),
  AnnotationEditorParamsType: () => (
    /* reexport */
    pI
  ),
  AnnotationEditorType: () => (
    /* reexport */
    JI
  ),
  AnnotationEditorUIManager: () => (
    /* reexport */
    OC
  ),
  AnnotationLayer: () => (
    /* reexport */
    bG
  ),
  AnnotationMode: () => (
    /* reexport */
    TC
  ),
  ColorPicker: () => (
    /* reexport */
    CC
  ),
  DOMSVGFactory: () => (
    /* reexport */
    cZ
  ),
  DrawLayer: () => (
    /* reexport */
    Jg
  ),
  FeatureTest: () => (
    /* reexport */
    ug
  ),
  GlobalWorkerOptions: () => (
    /* reexport */
    bl
  ),
  ImageKind: () => (
    /* reexport */
    Zd
  ),
  InvalidPDFException: () => (
    /* reexport */
    J0
  ),
  MissingPDFException: () => (
    /* reexport */
    Ql
  ),
  OPS: () => (
    /* reexport */
    WC
  ),
  OutputScale: () => (
    /* reexport */
    D0
  ),
  PDFDataRangeTransport: () => (
    /* reexport */
    DB
  ),
  PDFDateString: () => (
    /* reexport */
    bB
  ),
  PDFWorker: () => (
    /* reexport */
    Ug
  ),
  PasswordResponses: () => (
    /* reexport */
    Qs
  ),
  PermissionFlag: () => (
    /* reexport */
    hs
  ),
  PixelsPerInch: () => (
    /* reexport */
    kA
  ),
  RenderingCancelledException: () => (
    /* reexport */
    CZ
  ),
  TextLayer: () => (
    /* reexport */
    Dg
  ),
  TouchManager: () => (
    /* reexport */
    Kd
  ),
  UnexpectedResponseException: () => (
    /* reexport */
    bd
  ),
  Util: () => (
    /* reexport */
    iI
  ),
  VerbosityLevel: () => (
    /* reexport */
    Md
  ),
  XfaLayer: () => (
    /* reexport */
    MB
  ),
  build: () => (
    /* reexport */
    fc
  ),
  createValidAbsoluteUrl: () => (
    /* reexport */
    Ys
  ),
  fetchData: () => (
    /* reexport */
    pd
  ),
  getDocument: () => (
    /* reexport */
    rc
  ),
  getFilenameFromUrl: () => (
    /* reexport */
    ps
  ),
  getPdfFilenameFromUrl: () => (
    /* reexport */
    ks
  ),
  getXfaPageViewport: () => (
    /* reexport */
    Ks
  ),
  isDataScheme: () => (
    /* reexport */
    kd
  ),
  isPdfFile: () => (
    /* reexport */
    AZ
  ),
  noContextMenu: () => (
    /* reexport */
    RC
  ),
  normalizeUnicode: () => (
    /* reexport */
    ys
  ),
  setLayerDimensions: () => (
    /* reexport */
    cA
  ),
  shadow: () => (
    /* reexport */
    uI
  ),
  stopEvent: () => (
    /* reexport */
    Lg
  ),
  version: () => (
    /* reexport */
    Oc
  )
});
const Yg = typeof process == "object" && process + "" == "[object process]" && !process.versions.nw && !(process.versions.electron && process.type && process.type !== "browser"), VB = [1, 0, 0, 1, 0, 0], S0 = [1e-3, 0, 0, 1e-3, 0, 0], es = 1e7, i0 = 1.35, Tg = {
  ANY: 1,
  DISPLAY: 2,
  PRINT: 4,
  SAVE: 8,
  ANNOTATIONS_FORMS: 16,
  ANNOTATIONS_STORAGE: 32,
  ANNOTATIONS_DISABLE: 64,
  IS_EDITING: 128,
  OPLIST: 256
}, TC = {
  DISABLE: 0,
  ENABLE: 1,
  ENABLE_FORMS: 2,
  ENABLE_STORAGE: 3
}, ms = "pdfjs_internal_editor_", JI = {
  DISABLE: -1,
  NONE: 0,
  FREETEXT: 3,
  HIGHLIGHT: 9,
  STAMP: 13,
  INK: 15
}, pI = {
  RESIZE: 1,
  CREATE: 2,
  FREETEXT_SIZE: 11,
  FREETEXT_COLOR: 12,
  FREETEXT_OPACITY: 13,
  INK_COLOR: 21,
  INK_THICKNESS: 22,
  INK_OPACITY: 23,
  HIGHLIGHT_COLOR: 31,
  HIGHLIGHT_DEFAULT_COLOR: 32,
  HIGHLIGHT_THICKNESS: 33,
  HIGHLIGHT_FREE: 34,
  HIGHLIGHT_SHOW_ALL: 35,
  DRAW_STEP: 41
}, hs = {
  PRINT: 4,
  MODIFY_CONTENTS: 8,
  COPY: 16,
  MODIFY_ANNOTATIONS: 32,
  FILL_INTERACTIVE_FORMS: 256,
  COPY_FOR_ACCESSIBILITY: 512,
  ASSEMBLE: 1024,
  PRINT_HIGH_QUALITY: 2048
}, Ng = {
  FILL: 0,
  STROKE: 1,
  FILL_STROKE: 2,
  INVISIBLE: 3,
  FILL_ADD_TO_PATH: 4,
  STROKE_ADD_TO_PATH: 5,
  FILL_STROKE_ADD_TO_PATH: 6,
  ADD_TO_PATH: 7,
  FILL_STROKE_MASK: 3,
  ADD_TO_PATH_FLAG: 4
}, Zd = {
  GRAYSCALE_1BPP: 1,
  RGB_24BPP: 2,
  RGBA_32BPP: 3
}, cg = {
  TEXT: 1,
  LINK: 2,
  FREETEXT: 3,
  LINE: 4,
  SQUARE: 5,
  CIRCLE: 6,
  POLYGON: 7,
  POLYLINE: 8,
  HIGHLIGHT: 9,
  UNDERLINE: 10,
  SQUIGGLY: 11,
  STRIKEOUT: 12,
  STAMP: 13,
  CARET: 14,
  INK: 15,
  POPUP: 16,
  FILEATTACHMENT: 17,
  SOUND: 18,
  MOVIE: 19,
  WIDGET: 20,
  SCREEN: 21,
  PRINTERMARK: 22,
  TRAPNET: 23,
  WATERMARK: 24,
  THREED: 25,
  REDACT: 26
}, vA = {
  SOLID: 1,
  DASHED: 2,
  BEVELED: 3,
  INSET: 4,
  UNDERLINE: 5
}, Md = {
  ERRORS: 0,
  WARNINGS: 1,
  INFOS: 5
}, WC = {
  dependency: 1,
  setLineWidth: 2,
  setLineCap: 3,
  setLineJoin: 4,
  setMiterLimit: 5,
  setDash: 6,
  setRenderingIntent: 7,
  setFlatness: 8,
  setGState: 9,
  save: 10,
  restore: 11,
  transform: 12,
  moveTo: 13,
  lineTo: 14,
  curveTo: 15,
  curveTo2: 16,
  curveTo3: 17,
  closePath: 18,
  rectangle: 19,
  stroke: 20,
  closeStroke: 21,
  fill: 22,
  eoFill: 23,
  fillStroke: 24,
  eoFillStroke: 25,
  closeFillStroke: 26,
  closeEOFillStroke: 27,
  endPath: 28,
  clip: 29,
  eoClip: 30,
  beginText: 31,
  endText: 32,
  setCharSpacing: 33,
  setWordSpacing: 34,
  setHScale: 35,
  setLeading: 36,
  setFont: 37,
  setTextRenderingMode: 38,
  setTextRise: 39,
  moveText: 40,
  setLeadingMoveText: 41,
  setTextMatrix: 42,
  nextLine: 43,
  showText: 44,
  showSpacedText: 45,
  nextLineShowText: 46,
  nextLineSetSpacingShowText: 47,
  setCharWidth: 48,
  setCharWidthAndBounds: 49,
  setStrokeColorSpace: 50,
  setFillColorSpace: 51,
  setStrokeColor: 52,
  setStrokeColorN: 53,
  setFillColor: 54,
  setFillColorN: 55,
  setStrokeGray: 56,
  setFillGray: 57,
  setStrokeRGBColor: 58,
  setFillRGBColor: 59,
  setStrokeCMYKColor: 60,
  setFillCMYKColor: 61,
  shadingFill: 62,
  beginInlineImage: 63,
  beginImageData: 64,
  endInlineImage: 65,
  paintXObject: 66,
  markPoint: 67,
  markPointProps: 68,
  beginMarkedContent: 69,
  beginMarkedContentProps: 70,
  endMarkedContent: 71,
  beginCompat: 72,
  endCompat: 73,
  paintFormXObjectBegin: 74,
  paintFormXObjectEnd: 75,
  beginGroup: 76,
  endGroup: 77,
  beginAnnotation: 80,
  endAnnotation: 81,
  paintImageMaskXObject: 83,
  paintImageMaskXObjectGroup: 84,
  paintImageXObject: 85,
  paintInlineImageXObject: 86,
  paintInlineImageXObjectGroup: 87,
  paintImageXObjectRepeat: 88,
  paintImageMaskXObjectRepeat: 89,
  paintSolidColorImageMask: 90,
  constructPath: 91,
  setStrokeTransparent: 92,
  setFillTransparent: 93
}, Qs = {
  NEED_PASSWORD: 1,
  INCORRECT_PASSWORD: 2
};
let yd = Md.WARNINGS;
function ts(l) {
  Number.isInteger(l) && (yd = l);
}
function Ns() {
  return yd;
}
function Xd(l) {
  yd >= Md.INFOS && console.log(`Info: ${l}`);
}
function DI(l) {
  yd >= Md.WARNINGS && console.log(`Warning: ${l}`);
}
function _I(l) {
  throw new Error(l);
}
function Fg(l, I) {
  l || _I(I);
}
function ws(l) {
  switch (l?.protocol) {
    case "http:":
    case "https:":
    case "ftp:":
    case "mailto:":
    case "tel:":
      return !0;
    default:
      return !1;
  }
}
function Ys(l, I = null, g = null) {
  if (!l)
    return null;
  try {
    if (g && typeof l == "string" && (g.addDefaultProtocol && l.startsWith("www.") && l.match(/\./g)?.length >= 2 && (l = `http://${l}`), g.tryConvertEncoding))
      try {
        l = Ms(l);
      } catch {
      }
    const C = I ? new URL(l, I) : new URL(l);
    if (ws(C))
      return C;
  } catch {
  }
  return null;
}
function uI(l, I, g, C = !1) {
  return Object.defineProperty(l, I, {
    value: g,
    enumerable: !C,
    configurable: !0,
    writable: !1
  }), g;
}
const _C = function() {
  function I(g, C) {
    this.message = g, this.name = C;
  }
  return I.prototype = new Error(), I.constructor = I, I;
}();
class PZ extends _C {
  constructor(I, g) {
    super(I, "PasswordException"), this.code = g;
  }
}
class B0 extends _C {
  constructor(I, g) {
    super(I, "UnknownErrorException"), this.details = g;
  }
}
class J0 extends _C {
  constructor(I) {
    super(I, "InvalidPDFException");
  }
}
class Ql extends _C {
  constructor(I) {
    super(I, "MissingPDFException");
  }
}
class bd extends _C {
  constructor(I, g) {
    super(I, "UnexpectedResponseException"), this.status = g;
  }
}
class Ss extends _C {
  constructor(I) {
    super(I, "FormatError");
  }
}
class xC extends _C {
  constructor(I) {
    super(I, "AbortException");
  }
}
function WB(l) {
  (typeof l != "object" || l?.length === void 0) && _I("Invalid argument for bytesToString");
  const I = l.length, g = 8192;
  if (I < g)
    return String.fromCharCode.apply(null, l);
  const C = [];
  for (let A = 0; A < I; A += g) {
    const d = Math.min(A + g, I), Z = l.subarray(A, d);
    C.push(String.fromCharCode.apply(null, Z));
  }
  return C.join("");
}
function Hd(l) {
  typeof l != "string" && _I("Invalid argument for stringToBytes");
  const I = l.length, g = new Uint8Array(I);
  for (let C = 0; C < I; ++C)
    g[C] = l.charCodeAt(C) & 255;
  return g;
}
function Js(l) {
  return String.fromCharCode(l >> 24 & 255, l >> 16 & 255, l >> 8 & 255, l & 255);
}
function IZ(l) {
  const I = /* @__PURE__ */ Object.create(null);
  for (const [g, C] of l)
    I[g] = C;
  return I;
}
function Ds() {
  const l = new Uint8Array(4);
  return l[0] = 1, new Uint32Array(l.buffer, 0, 1)[0] === 1;
}
function us() {
  try {
    return new Function(""), !0;
  } catch {
    return !1;
  }
}
class ug {
  static get isLittleEndian() {
    return uI(this, "isLittleEndian", Ds());
  }
  static get isEvalSupported() {
    return uI(this, "isEvalSupported", us());
  }
  static get isOffscreenCanvasSupported() {
    return uI(this, "isOffscreenCanvasSupported", typeof OffscreenCanvas < "u");
  }
  static get isImageDecoderSupported() {
    return uI(this, "isImageDecoderSupported", typeof ImageDecoder < "u");
  }
  static get platform() {
    return typeof navigator < "u" && typeof navigator?.platform == "string" ? uI(this, "platform", {
      isMac: navigator.platform.includes("Mac"),
      isWindows: navigator.platform.includes("Win"),
      isFirefox: typeof navigator?.userAgent == "string" && navigator.userAgent.includes("Firefox")
    }) : uI(this, "platform", {
      isMac: !1,
      isWindows: !1,
      isFirefox: !1
    });
  }
  static get isCSSRoundSupported() {
    return uI(this, "isCSSRoundSupported", globalThis.CSS?.supports?.("width: round(1.5px, 1px)"));
  }
}
const F0 = Array.from(Array(256).keys(), (l) => l.toString(16).padStart(2, "0"));
class iI {
  static makeHexColor(I, g, C) {
    return `#${F0[I]}${F0[g]}${F0[C]}`;
  }
  static scaleMinMax(I, g) {
    let C;
    I[0] ? (I[0] < 0 && (C = g[0], g[0] = g[2], g[2] = C), g[0] *= I[0], g[2] *= I[0], I[3] < 0 && (C = g[1], g[1] = g[3], g[3] = C), g[1] *= I[3], g[3] *= I[3]) : (C = g[0], g[0] = g[1], g[1] = C, C = g[2], g[2] = g[3], g[3] = C, I[1] < 0 && (C = g[1], g[1] = g[3], g[3] = C), g[1] *= I[1], g[3] *= I[1], I[2] < 0 && (C = g[0], g[0] = g[2], g[2] = C), g[0] *= I[2], g[2] *= I[2]), g[0] += I[4], g[1] += I[5], g[2] += I[4], g[3] += I[5];
  }
  static transform(I, g) {
    return [I[0] * g[0] + I[2] * g[1], I[1] * g[0] + I[3] * g[1], I[0] * g[2] + I[2] * g[3], I[1] * g[2] + I[3] * g[3], I[0] * g[4] + I[2] * g[5] + I[4], I[1] * g[4] + I[3] * g[5] + I[5]];
  }
  static applyTransform(I, g) {
    const C = I[0] * g[0] + I[1] * g[2] + g[4], A = I[0] * g[1] + I[1] * g[3] + g[5];
    return [C, A];
  }
  static applyInverseTransform(I, g) {
    const C = g[0] * g[3] - g[1] * g[2], A = (I[0] * g[3] - I[1] * g[2] + g[2] * g[5] - g[4] * g[3]) / C, d = (-I[0] * g[1] + I[1] * g[0] + g[4] * g[1] - g[5] * g[0]) / C;
    return [A, d];
  }
  static getAxialAlignedBoundingBox(I, g) {
    const C = this.applyTransform(I, g), A = this.applyTransform(I.slice(2, 4), g), d = this.applyTransform([I[0], I[3]], g), Z = this.applyTransform([I[2], I[1]], g);
    return [Math.min(C[0], A[0], d[0], Z[0]), Math.min(C[1], A[1], d[1], Z[1]), Math.max(C[0], A[0], d[0], Z[0]), Math.max(C[1], A[1], d[1], Z[1])];
  }
  static inverseTransform(I) {
    const g = I[0] * I[3] - I[1] * I[2];
    return [I[3] / g, -I[1] / g, -I[2] / g, I[0] / g, (I[2] * I[5] - I[4] * I[3]) / g, (I[4] * I[1] - I[5] * I[0]) / g];
  }
  static singularValueDecompose2dScale(I) {
    const g = [I[0], I[2], I[1], I[3]], C = I[0] * g[0] + I[1] * g[2], A = I[0] * g[1] + I[1] * g[3], d = I[2] * g[0] + I[3] * g[2], Z = I[2] * g[1] + I[3] * g[3], i = (C + Z) / 2, B = Math.sqrt((C + Z) ** 2 - 4 * (C * Z - d * A)) / 2, F = i + B || 1, s = i - B || 1;
    return [Math.sqrt(F), Math.sqrt(s)];
  }
  static normalizeRect(I) {
    const g = I.slice(0);
    return I[0] > I[2] && (g[0] = I[2], g[2] = I[0]), I[1] > I[3] && (g[1] = I[3], g[3] = I[1]), g;
  }
  static intersect(I, g) {
    const C = Math.max(Math.min(I[0], I[2]), Math.min(g[0], g[2])), A = Math.min(Math.max(I[0], I[2]), Math.max(g[0], g[2]));
    if (C > A)
      return null;
    const d = Math.max(Math.min(I[1], I[3]), Math.min(g[1], g[3])), Z = Math.min(Math.max(I[1], I[3]), Math.max(g[1], g[3]));
    return d > Z ? null : [C, d, A, Z];
  }
  static #I(I, g, C, A, d, Z, i, B, F, s) {
    if (F <= 0 || F >= 1)
      return;
    const c = 1 - F, G = F * F, V = G * F, W = c * (c * (c * I + 3 * F * g) + 3 * G * C) + V * A, R = c * (c * (c * d + 3 * F * Z) + 3 * G * i) + V * B;
    s[0] = Math.min(s[0], W), s[1] = Math.min(s[1], R), s[2] = Math.max(s[2], W), s[3] = Math.max(s[3], R);
  }
  static #g(I, g, C, A, d, Z, i, B, F, s, c, G) {
    if (Math.abs(F) < 1e-12) {
      Math.abs(s) >= 1e-12 && this.#I(I, g, C, A, d, Z, i, B, -c / s, G);
      return;
    }
    const V = s ** 2 - 4 * c * F;
    if (V < 0)
      return;
    const W = Math.sqrt(V), R = 2 * F;
    this.#I(I, g, C, A, d, Z, i, B, (-s + W) / R, G), this.#I(I, g, C, A, d, Z, i, B, (-s - W) / R, G);
  }
  static bezierBoundingBox(I, g, C, A, d, Z, i, B, F) {
    return F ? (F[0] = Math.min(F[0], I, i), F[1] = Math.min(F[1], g, B), F[2] = Math.max(F[2], I, i), F[3] = Math.max(F[3], g, B)) : F = [Math.min(I, i), Math.min(g, B), Math.max(I, i), Math.max(g, B)], this.#g(I, C, d, i, g, A, Z, B, 3 * (-I + 3 * (C - d) + i), 6 * (I - 2 * C + d), 3 * (C - I), F), this.#g(I, C, d, i, g, A, Z, B, 3 * (-g + 3 * (A - Z) + B), 6 * (g - 2 * A + Z), 3 * (A - g), F), F;
  }
}
function Ms(l) {
  return decodeURIComponent(escape(l));
}
let s0 = null, qZ = null;
function ys(l) {
  return s0 || (s0 = /([\u00a0\u00b5\u037e\u0eb3\u2000-\u200a\u202f\u2126\ufb00-\ufb04\ufb06\ufb20-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufba1\ufba4-\ufba9\ufbae-\ufbb1\ufbd3-\ufbdc\ufbde-\ufbe7\ufbea-\ufbf8\ufbfc-\ufbfd\ufc00-\ufc5d\ufc64-\ufcf1\ufcf5-\ufd3d\ufd88\ufdf4\ufdfa-\ufdfb\ufe71\ufe77\ufe79\ufe7b\ufe7d]+)|(\ufb05+)/gu, qZ = /* @__PURE__ */ new Map([["ﬅ", "ſt"]])), l.replaceAll(s0, (I, g, C) => g ? g.normalize("NFKC") : qZ.get(C));
}
function Xs() {
  if (typeof crypto.randomUUID == "function")
    return crypto.randomUUID();
  const l = new Uint8Array(32);
  return crypto.getRandomValues(l), WB(l);
}
const gZ = "pdfjs_internal_id_";
function Hs(l) {
  return Uint8Array.prototype.toBase64 ? l.toBase64() : btoa(WB(l));
}
typeof Promise.try != "function" && (Promise.try = function(l, ...I) {
  return new Promise((g) => {
    g(l(...I));
  });
});
const wC = "http://www.w3.org/2000/svg";
class kA {
  static CSS = 96;
  static PDF = 72;
  static PDF_TO_CSS_UNITS = this.CSS / this.PDF;
}
async function pd(l, I = "text") {
  if (Al(l, document.baseURI)) {
    const g = await fetch(l);
    if (!g.ok)
      throw new Error(g.statusText);
    switch (I) {
      case "arraybuffer":
        return g.arrayBuffer();
      case "blob":
        return g.blob();
      case "json":
        return g.json();
    }
    return g.text();
  }
  return new Promise((g, C) => {
    const A = new XMLHttpRequest();
    A.open("GET", l, !0), A.responseType = I, A.onreadystatechange = () => {
      if (A.readyState === XMLHttpRequest.DONE) {
        if (A.status === 200 || A.status === 0) {
          switch (I) {
            case "arraybuffer":
            case "blob":
            case "json":
              g(A.response);
              return;
          }
          g(A.responseText);
          return;
        }
        C(new Error(A.statusText));
      }
    }, A.send(null);
  });
}
class ul {
  constructor({
    viewBox: I,
    userUnit: g,
    scale: C,
    rotation: A,
    offsetX: d = 0,
    offsetY: Z = 0,
    dontFlip: i = !1
  }) {
    this.viewBox = I, this.userUnit = g, this.scale = C, this.rotation = A, this.offsetX = d, this.offsetY = Z, C *= g;
    const B = (I[2] + I[0]) / 2, F = (I[3] + I[1]) / 2;
    let s, c, G, V;
    switch (A %= 360, A < 0 && (A += 360), A) {
      case 180:
        s = -1, c = 0, G = 0, V = 1;
        break;
      case 90:
        s = 0, c = 1, G = 1, V = 0;
        break;
      case 270:
        s = 0, c = -1, G = -1, V = 0;
        break;
      case 0:
        s = 1, c = 0, G = 0, V = -1;
        break;
      default:
        throw new Error("PageViewport: Invalid rotation, must be a multiple of 90 degrees.");
    }
    i && (G = -G, V = -V);
    let W, R, U, n;
    s === 0 ? (W = Math.abs(F - I[1]) * C + d, R = Math.abs(B - I[0]) * C + Z, U = (I[3] - I[1]) * C, n = (I[2] - I[0]) * C) : (W = Math.abs(B - I[0]) * C + d, R = Math.abs(F - I[1]) * C + Z, U = (I[2] - I[0]) * C, n = (I[3] - I[1]) * C), this.transform = [s * C, c * C, G * C, V * C, W - s * C * B - G * C * F, R - c * C * B - V * C * F], this.width = U, this.height = n;
  }
  get rawDims() {
    const {
      userUnit: I,
      viewBox: g
    } = this, C = g.map((A) => A * I);
    return uI(this, "rawDims", {
      pageWidth: C[2] - C[0],
      pageHeight: C[3] - C[1],
      pageX: C[0],
      pageY: C[1]
    });
  }
  clone({
    scale: I = this.scale,
    rotation: g = this.rotation,
    offsetX: C = this.offsetX,
    offsetY: A = this.offsetY,
    dontFlip: d = !1
  } = {}) {
    return new ul({
      viewBox: this.viewBox.slice(),
      userUnit: this.userUnit,
      scale: I,
      rotation: g,
      offsetX: C,
      offsetY: A,
      dontFlip: d
    });
  }
  convertToViewportPoint(I, g) {
    return iI.applyTransform([I, g], this.transform);
  }
  convertToViewportRectangle(I) {
    const g = iI.applyTransform([I[0], I[1]], this.transform), C = iI.applyTransform([I[2], I[3]], this.transform);
    return [g[0], g[1], C[0], C[1]];
  }
  convertToPdfPoint(I, g) {
    return iI.applyInverseTransform([I, g], this.transform);
  }
}
class CZ extends _C {
  constructor(I, g = 0) {
    super(I, "RenderingCancelledException"), this.extraDelay = g;
  }
}
function kd(l) {
  const I = l.length;
  let g = 0;
  for (; g < I && l[g].trim() === ""; )
    g++;
  return l.substring(g, g + 5).toLowerCase() === "data:";
}
function AZ(l) {
  return typeof l == "string" && /\.pdf$/i.test(l);
}
function ps(l) {
  return [l] = l.split(/[#?]/, 1), l.substring(l.lastIndexOf("/") + 1);
}
function ks(l, I = "document.pdf") {
  if (typeof l != "string")
    return I;
  if (kd(l))
    return DI('getPdfFilenameFromUrl: ignore "data:"-URL for performance reasons.'), I;
  const g = /^(?:(?:[^:]+:)?\/\/[^/]+)?([^?#]*)(\?[^#]*)?(#.*)?$/, C = /[^/?#=]+\.pdf\b(?!.*\.pdf\b)/i, A = g.exec(l);
  let d = C.exec(A[1]) || C.exec(A[2]) || C.exec(A[3]);
  if (d && (d = d[0], d.includes("%")))
    try {
      d = C.exec(decodeURIComponent(d))[0];
    } catch {
    }
  return d || I;
}
class _Z {
  started = /* @__PURE__ */ Object.create(null);
  times = [];
  time(I) {
    I in this.started && DI(`Timer is already running for ${I}`), this.started[I] = Date.now();
  }
  timeEnd(I) {
    I in this.started || DI(`Timer has not been started for ${I}`), this.times.push({
      name: I,
      start: this.started[I],
      end: Date.now()
    }), delete this.started[I];
  }
  toString() {
    const I = [];
    let g = 0;
    for (const {
      name: C
    } of this.times)
      g = Math.max(C.length, g);
    for (const {
      name: C,
      start: A,
      end: d
    } of this.times)
      I.push(`${C.padEnd(g)} ${d - A}ms
`);
    return I.join("");
  }
}
function Al(l, I) {
  try {
    const {
      protocol: g
    } = I ? new URL(l, I) : new URL(l);
    return g === "http:" || g === "https:";
  } catch {
    return !1;
  }
}
function RC(l) {
  l.preventDefault();
}
function Lg(l) {
  l.preventDefault(), l.stopPropagation();
}
class bB {
  static #I;
  static toDateObject(I) {
    if (!I || typeof I != "string")
      return null;
    this.#I ||= new RegExp("^D:(\\d{4})(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?(\\d{2})?([Z|+|-])?(\\d{2})?'?(\\d{2})?'?");
    const g = this.#I.exec(I);
    if (!g)
      return null;
    const C = parseInt(g[1], 10);
    let A = parseInt(g[2], 10);
    A = A >= 1 && A <= 12 ? A - 1 : 0;
    let d = parseInt(g[3], 10);
    d = d >= 1 && d <= 31 ? d : 1;
    let Z = parseInt(g[4], 10);
    Z = Z >= 0 && Z <= 23 ? Z : 0;
    let i = parseInt(g[5], 10);
    i = i >= 0 && i <= 59 ? i : 0;
    let B = parseInt(g[6], 10);
    B = B >= 0 && B <= 59 ? B : 0;
    const F = g[7] || "Z";
    let s = parseInt(g[8], 10);
    s = s >= 0 && s <= 23 ? s : 0;
    let c = parseInt(g[9], 10) || 0;
    return c = c >= 0 && c <= 59 ? c : 0, F === "-" ? (Z += s, i += c) : F === "+" && (Z -= s, i -= c), new Date(Date.UTC(C, A, d, Z, i, B));
  }
}
function Ks(l, {
  scale: I = 1,
  rotation: g = 0
}) {
  const {
    width: C,
    height: A
  } = l.attributes.style, d = [0, 0, parseInt(C), parseInt(A)];
  return new ul({
    viewBox: d,
    userUnit: 1,
    scale: I,
    rotation: g
  });
}
function lZ(l) {
  if (l.startsWith("#")) {
    const I = parseInt(l.slice(1), 16);
    return [(I & 16711680) >> 16, (I & 65280) >> 8, I & 255];
  }
  return l.startsWith("rgb(") ? l.slice(4, -1).split(",").map((I) => parseInt(I)) : l.startsWith("rgba(") ? l.slice(5, -1).split(",").map((I) => parseInt(I)).slice(0, 3) : (DI(`Not a valid color format: "${l}"`), [0, 0, 0]);
}
function rs(l) {
  const I = document.createElement("span");
  I.style.visibility = "hidden", document.body.append(I);
  for (const g of l.keys()) {
    I.style.color = g;
    const C = window.getComputedStyle(I).color;
    l.set(g, lZ(C));
  }
  I.remove();
}
function $I(l) {
  const {
    a: I,
    b: g,
    c: C,
    d: A,
    e: d,
    f: Z
  } = l.getTransform();
  return [I, g, C, A, d, Z];
}
function aC(l) {
  const {
    a: I,
    b: g,
    c: C,
    d: A,
    e: d,
    f: Z
  } = l.getTransform().invertSelf();
  return [I, g, C, A, d, Z];
}
function cA(l, I, g = !1, C = !0) {
  if (I instanceof ul) {
    const {
      pageWidth: A,
      pageHeight: d
    } = I.rawDims, {
      style: Z
    } = l, i = ug.isCSSRoundSupported, B = `var(--scale-factor) * ${A}px`, F = `var(--scale-factor) * ${d}px`, s = i ? `round(down, ${B}, var(--scale-round-x, 1px))` : `calc(${B})`, c = i ? `round(down, ${F}, var(--scale-round-y, 1px))` : `calc(${F})`;
    !g || I.rotation % 180 === 0 ? (Z.width = s, Z.height = c) : (Z.width = c, Z.height = s);
  }
  C && l.setAttribute("data-main-rotation", I.rotation);
}
class D0 {
  constructor() {
    const I = window.devicePixelRatio || 1;
    this.sx = I, this.sy = I;
  }
  get scaled() {
    return this.sx !== 1 || this.sy !== 1;
  }
  get symmetric() {
    return this.sx === this.sy;
  }
}
class Wl {
  #I = null;
  #g = null;
  #C;
  #A = null;
  #d = null;
  static #l = null;
  constructor(I) {
    this.#C = I, Wl.#l ||= Object.freeze({
      freetext: "pdfjs-editor-remove-freetext-button",
      highlight: "pdfjs-editor-remove-highlight-button",
      ink: "pdfjs-editor-remove-ink-button",
      stamp: "pdfjs-editor-remove-stamp-button"
    });
  }
  render() {
    const I = this.#I = document.createElement("div");
    I.classList.add("editToolbar", "hidden"), I.setAttribute("role", "toolbar");
    const g = this.#C._uiManager._signal;
    I.addEventListener("contextmenu", RC, {
      signal: g
    }), I.addEventListener("pointerdown", Wl.#B, {
      signal: g
    });
    const C = this.#A = document.createElement("div");
    C.className = "buttons", I.append(C);
    const A = this.#C.toolbarPosition;
    if (A) {
      const {
        style: d
      } = I, Z = this.#C._uiManager.direction === "ltr" ? 1 - A[0] : A[0];
      d.insetInlineEnd = `${100 * Z}%`, d.top = `calc(${100 * A[1]}% + var(--editor-toolbar-vert-offset))`;
    }
    return this.#G(), I;
  }
  get div() {
    return this.#I;
  }
  static #B(I) {
    I.stopPropagation();
  }
  #i(I) {
    this.#C._focusEventsAllowed = !1, Lg(I);
  }
  #s(I) {
    this.#C._focusEventsAllowed = !0, Lg(I);
  }
  #F(I) {
    const g = this.#C._uiManager._signal;
    I.addEventListener("focusin", this.#i.bind(this), {
      capture: !0,
      signal: g
    }), I.addEventListener("focusout", this.#s.bind(this), {
      capture: !0,
      signal: g
    }), I.addEventListener("contextmenu", RC, {
      signal: g
    });
  }
  hide() {
    this.#I.classList.add("hidden"), this.#g?.hideDropdown();
  }
  show() {
    this.#I.classList.remove("hidden"), this.#d?.shown();
  }
  #G() {
    const {
      editorType: I,
      _uiManager: g
    } = this.#C, C = document.createElement("button");
    C.className = "delete", C.tabIndex = 0, C.setAttribute("data-l10n-id", Wl.#l[I]), this.#F(C), C.addEventListener("click", (A) => {
      g.delete();
    }, {
      signal: g._signal
    }), this.#A.append(C);
  }
  get #c() {
    const I = document.createElement("div");
    return I.className = "divider", I;
  }
  async addAltText(I) {
    const g = await I.render();
    this.#F(g), this.#A.prepend(g, this.#c), this.#d = I;
  }
  addColorPicker(I) {
    this.#g = I;
    const g = I.renderButton();
    this.#F(g), this.#A.prepend(g, this.#c);
  }
  remove() {
    this.#I.remove(), this.#g?.destroy(), this.#g = null;
  }
}
class zs {
  #I = null;
  #g = null;
  #C;
  constructor(I) {
    this.#C = I;
  }
  #A() {
    const I = this.#g = document.createElement("div");
    I.className = "editToolbar", I.setAttribute("role", "toolbar"), I.addEventListener("contextmenu", RC, {
      signal: this.#C._signal
    });
    const g = this.#I = document.createElement("div");
    return g.className = "buttons", I.append(g), this.#l(), I;
  }
  #d(I, g) {
    let C = 0, A = 0;
    for (const d of I) {
      const Z = d.y + d.height;
      if (Z < C)
        continue;
      const i = d.x + (g ? d.width : 0);
      if (Z > C) {
        A = i, C = Z;
        continue;
      }
      g ? i > A && (A = i) : i < A && (A = i);
    }
    return [g ? 1 - A : A, C];
  }
  show(I, g, C) {
    const [A, d] = this.#d(g, C), {
      style: Z
    } = this.#g ||= this.#A();
    I.append(this.#g), Z.insetInlineEnd = `${100 * A}%`, Z.top = `calc(${100 * d}% + var(--editor-toolbar-vert-offset))`;
  }
  hide() {
    this.#g.remove();
  }
  #l() {
    const I = document.createElement("button");
    I.className = "highlightButton", I.tabIndex = 0, I.setAttribute("data-l10n-id", "pdfjs-highlight-floating-button1");
    const g = document.createElement("span");
    I.append(g), g.className = "visuallyHidden", g.setAttribute("data-l10n-id", "pdfjs-highlight-floating-button-label");
    const C = this.#C._signal;
    I.addEventListener("contextmenu", RC, {
      signal: C
    }), I.addEventListener("click", () => {
      this.#C.highlightSelection("floating_button");
    }, {
      signal: C
    }), this.#I.append(I);
  }
}
function Rd(l, I, g) {
  for (const C of g)
    I.addEventListener(C, l[C].bind(l));
}
class Ts {
  #I = 0;
  get id() {
    return `${ms}${this.#I++}`;
  }
}
class dZ {
  #I = Xs();
  #g = 0;
  #C = null;
  static get _isSVGFittingCanvas() {
    const I = 'data:image/svg+xml;charset=UTF-8,<svg viewBox="0 0 1 1" width="1" height="1" xmlns="http://www.w3.org/2000/svg"><rect width="1" height="1" style="fill:red;"/></svg>', C = new OffscreenCanvas(1, 3).getContext("2d", {
      willReadFrequently: !0
    }), A = new Image();
    A.src = I;
    const d = A.decode().then(() => (C.drawImage(A, 0, 0, 1, 1, 0, 0, 1, 3), new Uint32Array(C.getImageData(0, 0, 1, 1).data.buffer)[0] === 0));
    return uI(this, "_isSVGFittingCanvas", d);
  }
  async #A(I, g) {
    this.#C ||= /* @__PURE__ */ new Map();
    let C = this.#C.get(I);
    if (C === null)
      return null;
    if (C?.bitmap)
      return C.refCounter += 1, C;
    try {
      C ||= {
        bitmap: null,
        id: `image_${this.#I}_${this.#g++}`,
        refCounter: 0,
        isSvg: !1
      };
      let A;
      if (typeof g == "string" ? (C.url = g, A = await pd(g, "blob")) : g instanceof File ? A = C.file = g : g instanceof Blob && (A = g), A.type === "image/svg+xml") {
        const d = dZ._isSVGFittingCanvas, Z = new FileReader(), i = new Image(), B = new Promise((F, s) => {
          i.onload = () => {
            C.bitmap = i, C.isSvg = !0, F();
          }, Z.onload = async () => {
            const c = C.svgUrl = Z.result;
            i.src = await d ? `${c}#svgView(preserveAspectRatio(none))` : c;
          }, i.onerror = Z.onerror = s;
        });
        Z.readAsDataURL(A), await B;
      } else
        C.bitmap = await createImageBitmap(A);
      C.refCounter = 1;
    } catch (A) {
      DI(A), C = null;
    }
    return this.#C.set(I, C), C && this.#C.set(C.id, C), C;
  }
  async getFromFile(I) {
    const {
      lastModified: g,
      name: C,
      size: A,
      type: d
    } = I;
    return this.#A(`${g}_${C}_${A}_${d}`, I);
  }
  async getFromUrl(I) {
    return this.#A(I, I);
  }
  async getFromBlob(I, g) {
    const C = await g;
    return this.#A(I, C);
  }
  async getFromId(I) {
    this.#C ||= /* @__PURE__ */ new Map();
    const g = this.#C.get(I);
    if (!g)
      return null;
    if (g.bitmap)
      return g.refCounter += 1, g;
    if (g.file)
      return this.getFromFile(g.file);
    if (g.blobPromise) {
      const {
        blobPromise: C
      } = g;
      return delete g.blobPromise, this.getFromBlob(g.id, C);
    }
    return this.getFromUrl(g.url);
  }
  getFromCanvas(I, g) {
    this.#C ||= /* @__PURE__ */ new Map();
    let C = this.#C.get(I);
    if (C?.bitmap)
      return C.refCounter += 1, C;
    const A = new OffscreenCanvas(g.width, g.height);
    return A.getContext("2d").drawImage(g, 0, 0), C = {
      bitmap: A.transferToImageBitmap(),
      id: `image_${this.#I}_${this.#g++}`,
      refCounter: 1,
      isSvg: !1
    }, this.#C.set(I, C), this.#C.set(C.id, C), C;
  }
  getSvgUrl(I) {
    const g = this.#C.get(I);
    return g?.isSvg ? g.svgUrl : null;
  }
  deleteId(I) {
    this.#C ||= /* @__PURE__ */ new Map();
    const g = this.#C.get(I);
    if (!g || (g.refCounter -= 1, g.refCounter !== 0))
      return;
    const {
      bitmap: C
    } = g;
    if (!g.url && !g.file) {
      const A = new OffscreenCanvas(C.width, C.height);
      A.getContext("bitmaprenderer").transferFromImageBitmap(C), g.blobPromise = A.convertToBlob();
    }
    C.close?.(), g.bitmap = null;
  }
  isValidId(I) {
    return I.startsWith(`image_${this.#I}_`);
  }
}
class Ls {
  #I = [];
  #g = !1;
  #C;
  #A = -1;
  constructor(I = 128) {
    this.#C = I;
  }
  add({
    cmd: I,
    undo: g,
    post: C,
    mustExec: A,
    type: d = NaN,
    overwriteIfSameType: Z = !1,
    keepUndo: i = !1
  }) {
    if (A && I(), this.#g)
      return;
    const B = {
      cmd: I,
      undo: g,
      post: C,
      type: d
    };
    if (this.#A === -1) {
      this.#I.length > 0 && (this.#I.length = 0), this.#A = 0, this.#I.push(B);
      return;
    }
    if (Z && this.#I[this.#A].type === d) {
      i && (B.undo = this.#I[this.#A].undo), this.#I[this.#A] = B;
      return;
    }
    const F = this.#A + 1;
    F === this.#C ? this.#I.splice(0, 1) : (this.#A = F, F < this.#I.length && this.#I.splice(F)), this.#I.push(B);
  }
  undo() {
    if (this.#A === -1)
      return;
    this.#g = !0;
    const {
      undo: I,
      post: g
    } = this.#I[this.#A];
    I(), g?.(), this.#g = !1, this.#A -= 1;
  }
  redo() {
    if (this.#A < this.#I.length - 1) {
      this.#A += 1, this.#g = !0;
      const {
        cmd: I,
        post: g
      } = this.#I[this.#A];
      I(), g?.(), this.#g = !1;
    }
  }
  hasSomethingToUndo() {
    return this.#A !== -1;
  }
  hasSomethingToRedo() {
    return this.#A < this.#I.length - 1;
  }
  cleanType(I) {
    if (this.#A !== -1) {
      for (let g = this.#A; g >= 0; g--)
        if (this.#I[g].type !== I) {
          this.#I.splice(g + 1, this.#A - g), this.#A = g;
          return;
        }
      this.#I.length = 0, this.#A = -1;
    }
  }
  destroy() {
    this.#I = null;
  }
}
class Ml {
  constructor(I) {
    this.buffer = [], this.callbacks = /* @__PURE__ */ new Map(), this.allKeys = /* @__PURE__ */ new Set();
    const {
      isMac: g
    } = ug.platform;
    for (const [C, A, d = {}] of I)
      for (const Z of C) {
        const i = Z.startsWith("mac+");
        g && i ? (this.callbacks.set(Z.slice(4), {
          callback: A,
          options: d
        }), this.allKeys.add(Z.split("+").at(-1))) : !g && !i && (this.callbacks.set(Z, {
          callback: A,
          options: d
        }), this.allKeys.add(Z.split("+").at(-1)));
      }
  }
  #I(I) {
    I.altKey && this.buffer.push("alt"), I.ctrlKey && this.buffer.push("ctrl"), I.metaKey && this.buffer.push("meta"), I.shiftKey && this.buffer.push("shift"), this.buffer.push(I.key);
    const g = this.buffer.join("+");
    return this.buffer.length = 0, g;
  }
  exec(I, g) {
    if (!this.allKeys.has(g.key))
      return;
    const C = this.callbacks.get(this.#I(g));
    if (!C)
      return;
    const {
      callback: A,
      options: {
        bubbles: d = !1,
        args: Z = [],
        checker: i = null
      }
    } = C;
    i && !i(I, g) || (A.bind(I, ...Z, g)(), d || Lg(g));
  }
}
class ZZ {
  static _colorsMapping = /* @__PURE__ */ new Map([["CanvasText", [0, 0, 0]], ["Canvas", [255, 255, 255]]]);
  get _colors() {
    const I = /* @__PURE__ */ new Map([["CanvasText", null], ["Canvas", null]]);
    return rs(I), uI(this, "_colors", I);
  }
  convert(I) {
    const g = lZ(I);
    if (!window.matchMedia("(forced-colors: active)").matches)
      return g;
    for (const [C, A] of this._colors)
      if (A.every((d, Z) => d === g[Z]))
        return ZZ._colorsMapping.get(C);
    return g;
  }
  getHexCode(I) {
    const g = this._colors.get(I);
    return g ? iI.makeHexColor(...g) : I;
  }
}
class OC {
  #I = new AbortController();
  #g = null;
  #C = /* @__PURE__ */ new Map();
  #A = /* @__PURE__ */ new Map();
  #d = null;
  #l = null;
  #B = null;
  #i = new Ls();
  #s = null;
  #F = null;
  #G = 0;
  #c = /* @__PURE__ */ new Set();
  #V = null;
  #Z = null;
  #W = /* @__PURE__ */ new Set();
  _editorUndoBar = null;
  #R = !1;
  #b = !1;
  #n = !1;
  #o = null;
  #U = null;
  #e = null;
  #h = null;
  #t = !1;
  #w = null;
  #S = new Ts();
  #m = !1;
  #Y = !1;
  #N = null;
  #D = null;
  #y = null;
  #H = null;
  #Q = JI.NONE;
  #a = /* @__PURE__ */ new Set();
  #M = null;
  #z = null;
  #T = null;
  #L = {
    isEditing: !1,
    isEmpty: !0,
    hasSomethingToUndo: !1,
    hasSomethingToRedo: !1,
    hasSelectedEditor: !1,
    hasSelectedText: !1
  };
  #p = [0, 0];
  #X = null;
  #k = null;
  #E = null;
  #u = null;
  static TRANSLATE_SMALL = 1;
  static TRANSLATE_BIG = 10;
  static get _keyboardManager() {
    const I = OC.prototype, g = (Z) => Z.#k.contains(document.activeElement) && document.activeElement.tagName !== "BUTTON" && Z.hasSomethingToControl(), C = (Z, {
      target: i
    }) => {
      if (i instanceof HTMLInputElement) {
        const {
          type: B
        } = i;
        return B !== "text" && B !== "number";
      }
      return !0;
    }, A = this.TRANSLATE_SMALL, d = this.TRANSLATE_BIG;
    return uI(this, "_keyboardManager", new Ml([[["ctrl+a", "mac+meta+a"], I.selectAll, {
      checker: C
    }], [["ctrl+z", "mac+meta+z"], I.undo, {
      checker: C
    }], [["ctrl+y", "ctrl+shift+z", "mac+meta+shift+z", "ctrl+shift+Z", "mac+meta+shift+Z"], I.redo, {
      checker: C
    }], [["Backspace", "alt+Backspace", "ctrl+Backspace", "shift+Backspace", "mac+Backspace", "mac+alt+Backspace", "mac+ctrl+Backspace", "Delete", "ctrl+Delete", "shift+Delete", "mac+Delete"], I.delete, {
      checker: C
    }], [["Enter", "mac+Enter"], I.addNewEditorFromKeyboard, {
      checker: (Z, {
        target: i
      }) => !(i instanceof HTMLButtonElement) && Z.#k.contains(i) && !Z.isEnterHandled
    }], [[" ", "mac+ "], I.addNewEditorFromKeyboard, {
      checker: (Z, {
        target: i
      }) => !(i instanceof HTMLButtonElement) && Z.#k.contains(document.activeElement)
    }], [["Escape", "mac+Escape"], I.unselectAll], [["ArrowLeft", "mac+ArrowLeft"], I.translateSelectedEditors, {
      args: [-A, 0],
      checker: g
    }], [["ctrl+ArrowLeft", "mac+shift+ArrowLeft"], I.translateSelectedEditors, {
      args: [-d, 0],
      checker: g
    }], [["ArrowRight", "mac+ArrowRight"], I.translateSelectedEditors, {
      args: [A, 0],
      checker: g
    }], [["ctrl+ArrowRight", "mac+shift+ArrowRight"], I.translateSelectedEditors, {
      args: [d, 0],
      checker: g
    }], [["ArrowUp", "mac+ArrowUp"], I.translateSelectedEditors, {
      args: [0, -A],
      checker: g
    }], [["ctrl+ArrowUp", "mac+shift+ArrowUp"], I.translateSelectedEditors, {
      args: [0, -d],
      checker: g
    }], [["ArrowDown", "mac+ArrowDown"], I.translateSelectedEditors, {
      args: [0, A],
      checker: g
    }], [["ctrl+ArrowDown", "mac+shift+ArrowDown"], I.translateSelectedEditors, {
      args: [0, d],
      checker: g
    }]]));
  }
  constructor(I, g, C, A, d, Z, i, B, F, s, c, G, V) {
    const W = this._signal = this.#I.signal;
    this.#k = I, this.#E = g, this.#d = C, this._eventBus = A, A._on("editingaction", this.onEditingAction.bind(this), {
      signal: W
    }), A._on("pagechanging", this.onPageChanging.bind(this), {
      signal: W
    }), A._on("scalechanging", this.onScaleChanging.bind(this), {
      signal: W
    }), A._on("rotationchanging", this.onRotationChanging.bind(this), {
      signal: W
    }), A._on("setpreference", this.onSetPreference.bind(this), {
      signal: W
    }), A._on("switchannotationeditorparams", (R) => this.updateParams(R.type, R.value), {
      signal: W
    }), this.#gI(), this.#dI(), this.#O(), this.#l = d.annotationStorage, this.#o = d.filterFactory, this.#z = Z, this.#h = i || null, this.#R = B, this.#b = F, this.#n = s, this.#H = c || null, this.viewParameters = {
      realScale: kA.PDF_TO_CSS_UNITS,
      rotation: 0
    }, this.isShiftKeyDown = !1, this._editorUndoBar = G || null, this._supportsPinchToZoom = V !== !1;
  }
  destroy() {
    this.#u?.resolve(), this.#u = null, this.#I?.abort(), this.#I = null, this._signal = null;
    for (const I of this.#A.values())
      I.destroy();
    this.#A.clear(), this.#C.clear(), this.#W.clear(), this.#g = null, this.#a.clear(), this.#i.destroy(), this.#d?.destroy(), this.#w?.hide(), this.#w = null, this.#U && (clearTimeout(this.#U), this.#U = null), this.#X && (clearTimeout(this.#X), this.#X = null), this._editorUndoBar?.destroy();
  }
  combinedSignal(I) {
    return AbortSignal.any([this._signal, I.signal]);
  }
  get mlManager() {
    return this.#H;
  }
  get useNewAltTextFlow() {
    return this.#b;
  }
  get useNewAltTextWhenAddingImage() {
    return this.#n;
  }
  get hcmFilter() {
    return uI(this, "hcmFilter", this.#z ? this.#o.addHCMFilter(this.#z.foreground, this.#z.background) : "none");
  }
  get direction() {
    return uI(this, "direction", getComputedStyle(this.#k).direction);
  }
  get highlightColors() {
    return uI(this, "highlightColors", this.#h ? new Map(this.#h.split(",").map((I) => I.split("=").map((g) => g.trim()))) : null);
  }
  get highlightColorNames() {
    return uI(this, "highlightColorNames", this.highlightColors ? new Map(Array.from(this.highlightColors, (I) => I.reverse())) : null);
  }
  setCurrentDrawingSession(I) {
    I ? (this.unselectAll(), this.disableUserSelect(!0)) : this.disableUserSelect(!1), this.#F = I;
  }
  setMainHighlightColorPicker(I) {
    this.#y = I;
  }
  editAltText(I, g = !1) {
    this.#d?.editAltText(this, I, g);
  }
  switchToMode(I, g) {
    this._eventBus.on("annotationeditormodechanged", g, {
      once: !0,
      signal: this._signal
    }), this._eventBus.dispatch("showannotationeditorui", {
      source: this,
      mode: I
    });
  }
  setPreference(I, g) {
    this._eventBus.dispatch("setpreference", {
      source: this,
      name: I,
      value: g
    });
  }
  onSetPreference({
    name: I,
    value: g
  }) {
    switch (I) {
      case "enableNewAltTextWhenAddingImage":
        this.#n = g;
        break;
    }
  }
  onPageChanging({
    pageNumber: I
  }) {
    this.#G = I - 1;
  }
  focusMainContainer() {
    this.#k.focus();
  }
  findParent(I, g) {
    for (const C of this.#A.values()) {
      const {
        x: A,
        y: d,
        width: Z,
        height: i
      } = C.div.getBoundingClientRect();
      if (I >= A && I <= A + Z && g >= d && g <= d + i)
        return C;
    }
    return null;
  }
  disableUserSelect(I = !1) {
    this.#E.classList.toggle("noUserSelect", I);
  }
  addShouldRescale(I) {
    this.#W.add(I);
  }
  removeShouldRescale(I) {
    this.#W.delete(I);
  }
  onScaleChanging({
    scale: I
  }) {
    this.commitOrRemove(), this.viewParameters.realScale = I * kA.PDF_TO_CSS_UNITS;
    for (const g of this.#W)
      g.onScaleChanging();
    this.#F?.onScaleChanging();
  }
  onRotationChanging({
    pagesRotation: I
  }) {
    this.commitOrRemove(), this.viewParameters.rotation = I;
  }
  #K({
    anchorNode: I
  }) {
    return I.nodeType === Node.TEXT_NODE ? I.parentElement : I;
  }
  #x(I) {
    const {
      currentLayer: g
    } = this;
    if (g.hasTextLayer(I))
      return g;
    for (const C of this.#A.values())
      if (C.hasTextLayer(I))
        return C;
    return null;
  }
  highlightSelection(I = "") {
    const g = document.getSelection();
    if (!g || g.isCollapsed)
      return;
    const {
      anchorNode: C,
      anchorOffset: A,
      focusNode: d,
      focusOffset: Z
    } = g, i = g.toString(), F = this.#K(g).closest(".textLayer"), s = this.getSelectionBoxes(F);
    if (!s)
      return;
    g.empty();
    const c = this.#x(F), G = this.#Q === JI.NONE, V = () => {
      c?.createAndAddNewEditor({
        x: 0,
        y: 0
      }, !1, {
        methodOfCreation: I,
        boxes: s,
        anchorNode: C,
        anchorOffset: A,
        focusNode: d,
        focusOffset: Z,
        text: i
      }), G && this.showAllEditors("highlight", !0, !0);
    };
    if (G) {
      this.switchToMode(JI.HIGHLIGHT, V);
      return;
    }
    V();
  }
  #$() {
    const I = document.getSelection();
    if (!I || I.isCollapsed)
      return;
    const C = this.#K(I).closest(".textLayer"), A = this.getSelectionBoxes(C);
    A && (this.#w ||= new zs(this), this.#w.show(C, A, this.direction === "ltr"));
  }
  addToAnnotationStorage(I) {
    !I.isEmpty() && this.#l && !this.#l.has(I.id) && this.#l.setValue(I.id, I);
  }
  #II() {
    const I = document.getSelection();
    if (!I || I.isCollapsed) {
      this.#M && (this.#w?.hide(), this.#M = null, this.#J({
        hasSelectedText: !1
      }));
      return;
    }
    const {
      anchorNode: g
    } = I;
    if (g === this.#M)
      return;
    const A = this.#K(I).closest(".textLayer");
    if (!A) {
      this.#M && (this.#w?.hide(), this.#M = null, this.#J({
        hasSelectedText: !1
      }));
      return;
    }
    if (this.#w?.hide(), this.#M = g, this.#J({
      hasSelectedText: !0
    }), !(this.#Q !== JI.HIGHLIGHT && this.#Q !== JI.NONE) && (this.#Q === JI.HIGHLIGHT && this.showAllEditors("highlight", !0, !0), this.#t = this.isShiftKeyDown, !this.isShiftKeyDown)) {
      const d = this.#Q === JI.HIGHLIGHT ? this.#x(A) : null;
      d?.toggleDrawing();
      const Z = new AbortController(), i = this.combinedSignal(Z), B = (F) => {
        F.type === "pointerup" && F.button !== 0 || (Z.abort(), d?.toggleDrawing(!0), F.type === "pointerup" && this.#v("main_toolbar"));
      };
      window.addEventListener("pointerup", B, {
        signal: i
      }), window.addEventListener("blur", B, {
        signal: i
      });
    }
  }
  #v(I = "") {
    this.#Q === JI.HIGHLIGHT ? this.highlightSelection(I) : this.#R && this.#$();
  }
  #gI() {
    document.addEventListener("selectionchange", this.#II.bind(this), {
      signal: this._signal
    });
  }
  #CI() {
    if (this.#e)
      return;
    this.#e = new AbortController();
    const I = this.combinedSignal(this.#e);
    window.addEventListener("focus", this.focus.bind(this), {
      signal: I
    }), window.addEventListener("blur", this.blur.bind(this), {
      signal: I
    });
  }
  #AI() {
    this.#e?.abort(), this.#e = null;
  }
  blur() {
    if (this.isShiftKeyDown = !1, this.#t && (this.#t = !1, this.#v("main_toolbar")), !this.hasSelection)
      return;
    const {
      activeElement: I
    } = document;
    for (const g of this.#a)
      if (g.div.contains(I)) {
        this.#D = [g, I], g._focusEventsAllowed = !1;
        break;
      }
  }
  focus() {
    if (!this.#D)
      return;
    const [I, g] = this.#D;
    this.#D = null, g.addEventListener("focusin", () => {
      I._focusEventsAllowed = !0;
    }, {
      once: !0,
      signal: this._signal
    }), g.focus();
  }
  #O() {
    if (this.#N)
      return;
    this.#N = new AbortController();
    const I = this.combinedSignal(this.#N);
    window.addEventListener("keydown", this.keydown.bind(this), {
      signal: I
    }), window.addEventListener("keyup", this.keyup.bind(this), {
      signal: I
    });
  }
  #lI() {
    this.#N?.abort(), this.#N = null;
  }
  #f() {
    if (this.#s)
      return;
    this.#s = new AbortController();
    const I = this.combinedSignal(this.#s);
    document.addEventListener("copy", this.copy.bind(this), {
      signal: I
    }), document.addEventListener("cut", this.cut.bind(this), {
      signal: I
    }), document.addEventListener("paste", this.paste.bind(this), {
      signal: I
    });
  }
  #P() {
    this.#s?.abort(), this.#s = null;
  }
  #dI() {
    const I = this._signal;
    document.addEventListener("dragover", this.dragOver.bind(this), {
      signal: I
    }), document.addEventListener("drop", this.drop.bind(this), {
      signal: I
    });
  }
  addEditListeners() {
    this.#O(), this.#f();
  }
  removeEditListeners() {
    this.#lI(), this.#P();
  }
  dragOver(I) {
    for (const {
      type: g
    } of I.dataTransfer.items)
      for (const C of this.#Z)
        if (C.isHandlingMimeForPasting(g)) {
          I.dataTransfer.dropEffect = "copy", I.preventDefault();
          return;
        }
  }
  drop(I) {
    for (const g of I.dataTransfer.items)
      for (const C of this.#Z)
        if (C.isHandlingMimeForPasting(g.type)) {
          C.paste(g, this.currentLayer), I.preventDefault();
          return;
        }
  }
  copy(I) {
    if (I.preventDefault(), this.#g?.commitOrRemove(), !this.hasSelection)
      return;
    const g = [];
    for (const C of this.#a) {
      const A = C.serialize(!0);
      A && g.push(A);
    }
    g.length !== 0 && I.clipboardData.setData("application/pdfjs", JSON.stringify(g));
  }
  cut(I) {
    this.copy(I), this.delete();
  }
  async paste(I) {
    I.preventDefault();
    const {
      clipboardData: g
    } = I;
    for (const d of g.items)
      for (const Z of this.#Z)
        if (Z.isHandlingMimeForPasting(d.type)) {
          Z.paste(d, this.currentLayer);
          return;
        }
    let C = g.getData("application/pdfjs");
    if (!C)
      return;
    try {
      C = JSON.parse(C);
    } catch (d) {
      DI(`paste: "${d.message}".`);
      return;
    }
    if (!Array.isArray(C))
      return;
    this.unselectAll();
    const A = this.currentLayer;
    try {
      const d = [];
      for (const B of C) {
        const F = await A.deserialize(B);
        if (!F)
          return;
        d.push(F);
      }
      const Z = () => {
        for (const B of d)
          this.#q(B);
        this.#_(d);
      }, i = () => {
        for (const B of d)
          B.remove();
      };
      this.addCommands({
        cmd: Z,
        undo: i,
        mustExec: !0
      });
    } catch (d) {
      DI(`paste: "${d.message}".`);
    }
  }
  keydown(I) {
    !this.isShiftKeyDown && I.key === "Shift" && (this.isShiftKeyDown = !0), this.#Q !== JI.NONE && !this.isEditorHandlingKeyboard && OC._keyboardManager.exec(this, I);
  }
  keyup(I) {
    this.isShiftKeyDown && I.key === "Shift" && (this.isShiftKeyDown = !1, this.#t && (this.#t = !1, this.#v("main_toolbar")));
  }
  onEditingAction({
    name: I
  }) {
    switch (I) {
      case "undo":
      case "redo":
      case "delete":
      case "selectAll":
        this[I]();
        break;
      case "highlightSelection":
        this.highlightSelection("context_menu");
        break;
    }
  }
  #J(I) {
    Object.entries(I).some(([C, A]) => this.#L[C] !== A) && (this._eventBus.dispatch("annotationeditorstateschanged", {
      source: this,
      details: Object.assign(this.#L, I)
    }), this.#Q === JI.HIGHLIGHT && I.hasSelectedEditor === !1 && this.#r([[pI.HIGHLIGHT_FREE, !0]]));
  }
  #r(I) {
    this._eventBus.dispatch("annotationeditorparamschanged", {
      source: this,
      details: I
    });
  }
  setEditingState(I) {
    I ? (this.#CI(), this.#f(), this.#J({
      isEditing: this.#Q !== JI.NONE,
      isEmpty: this.#j(),
      hasSomethingToUndo: this.#i.hasSomethingToUndo(),
      hasSomethingToRedo: this.#i.hasSomethingToRedo(),
      hasSelectedEditor: !1
    })) : (this.#AI(), this.#P(), this.#J({
      isEditing: !1
    }), this.disableUserSelect(!1));
  }
  registerEditorTypes(I) {
    if (!this.#Z) {
      this.#Z = I;
      for (const g of this.#Z)
        this.#r(g.defaultPropertiesToUpdate);
    }
  }
  getId() {
    return this.#S.id;
  }
  get currentLayer() {
    return this.#A.get(this.#G);
  }
  getLayer(I) {
    return this.#A.get(I);
  }
  get currentPageIndex() {
    return this.#G;
  }
  addLayer(I) {
    this.#A.set(I.pageIndex, I), this.#m ? I.enable() : I.disable();
  }
  removeLayer(I) {
    this.#A.delete(I.pageIndex);
  }
  async updateMode(I, g = null, C = !1) {
    if (this.#Q !== I && !(this.#u && (await this.#u.promise, !this.#u))) {
      if (this.#u = Promise.withResolvers(), this.#Q = I, I === JI.NONE) {
        this.setEditingState(!1), this.#iI(), this._editorUndoBar?.hide(), this.#u.resolve();
        return;
      }
      this.setEditingState(!0), await this.#ZI(), this.unselectAll();
      for (const A of this.#A.values())
        A.updateMode(I);
      if (!g) {
        C && this.addNewEditorFromKeyboard(), this.#u.resolve();
        return;
      }
      for (const A of this.#C.values())
        A.annotationElementId === g ? (this.setSelected(A), A.enterInEditMode()) : A.unselect();
      this.#u.resolve();
    }
  }
  addNewEditorFromKeyboard() {
    this.currentLayer.canCreateNewEmptyEditor() && this.currentLayer.addNewEditor();
  }
  updateToolbar(I) {
    I !== this.#Q && this._eventBus.dispatch("switchannotationeditormode", {
      source: this,
      mode: I
    });
  }
  updateParams(I, g) {
    if (this.#Z) {
      switch (I) {
        case pI.CREATE:
          this.currentLayer.addNewEditor();
          return;
        case pI.HIGHLIGHT_DEFAULT_COLOR:
          this.#y?.updateColor(g);
          break;
        case pI.HIGHLIGHT_SHOW_ALL:
          this._eventBus.dispatch("reporttelemetry", {
            source: this,
            details: {
              type: "editing",
              data: {
                type: "highlight",
                action: "toggle_visibility"
              }
            }
          }), (this.#T ||= /* @__PURE__ */ new Map()).set(I, g), this.showAllEditors("highlight", g);
          break;
      }
      for (const C of this.#a)
        C.updateParams(I, g);
      for (const C of this.#Z)
        C.updateDefaultParams(I, g);
    }
  }
  showAllEditors(I, g, C = !1) {
    for (const d of this.#C.values())
      d.editorType === I && d.show(g);
    (this.#T?.get(pI.HIGHLIGHT_SHOW_ALL) ?? !0) !== g && this.#r([[pI.HIGHLIGHT_SHOW_ALL, g]]);
  }
  enableWaiting(I = !1) {
    if (this.#Y !== I) {
      this.#Y = I;
      for (const g of this.#A.values())
        I ? g.disableClick() : g.enableClick(), g.div.classList.toggle("waiting", I);
    }
  }
  async #ZI() {
    if (!this.#m) {
      this.#m = !0;
      const I = [];
      for (const g of this.#A.values())
        I.push(g.enable());
      await Promise.all(I);
      for (const g of this.#C.values())
        g.enable();
    }
  }
  #iI() {
    if (this.unselectAll(), this.#m) {
      this.#m = !1;
      for (const I of this.#A.values())
        I.disable();
      for (const I of this.#C.values())
        I.disable();
    }
  }
  getEditors(I) {
    const g = [];
    for (const C of this.#C.values())
      C.pageIndex === I && g.push(C);
    return g;
  }
  getEditor(I) {
    return this.#C.get(I);
  }
  addEditor(I) {
    this.#C.set(I.id, I);
  }
  removeEditor(I) {
    I.div.contains(document.activeElement) && (this.#U && clearTimeout(this.#U), this.#U = setTimeout(() => {
      this.focusMainContainer(), this.#U = null;
    }, 0)), this.#C.delete(I.id), this.unselect(I), (!I.annotationElementId || !this.#c.has(I.annotationElementId)) && this.#l?.remove(I.id);
  }
  addDeletedAnnotationElement(I) {
    this.#c.add(I.annotationElementId), this.addChangedExistingAnnotation(I), I.deleted = !0;
  }
  isDeletedAnnotationElement(I) {
    return this.#c.has(I);
  }
  removeDeletedAnnotationElement(I) {
    this.#c.delete(I.annotationElementId), this.removeChangedExistingAnnotation(I), I.deleted = !1;
  }
  #q(I) {
    const g = this.#A.get(I.pageIndex);
    g ? g.addOrRebuild(I) : (this.addEditor(I), this.addToAnnotationStorage(I));
  }
  setActiveEditor(I) {
    this.#g !== I && (this.#g = I, I && this.#r(I.propertiesToUpdate));
  }
  get #BI() {
    let I = null;
    for (I of this.#a)
      ;
    return I;
  }
  updateUI(I) {
    this.#BI === I && this.#r(I.propertiesToUpdate);
  }
  updateUIForDefaultProperties(I) {
    this.#r(I.defaultPropertiesToUpdate);
  }
  toggleSelected(I) {
    if (this.#a.has(I)) {
      this.#a.delete(I), I.unselect(), this.#J({
        hasSelectedEditor: this.hasSelection
      });
      return;
    }
    this.#a.add(I), I.select(), this.#r(I.propertiesToUpdate), this.#J({
      hasSelectedEditor: !0
    });
  }
  setSelected(I) {
    this.#F?.commitOrRemove();
    for (const g of this.#a)
      g !== I && g.unselect();
    this.#a.clear(), this.#a.add(I), I.select(), this.#r(I.propertiesToUpdate), this.#J({
      hasSelectedEditor: !0
    });
  }
  isSelected(I) {
    return this.#a.has(I);
  }
  get firstSelectedEditor() {
    return this.#a.values().next().value;
  }
  unselect(I) {
    I.unselect(), this.#a.delete(I), this.#J({
      hasSelectedEditor: this.hasSelection
    });
  }
  get hasSelection() {
    return this.#a.size !== 0;
  }
  get isEnterHandled() {
    return this.#a.size === 1 && this.firstSelectedEditor.isEnterHandled;
  }
  undo() {
    this.#i.undo(), this.#J({
      hasSomethingToUndo: this.#i.hasSomethingToUndo(),
      hasSomethingToRedo: !0,
      isEmpty: this.#j()
    }), this._editorUndoBar?.hide();
  }
  redo() {
    this.#i.redo(), this.#J({
      hasSomethingToUndo: !0,
      hasSomethingToRedo: this.#i.hasSomethingToRedo(),
      isEmpty: this.#j()
    });
  }
  addCommands(I) {
    this.#i.add(I), this.#J({
      hasSomethingToUndo: !0,
      hasSomethingToRedo: !1,
      isEmpty: this.#j()
    });
  }
  cleanUndoStack(I) {
    this.#i.cleanType(I);
  }
  #j() {
    if (this.#C.size === 0)
      return !0;
    if (this.#C.size === 1)
      for (const I of this.#C.values())
        return I.isEmpty();
    return !1;
  }
  delete() {
    this.commitOrRemove();
    const I = this.currentLayer?.endDrawingSession(!0);
    if (!this.hasSelection && !I)
      return;
    const g = I ? [I] : [...this.#a], C = () => {
      this._editorUndoBar?.show(A, g.length === 1 ? g[0].editorType : g.length);
      for (const d of g)
        d.remove();
    }, A = () => {
      for (const d of g)
        this.#q(d);
    };
    this.addCommands({
      cmd: C,
      undo: A,
      mustExec: !0
    });
  }
  commitOrRemove() {
    this.#g?.commitOrRemove();
  }
  hasSomethingToControl() {
    return this.#g || this.hasSelection;
  }
  #_(I) {
    for (const g of this.#a)
      g.unselect();
    this.#a.clear();
    for (const g of I)
      g.isEmpty() || (this.#a.add(g), g.select());
    this.#J({
      hasSelectedEditor: this.hasSelection
    });
  }
  selectAll() {
    for (const I of this.#a)
      I.commit();
    this.#_(this.#C.values());
  }
  unselectAll() {
    if (!(this.#g && (this.#g.commitOrRemove(), this.#Q !== JI.NONE)) && !this.#F?.commitOrRemove() && this.hasSelection) {
      for (const I of this.#a)
        I.unselect();
      this.#a.clear(), this.#J({
        hasSelectedEditor: !1
      });
    }
  }
  translateSelectedEditors(I, g, C = !1) {
    if (C || this.commitOrRemove(), !this.hasSelection)
      return;
    this.#p[0] += I, this.#p[1] += g;
    const [A, d] = this.#p, Z = [...this.#a], i = 1e3;
    this.#X && clearTimeout(this.#X), this.#X = setTimeout(() => {
      this.#X = null, this.#p[0] = this.#p[1] = 0, this.addCommands({
        cmd: () => {
          for (const B of Z)
            this.#C.has(B.id) && B.translateInPage(A, d);
        },
        undo: () => {
          for (const B of Z)
            this.#C.has(B.id) && B.translateInPage(-A, -d);
        },
        mustExec: !1
      });
    }, i);
    for (const B of Z)
      B.translateInPage(I, g);
  }
  setUpDragSession() {
    if (this.hasSelection) {
      this.disableUserSelect(!0), this.#V = /* @__PURE__ */ new Map();
      for (const I of this.#a)
        this.#V.set(I, {
          savedX: I.x,
          savedY: I.y,
          savedPageIndex: I.pageIndex,
          newX: 0,
          newY: 0,
          newPageIndex: -1
        });
    }
  }
  endDragSession() {
    if (!this.#V)
      return !1;
    this.disableUserSelect(!1);
    const I = this.#V;
    this.#V = null;
    let g = !1;
    for (const [{
      x: A,
      y: d,
      pageIndex: Z
    }, i] of I)
      i.newX = A, i.newY = d, i.newPageIndex = Z, g ||= A !== i.savedX || d !== i.savedY || Z !== i.savedPageIndex;
    if (!g)
      return !1;
    const C = (A, d, Z, i) => {
      if (this.#C.has(A.id)) {
        const B = this.#A.get(i);
        B ? A._setParentAndPosition(B, d, Z) : (A.pageIndex = i, A.x = d, A.y = Z);
      }
    };
    return this.addCommands({
      cmd: () => {
        for (const [A, {
          newX: d,
          newY: Z,
          newPageIndex: i
        }] of I)
          C(A, d, Z, i);
      },
      undo: () => {
        for (const [A, {
          savedX: d,
          savedY: Z,
          savedPageIndex: i
        }] of I)
          C(A, d, Z, i);
      },
      mustExec: !0
    }), !0;
  }
  dragSelectedEditors(I, g) {
    if (this.#V)
      for (const C of this.#V.keys())
        C.drag(I, g);
  }
  rebuild(I) {
    if (I.parent === null) {
      const g = this.getLayer(I.pageIndex);
      g ? (g.changeParent(I), g.addOrRebuild(I)) : (this.addEditor(I), this.addToAnnotationStorage(I), I.rebuild());
    } else
      I.parent.addOrRebuild(I);
  }
  get isEditorHandlingKeyboard() {
    return this.getActive()?.shouldGetKeyboardEvents() || this.#a.size === 1 && this.firstSelectedEditor.shouldGetKeyboardEvents();
  }
  isActive(I) {
    return this.#g === I;
  }
  getActive() {
    return this.#g;
  }
  getMode() {
    return this.#Q;
  }
  get imageManager() {
    return uI(this, "imageManager", new dZ());
  }
  getSelectionBoxes(I) {
    if (!I)
      return null;
    const g = document.getSelection();
    for (let F = 0, s = g.rangeCount; F < s; F++)
      if (!I.contains(g.getRangeAt(F).commonAncestorContainer))
        return null;
    const {
      x: C,
      y: A,
      width: d,
      height: Z
    } = I.getBoundingClientRect();
    let i;
    switch (I.getAttribute("data-main-rotation")) {
      case "90":
        i = (F, s, c, G) => ({
          x: (s - A) / Z,
          y: 1 - (F + c - C) / d,
          width: G / Z,
          height: c / d
        });
        break;
      case "180":
        i = (F, s, c, G) => ({
          x: 1 - (F + c - C) / d,
          y: 1 - (s + G - A) / Z,
          width: c / d,
          height: G / Z
        });
        break;
      case "270":
        i = (F, s, c, G) => ({
          x: 1 - (s + G - A) / Z,
          y: (F - C) / d,
          width: G / Z,
          height: c / d
        });
        break;
      default:
        i = (F, s, c, G) => ({
          x: (F - C) / d,
          y: (s - A) / Z,
          width: c / d,
          height: G / Z
        });
        break;
    }
    const B = [];
    for (let F = 0, s = g.rangeCount; F < s; F++) {
      const c = g.getRangeAt(F);
      if (!c.collapsed)
        for (const {
          x: G,
          y: V,
          width: W,
          height: R
        } of c.getClientRects())
          W === 0 || R === 0 || B.push(i(G, V, W, R));
    }
    return B.length === 0 ? null : B;
  }
  addChangedExistingAnnotation({
    annotationElementId: I,
    id: g
  }) {
    (this.#B ||= /* @__PURE__ */ new Map()).set(I, g);
  }
  removeChangedExistingAnnotation({
    annotationElementId: I
  }) {
    this.#B?.delete(I);
  }
  renderAnnotationElement(I) {
    const g = this.#B?.get(I.data.id);
    if (!g)
      return;
    const C = this.#l.getRawValue(g);
    C && (this.#Q === JI.NONE && !C.hasBeenModified || C.renderAnnotationElement(I));
  }
}
class mC {
  #I = null;
  #g = !1;
  #C = null;
  #A = null;
  #d = null;
  #l = null;
  #B = !1;
  #i = null;
  #s = null;
  #F = null;
  #G = null;
  #c = !1;
  static #V = null;
  static _l10n = null;
  constructor(I) {
    this.#s = I, this.#c = I._uiManager.useNewAltTextFlow, mC.#V ||= Object.freeze({
      added: "pdfjs-editor-new-alt-text-added-button",
      "added-label": "pdfjs-editor-new-alt-text-added-button-label",
      missing: "pdfjs-editor-new-alt-text-missing-button",
      "missing-label": "pdfjs-editor-new-alt-text-missing-button-label",
      review: "pdfjs-editor-new-alt-text-to-review-button",
      "review-label": "pdfjs-editor-new-alt-text-to-review-button-label"
    });
  }
  static initialize(I) {
    mC._l10n ??= I;
  }
  async render() {
    const I = this.#C = document.createElement("button");
    I.className = "altText", I.tabIndex = "0";
    const g = this.#A = document.createElement("span");
    I.append(g), this.#c ? (I.classList.add("new"), I.setAttribute("data-l10n-id", mC.#V.missing), g.setAttribute("data-l10n-id", mC.#V["missing-label"])) : (I.setAttribute("data-l10n-id", "pdfjs-editor-alt-text-button"), g.setAttribute("data-l10n-id", "pdfjs-editor-alt-text-button-label"));
    const C = this.#s._uiManager._signal;
    I.addEventListener("contextmenu", RC, {
      signal: C
    }), I.addEventListener("pointerdown", (d) => d.stopPropagation(), {
      signal: C
    });
    const A = (d) => {
      d.preventDefault(), this.#s._uiManager.editAltText(this.#s), this.#c && this.#s._reportTelemetry({
        action: "pdfjs.image.alt_text.image_status_label_clicked",
        data: {
          label: this.#Z
        }
      });
    };
    return I.addEventListener("click", A, {
      capture: !0,
      signal: C
    }), I.addEventListener("keydown", (d) => {
      d.target === I && d.key === "Enter" && (this.#B = !0, A(d));
    }, {
      signal: C
    }), await this.#W(), I;
  }
  get #Z() {
    return this.#I && "added" || this.#I === null && this.guessedText && "review" || "missing";
  }
  finish() {
    this.#C && (this.#C.focus({
      focusVisible: this.#B
    }), this.#B = !1);
  }
  isEmpty() {
    return this.#c ? this.#I === null : !this.#I && !this.#g;
  }
  hasData() {
    return this.#c ? this.#I !== null || !!this.#F : this.isEmpty();
  }
  get guessedText() {
    return this.#F;
  }
  async setGuessedText(I) {
    this.#I === null && (this.#F = I, this.#G = await mC._l10n.get("pdfjs-editor-new-alt-text-generated-alt-text-with-disclaimer", {
      generatedAltText: I
    }), this.#W());
  }
  toggleAltTextBadge(I = !1) {
    if (!this.#c || this.#I) {
      this.#i?.remove(), this.#i = null;
      return;
    }
    if (!this.#i) {
      const g = this.#i = document.createElement("div");
      g.className = "noAltTextBadge", this.#s.div.append(g);
    }
    this.#i.classList.toggle("hidden", !I);
  }
  serialize(I) {
    let g = this.#I;
    return !I && this.#F === g && (g = this.#G), {
      altText: g,
      decorative: this.#g,
      guessedText: this.#F,
      textWithDisclaimer: this.#G
    };
  }
  get data() {
    return {
      altText: this.#I,
      decorative: this.#g
    };
  }
  set data({
    altText: I,
    decorative: g,
    guessedText: C,
    textWithDisclaimer: A,
    cancel: d = !1
  }) {
    C && (this.#F = C, this.#G = A), !(this.#I === I && this.#g === g) && (d || (this.#I = I, this.#g = g), this.#W());
  }
  toggle(I = !1) {
    this.#C && (!I && this.#l && (clearTimeout(this.#l), this.#l = null), this.#C.disabled = !I);
  }
  shown() {
    this.#s._reportTelemetry({
      action: "pdfjs.image.alt_text.image_status_label_displayed",
      data: {
        label: this.#Z
      }
    });
  }
  destroy() {
    this.#C?.remove(), this.#C = null, this.#A = null, this.#d = null, this.#i?.remove(), this.#i = null;
  }
  async #W() {
    const I = this.#C;
    if (!I)
      return;
    if (this.#c) {
      if (I.classList.toggle("done", !!this.#I), I.setAttribute("data-l10n-id", mC.#V[this.#Z]), this.#A?.setAttribute("data-l10n-id", mC.#V[`${this.#Z}-label`]), !this.#I) {
        this.#d?.remove();
        return;
      }
    } else {
      if (!this.#I && !this.#g) {
        I.classList.remove("done"), this.#d?.remove();
        return;
      }
      I.classList.add("done"), I.setAttribute("data-l10n-id", "pdfjs-editor-alt-text-edit-button");
    }
    let g = this.#d;
    if (!g) {
      this.#d = g = document.createElement("span"), g.className = "tooltip", g.setAttribute("role", "tooltip"), g.id = `alt-text-tooltip-${this.#s.id}`;
      const A = 100, d = this.#s._uiManager._signal;
      d.addEventListener("abort", () => {
        clearTimeout(this.#l), this.#l = null;
      }, {
        once: !0
      }), I.addEventListener("mouseenter", () => {
        this.#l = setTimeout(() => {
          this.#l = null, this.#d.classList.add("show"), this.#s._reportTelemetry({
            action: "alt_text_tooltip"
          });
        }, A);
      }, {
        signal: d
      }), I.addEventListener("mouseleave", () => {
        this.#l && (clearTimeout(this.#l), this.#l = null), this.#d?.classList.remove("show");
      }, {
        signal: d
      });
    }
    this.#g ? g.setAttribute("data-l10n-id", "pdfjs-editor-alt-text-decorative-tooltip") : (g.removeAttribute("data-l10n-id"), g.textContent = this.#I), g.parentNode || I.append(g), this.#s.getImageForAltText()?.setAttribute("aria-describedby", g.id);
  }
}
class Kd {
  #I;
  #g = !1;
  #C = null;
  #A;
  #d;
  #l;
  #B;
  #i;
  #s = null;
  #F;
  #G = null;
  constructor({
    container: I,
    isPinchingDisabled: g = null,
    isPinchingStopped: C = null,
    onPinchStart: A = null,
    onPinching: d = null,
    onPinchEnd: Z = null,
    signal: i
  }) {
    this.#I = I, this.#C = C, this.#A = g, this.#d = A, this.#l = d, this.#B = Z, this.#F = new AbortController(), this.#i = AbortSignal.any([i, this.#F.signal]), I.addEventListener("touchstart", this.#c.bind(this), {
      passive: !1,
      signal: this.#i
    });
  }
  get MIN_TOUCH_DISTANCE_TO_PINCH() {
    return uI(this, "MIN_TOUCH_DISTANCE_TO_PINCH", 35 / (window.devicePixelRatio || 1));
  }
  #c(I) {
    if (this.#A?.() || I.touches.length < 2)
      return;
    if (!this.#G) {
      this.#G = new AbortController();
      const A = AbortSignal.any([this.#i, this.#G.signal]), d = this.#I, Z = {
        signal: A,
        passive: !1
      };
      d.addEventListener("touchmove", this.#V.bind(this), Z), d.addEventListener("touchend", this.#Z.bind(this), Z), d.addEventListener("touchcancel", this.#Z.bind(this), Z), this.#d?.();
    }
    if (Lg(I), I.touches.length !== 2 || this.#C?.()) {
      this.#s = null;
      return;
    }
    let [g, C] = I.touches;
    g.identifier > C.identifier && ([g, C] = [C, g]), this.#s = {
      touch0X: g.screenX,
      touch0Y: g.screenY,
      touch1X: C.screenX,
      touch1Y: C.screenY
    };
  }
  #V(I) {
    if (!this.#s || I.touches.length !== 2)
      return;
    let [g, C] = I.touches;
    g.identifier > C.identifier && ([g, C] = [C, g]);
    const {
      screenX: A,
      screenY: d
    } = g, {
      screenX: Z,
      screenY: i
    } = C, B = this.#s, {
      touch0X: F,
      touch0Y: s,
      touch1X: c,
      touch1Y: G
    } = B, V = c - F, W = G - s, R = Z - A, U = i - d, n = Math.hypot(R, U) || 1, m = Math.hypot(V, W) || 1;
    if (!this.#g && Math.abs(m - n) <= Kd.MIN_TOUCH_DISTANCE_TO_PINCH)
      return;
    if (B.touch0X = A, B.touch0Y = d, B.touch1X = Z, B.touch1Y = i, I.preventDefault(), !this.#g) {
      this.#g = !0;
      return;
    }
    const e = [(A + Z) / 2, (d + i) / 2];
    this.#l?.(e, m, n);
  }
  #Z(I) {
    this.#G.abort(), this.#G = null, this.#B?.(), this.#s && (I.preventDefault(), this.#s = null, this.#g = !1);
  }
  destroy() {
    this.#F?.abort(), this.#F = null;
  }
}
class WI {
  #I = null;
  #g = null;
  #C = null;
  #A = !1;
  #d = null;
  #l = "";
  #B = !1;
  #i = null;
  #s = null;
  #F = null;
  #G = null;
  #c = "";
  #V = !1;
  #Z = null;
  #W = !1;
  #R = !1;
  #b = !1;
  #n = null;
  #o = 0;
  #U = 0;
  #e = null;
  #h = null;
  _editToolbar = null;
  _initialOptions = /* @__PURE__ */ Object.create(null);
  _initialData = null;
  _isVisible = !0;
  _uiManager = null;
  _focusEventsAllowed = !0;
  static _l10n = null;
  static _l10nResizer = null;
  #t = !1;
  #w = WI._zIndex++;
  static _borderLineWidth = -1;
  static _colorManager = new ZZ();
  static _zIndex = 1;
  static _telemetryTimeout = 1e3;
  static get _resizerKeyboardManager() {
    const I = WI.prototype._resizeWithKeyboard, g = OC.TRANSLATE_SMALL, C = OC.TRANSLATE_BIG;
    return uI(this, "_resizerKeyboardManager", new Ml([[["ArrowLeft", "mac+ArrowLeft"], I, {
      args: [-g, 0]
    }], [["ctrl+ArrowLeft", "mac+shift+ArrowLeft"], I, {
      args: [-C, 0]
    }], [["ArrowRight", "mac+ArrowRight"], I, {
      args: [g, 0]
    }], [["ctrl+ArrowRight", "mac+shift+ArrowRight"], I, {
      args: [C, 0]
    }], [["ArrowUp", "mac+ArrowUp"], I, {
      args: [0, -g]
    }], [["ctrl+ArrowUp", "mac+shift+ArrowUp"], I, {
      args: [0, -C]
    }], [["ArrowDown", "mac+ArrowDown"], I, {
      args: [0, g]
    }], [["ctrl+ArrowDown", "mac+shift+ArrowDown"], I, {
      args: [0, C]
    }], [["Escape", "mac+Escape"], WI.prototype._stopResizingWithKeyboard]]));
  }
  constructor(I) {
    this.parent = I.parent, this.id = I.id, this.width = this.height = null, this.pageIndex = I.parent.pageIndex, this.name = I.name, this.div = null, this._uiManager = I.uiManager, this.annotationElementId = null, this._willKeepAspectRatio = !1, this._initialOptions.isCentered = I.isCentered, this._structTreeParentId = null;
    const {
      rotation: g,
      rawDims: {
        pageWidth: C,
        pageHeight: A,
        pageX: d,
        pageY: Z
      }
    } = this.parent.viewport;
    this.rotation = g, this.pageRotation = (360 + g - this._uiManager.viewParameters.rotation) % 360, this.pageDimensions = [C, A], this.pageTranslation = [d, Z];
    const [i, B] = this.parentDimensions;
    this.x = I.x / i, this.y = I.y / B, this.isAttachedToDOM = !1, this.deleted = !1;
  }
  get editorType() {
    return Object.getPrototypeOf(this).constructor._type;
  }
  static get isDrawer() {
    return !1;
  }
  static get _defaultLineColor() {
    return uI(this, "_defaultLineColor", this._colorManager.getHexCode("CanvasText"));
  }
  static deleteAnnotationElement(I) {
    const g = new Es({
      id: I.parent.getNextId(),
      parent: I.parent,
      uiManager: I._uiManager
    });
    g.annotationElementId = I.annotationElementId, g.deleted = !0, g._uiManager.addToAnnotationStorage(g);
  }
  static initialize(I, g) {
    if (WI._l10n ??= I, WI._l10nResizer ||= Object.freeze({
      topLeft: "pdfjs-editor-resizer-top-left",
      topMiddle: "pdfjs-editor-resizer-top-middle",
      topRight: "pdfjs-editor-resizer-top-right",
      middleRight: "pdfjs-editor-resizer-middle-right",
      bottomRight: "pdfjs-editor-resizer-bottom-right",
      bottomMiddle: "pdfjs-editor-resizer-bottom-middle",
      bottomLeft: "pdfjs-editor-resizer-bottom-left",
      middleLeft: "pdfjs-editor-resizer-middle-left"
    }), WI._borderLineWidth !== -1)
      return;
    const C = getComputedStyle(document.documentElement);
    WI._borderLineWidth = parseFloat(C.getPropertyValue("--outline-width")) || 0;
  }
  static updateDefaultParams(I, g) {
  }
  static get defaultPropertiesToUpdate() {
    return [];
  }
  static isHandlingMimeForPasting(I) {
    return !1;
  }
  static paste(I, g) {
    _I("Not implemented");
  }
  get propertiesToUpdate() {
    return [];
  }
  get _isDraggable() {
    return this.#t;
  }
  set _isDraggable(I) {
    this.#t = I, this.div?.classList.toggle("draggable", I);
  }
  get isEnterHandled() {
    return !0;
  }
  center() {
    const [I, g] = this.pageDimensions;
    switch (this.parentRotation) {
      case 90:
        this.x -= this.height * g / (I * 2), this.y += this.width * I / (g * 2);
        break;
      case 180:
        this.x += this.width / 2, this.y += this.height / 2;
        break;
      case 270:
        this.x += this.height * g / (I * 2), this.y -= this.width * I / (g * 2);
        break;
      default:
        this.x -= this.width / 2, this.y -= this.height / 2;
        break;
    }
    this.fixAndSetPosition();
  }
  addCommands(I) {
    this._uiManager.addCommands(I);
  }
  get currentLayer() {
    return this._uiManager.currentLayer;
  }
  setInBackground() {
    this.div.style.zIndex = 0;
  }
  setInForeground() {
    this.div.style.zIndex = this.#w;
  }
  setParent(I) {
    I !== null ? (this.pageIndex = I.pageIndex, this.pageDimensions = I.pageDimensions) : this.#K(), this.parent = I;
  }
  focusin(I) {
    this._focusEventsAllowed && (this.#V ? this.#V = !1 : this.parent.setSelected(this));
  }
  focusout(I) {
    !this._focusEventsAllowed || !this.isAttachedToDOM || I.relatedTarget?.closest(`#${this.id}`) || (I.preventDefault(), this.parent?.isMultipleSelection || this.commitOrRemove());
  }
  commitOrRemove() {
    this.isEmpty() ? this.remove() : this.commit();
  }
  commit() {
    this.addToAnnotationStorage();
  }
  addToAnnotationStorage() {
    this._uiManager.addToAnnotationStorage(this);
  }
  setAt(I, g, C, A) {
    const [d, Z] = this.parentDimensions;
    [C, A] = this.screenToPageTranslation(C, A), this.x = (I + C) / d, this.y = (g + A) / Z, this.fixAndSetPosition();
  }
  #S([I, g], C, A) {
    [C, A] = this.screenToPageTranslation(C, A), this.x += C / I, this.y += A / g, this._onTranslating(this.x, this.y), this.fixAndSetPosition();
  }
  translate(I, g) {
    this.#S(this.parentDimensions, I, g);
  }
  translateInPage(I, g) {
    this.#Z ||= [this.x, this.y, this.width, this.height], this.#S(this.pageDimensions, I, g), this.div.scrollIntoView({
      block: "nearest"
    });
  }
  drag(I, g) {
    this.#Z ||= [this.x, this.y, this.width, this.height];
    const {
      div: C,
      parentDimensions: [A, d]
    } = this;
    if (this.x += I / A, this.y += g / d, this.parent && (this.x < 0 || this.x > 1 || this.y < 0 || this.y > 1)) {
      const {
        x: c,
        y: G
      } = this.div.getBoundingClientRect();
      this.parent.findNewParent(this, c, G) && (this.x -= Math.floor(this.x), this.y -= Math.floor(this.y));
    }
    let {
      x: Z,
      y: i
    } = this;
    const [B, F] = this.getBaseTranslation();
    Z += B, i += F;
    const {
      style: s
    } = C;
    s.left = `${(100 * Z).toFixed(2)}%`, s.top = `${(100 * i).toFixed(2)}%`, this._onTranslating(Z, i), C.scrollIntoView({
      block: "nearest"
    });
  }
  _onTranslating(I, g) {
  }
  _onTranslated(I, g) {
  }
  get _hasBeenMoved() {
    return !!this.#Z && (this.#Z[0] !== this.x || this.#Z[1] !== this.y);
  }
  get _hasBeenResized() {
    return !!this.#Z && (this.#Z[2] !== this.width || this.#Z[3] !== this.height);
  }
  getBaseTranslation() {
    const [I, g] = this.parentDimensions, {
      _borderLineWidth: C
    } = WI, A = C / I, d = C / g;
    switch (this.rotation) {
      case 90:
        return [-A, d];
      case 180:
        return [A, d];
      case 270:
        return [A, -d];
      default:
        return [-A, -d];
    }
  }
  get _mustFixPosition() {
    return !0;
  }
  fixAndSetPosition(I = this.rotation) {
    const {
      div: {
        style: g
      },
      pageDimensions: [C, A]
    } = this;
    let {
      x: d,
      y: Z,
      width: i,
      height: B
    } = this;
    if (i *= C, B *= A, d *= C, Z *= A, this._mustFixPosition)
      switch (I) {
        case 0:
          d = Math.max(0, Math.min(C - i, d)), Z = Math.max(0, Math.min(A - B, Z));
          break;
        case 90:
          d = Math.max(0, Math.min(C - B, d)), Z = Math.min(A, Math.max(i, Z));
          break;
        case 180:
          d = Math.min(C, Math.max(i, d)), Z = Math.min(A, Math.max(B, Z));
          break;
        case 270:
          d = Math.min(C, Math.max(B, d)), Z = Math.max(0, Math.min(A - i, Z));
          break;
      }
    this.x = d /= C, this.y = Z /= A;
    const [F, s] = this.getBaseTranslation();
    d += F, Z += s, g.left = `${(100 * d).toFixed(2)}%`, g.top = `${(100 * Z).toFixed(2)}%`, this.moveInDOM();
  }
  static #m(I, g, C) {
    switch (C) {
      case 90:
        return [g, -I];
      case 180:
        return [-I, -g];
      case 270:
        return [-g, I];
      default:
        return [I, g];
    }
  }
  screenToPageTranslation(I, g) {
    return WI.#m(I, g, this.parentRotation);
  }
  pageTranslationToScreen(I, g) {
    return WI.#m(I, g, 360 - this.parentRotation);
  }
  #Y(I) {
    switch (I) {
      case 90: {
        const [g, C] = this.pageDimensions;
        return [0, -g / C, C / g, 0];
      }
      case 180:
        return [-1, 0, 0, -1];
      case 270: {
        const [g, C] = this.pageDimensions;
        return [0, g / C, -C / g, 0];
      }
      default:
        return [1, 0, 0, 1];
    }
  }
  get parentScale() {
    return this._uiManager.viewParameters.realScale;
  }
  get parentRotation() {
    return (this._uiManager.viewParameters.rotation + this.pageRotation) % 360;
  }
  get parentDimensions() {
    const {
      parentScale: I,
      pageDimensions: [g, C]
    } = this;
    return [g * I, C * I];
  }
  setDims(I, g) {
    const [C, A] = this.parentDimensions, {
      style: d
    } = this.div;
    d.width = `${(100 * I / C).toFixed(2)}%`, this.#B || (d.height = `${(100 * g / A).toFixed(2)}%`);
  }
  fixDims() {
    const {
      style: I
    } = this.div, {
      height: g,
      width: C
    } = I, A = C.endsWith("%"), d = !this.#B && g.endsWith("%");
    if (A && d)
      return;
    const [Z, i] = this.parentDimensions;
    A || (I.width = `${(100 * parseFloat(C) / Z).toFixed(2)}%`), !this.#B && !d && (I.height = `${(100 * parseFloat(g) / i).toFixed(2)}%`);
  }
  getInitialTranslation() {
    return [0, 0];
  }
  #N() {
    if (this.#i)
      return;
    this.#i = document.createElement("div"), this.#i.classList.add("resizers");
    const I = this._willKeepAspectRatio ? ["topLeft", "topRight", "bottomRight", "bottomLeft"] : ["topLeft", "topMiddle", "topRight", "middleRight", "bottomRight", "bottomMiddle", "bottomLeft", "middleLeft"], g = this._uiManager._signal;
    for (const C of I) {
      const A = document.createElement("div");
      this.#i.append(A), A.classList.add("resizer", C), A.setAttribute("data-resizer-name", C), A.addEventListener("pointerdown", this.#D.bind(this, C), {
        signal: g
      }), A.addEventListener("contextmenu", RC, {
        signal: g
      }), A.tabIndex = -1;
    }
    this.div.prepend(this.#i);
  }
  #D(I, g) {
    g.preventDefault();
    const {
      isMac: C
    } = ug.platform;
    if (g.button !== 0 || g.ctrlKey && C)
      return;
    this.#C?.toggle(!1);
    const A = this._isDraggable;
    this._isDraggable = !1, this.#s = [g.screenX, g.screenY];
    const d = new AbortController(), Z = this._uiManager.combinedSignal(d);
    this.parent.togglePointerEvents(!1), window.addEventListener("pointermove", this.#Q.bind(this, I), {
      passive: !0,
      capture: !0,
      signal: Z
    }), window.addEventListener("touchmove", Lg, {
      passive: !1,
      signal: Z
    }), window.addEventListener("contextmenu", RC, {
      signal: Z
    }), this.#F = {
      savedX: this.x,
      savedY: this.y,
      savedWidth: this.width,
      savedHeight: this.height
    };
    const i = this.parent.div.style.cursor, B = this.div.style.cursor;
    this.div.style.cursor = this.parent.div.style.cursor = window.getComputedStyle(g.target).cursor;
    const F = () => {
      d.abort(), this.parent.togglePointerEvents(!0), this.#C?.toggle(!0), this._isDraggable = A, this.parent.div.style.cursor = i, this.div.style.cursor = B, this.#H();
    };
    window.addEventListener("pointerup", F, {
      signal: Z
    }), window.addEventListener("blur", F, {
      signal: Z
    });
  }
  #y(I, g, C, A) {
    this.width = C, this.height = A, this.x = I, this.y = g;
    const [d, Z] = this.parentDimensions;
    this.setDims(d * C, Z * A), this.fixAndSetPosition(), this._onResized();
  }
  _onResized() {
  }
  #H() {
    if (!this.#F)
      return;
    const {
      savedX: I,
      savedY: g,
      savedWidth: C,
      savedHeight: A
    } = this.#F;
    this.#F = null;
    const d = this.x, Z = this.y, i = this.width, B = this.height;
    d === I && Z === g && i === C && B === A || this.addCommands({
      cmd: this.#y.bind(this, d, Z, i, B),
      undo: this.#y.bind(this, I, g, C, A),
      mustExec: !0
    });
  }
  static _round(I) {
    return Math.round(I * 1e4) / 1e4;
  }
  #Q(I, g) {
    const [C, A] = this.parentDimensions, d = this.x, Z = this.y, i = this.width, B = this.height, F = WI.MIN_SIZE / C, s = WI.MIN_SIZE / A, c = this.#Y(this.rotation), G = (p, T) => [c[0] * p + c[2] * T, c[1] * p + c[3] * T], V = this.#Y(360 - this.rotation), W = (p, T) => [V[0] * p + V[2] * T, V[1] * p + V[3] * T];
    let R, U, n = !1, m = !1;
    switch (I) {
      case "topLeft":
        n = !0, R = (p, T) => [0, 0], U = (p, T) => [p, T];
        break;
      case "topMiddle":
        R = (p, T) => [p / 2, 0], U = (p, T) => [p / 2, T];
        break;
      case "topRight":
        n = !0, R = (p, T) => [p, 0], U = (p, T) => [0, T];
        break;
      case "middleRight":
        m = !0, R = (p, T) => [p, T / 2], U = (p, T) => [0, T / 2];
        break;
      case "bottomRight":
        n = !0, R = (p, T) => [p, T], U = (p, T) => [0, 0];
        break;
      case "bottomMiddle":
        R = (p, T) => [p / 2, T], U = (p, T) => [p / 2, 0];
        break;
      case "bottomLeft":
        n = !0, R = (p, T) => [0, T], U = (p, T) => [p, 0];
        break;
      case "middleLeft":
        m = !0, R = (p, T) => [0, T / 2], U = (p, T) => [p, T / 2];
        break;
    }
    const e = R(i, B), N = U(i, B);
    let w = G(...N);
    const S = WI._round(d + w[0]), Y = WI._round(Z + w[1]);
    let M = 1, y = 1, r, z;
    if (g.fromKeyboard)
      ({
        deltaX: r,
        deltaY: z
      } = g);
    else {
      const {
        screenX: p,
        screenY: T
      } = g, [UI, sI] = this.#s;
      [r, z] = this.screenToPageTranslation(p - UI, T - sI), this.#s[0] = p, this.#s[1] = T;
    }
    if ([r, z] = W(r / C, z / A), n) {
      const p = Math.hypot(i, B);
      M = y = Math.max(Math.min(Math.hypot(N[0] - e[0] - r, N[1] - e[1] - z) / p, 1 / i, 1 / B), F / i, s / B);
    } else m ? M = Math.max(F, Math.min(1, Math.abs(N[0] - e[0] - r))) / i : y = Math.max(s, Math.min(1, Math.abs(N[1] - e[1] - z))) / B;
    const E = WI._round(i * M), X = WI._round(B * y);
    w = G(...U(E, X));
    const O = S - w[0], _ = Y - w[1];
    this.#Z ||= [this.x, this.y, this.width, this.height], this.width = E, this.height = X, this.x = O, this.y = _, this.setDims(C * E, A * X), this.fixAndSetPosition(), this._onResizing();
  }
  _onResizing() {
  }
  altTextFinish() {
    this.#C?.finish();
  }
  async addEditToolbar() {
    return this._editToolbar || this.#R ? this._editToolbar : (this._editToolbar = new Wl(this), this.div.append(this._editToolbar.render()), this.#C && await this._editToolbar.addAltText(this.#C), this._editToolbar);
  }
  removeEditToolbar() {
    this._editToolbar && (this._editToolbar.remove(), this._editToolbar = null, this.#C?.destroy());
  }
  addContainer(I) {
    const g = this._editToolbar?.div;
    g ? g.before(I) : this.div.append(I);
  }
  getClientDimensions() {
    return this.div.getBoundingClientRect();
  }
  async addAltTextButton() {
    this.#C || (mC.initialize(WI._l10n), this.#C = new mC(this), this.#I && (this.#C.data = this.#I, this.#I = null), await this.addEditToolbar());
  }
  get altTextData() {
    return this.#C?.data;
  }
  set altTextData(I) {
    this.#C && (this.#C.data = I);
  }
  get guessedAltText() {
    return this.#C?.guessedText;
  }
  async setGuessedAltText(I) {
    await this.#C?.setGuessedText(I);
  }
  serializeAltText(I) {
    return this.#C?.serialize(I);
  }
  hasAltText() {
    return !!this.#C && !this.#C.isEmpty();
  }
  hasAltTextData() {
    return this.#C?.hasData() ?? !1;
  }
  render() {
    this.div = document.createElement("div"), this.div.setAttribute("data-editor-rotation", (360 - this.rotation) % 360), this.div.className = this.name, this.div.setAttribute("id", this.id), this.div.tabIndex = this.#A ? -1 : 0, this._isVisible || this.div.classList.add("hidden"), this.setInForeground(), this.#p();
    const [I, g] = this.parentDimensions;
    this.parentRotation % 180 !== 0 && (this.div.style.maxWidth = `${(100 * g / I).toFixed(2)}%`, this.div.style.maxHeight = `${(100 * I / g).toFixed(2)}%`);
    const [C, A] = this.getInitialTranslation();
    return this.translate(C, A), Rd(this, this.div, ["pointerdown"]), this.isResizable && this._uiManager._supportsPinchToZoom && (this.#h ||= new Kd({
      container: this.div,
      isPinchingDisabled: () => !this.isSelected,
      onPinchStart: this.#a.bind(this),
      onPinching: this.#M.bind(this),
      onPinchEnd: this.#z.bind(this),
      signal: this._uiManager._signal
    })), this._uiManager._editorUndoBar?.hide(), this.div;
  }
  #a() {
    this.#F = {
      savedX: this.x,
      savedY: this.y,
      savedWidth: this.width,
      savedHeight: this.height
    }, this.#C?.toggle(!1), this.parent.togglePointerEvents(!1);
  }
  #M(I, g, C) {
    let d = 0.7 * (C / g) + 1 - 0.7;
    if (d === 1)
      return;
    const Z = this.#Y(this.rotation), i = (S, Y) => [Z[0] * S + Z[2] * Y, Z[1] * S + Z[3] * Y], [B, F] = this.parentDimensions, s = this.x, c = this.y, G = this.width, V = this.height, W = WI.MIN_SIZE / B, R = WI.MIN_SIZE / F;
    d = Math.max(Math.min(d, 1 / G, 1 / V), W / G, R / V);
    const U = WI._round(G * d), n = WI._round(V * d);
    if (U === G && n === V)
      return;
    this.#Z ||= [s, c, G, V];
    const m = i(G / 2, V / 2), e = WI._round(s + m[0]), N = WI._round(c + m[1]), w = i(U / 2, n / 2);
    this.x = e - w[0], this.y = N - w[1], this.width = U, this.height = n, this.setDims(B * U, F * n), this.fixAndSetPosition(), this._onResizing();
  }
  #z() {
    this.#C?.toggle(!0), this.parent.togglePointerEvents(!0), this.#H();
  }
  pointerdown(I) {
    const {
      isMac: g
    } = ug.platform;
    if (I.button !== 0 || I.ctrlKey && g) {
      I.preventDefault();
      return;
    }
    if (this.#V = !0, this._isDraggable) {
      this.#L(I);
      return;
    }
    this.#T(I);
  }
  get isSelected() {
    return this._uiManager.isSelected(this);
  }
  #T(I) {
    const {
      isMac: g
    } = ug.platform;
    I.ctrlKey && !g || I.shiftKey || I.metaKey && g ? this.parent.toggleSelected(this) : this.parent.setSelected(this);
  }
  #L(I) {
    const {
      isSelected: g
    } = this;
    this._uiManager.setUpDragSession();
    let C = !1;
    const A = new AbortController(), d = this._uiManager.combinedSignal(A), Z = {
      capture: !0,
      passive: !1,
      signal: d
    }, i = (F) => {
      A.abort(), this.#d = null, this.#V = !1, this._uiManager.endDragSession() || this.#T(F), C && this._onStopDragging();
    };
    g && (this.#o = I.clientX, this.#U = I.clientY, this.#d = I.pointerId, this.#l = I.pointerType, window.addEventListener("pointermove", (F) => {
      C || (C = !0, this._onStartDragging());
      const {
        clientX: s,
        clientY: c,
        pointerId: G
      } = F;
      if (G !== this.#d) {
        Lg(F);
        return;
      }
      const [V, W] = this.screenToPageTranslation(s - this.#o, c - this.#U);
      this.#o = s, this.#U = c, this._uiManager.dragSelectedEditors(V, W);
    }, Z), window.addEventListener("touchmove", Lg, Z), window.addEventListener("pointerdown", (F) => {
      F.pointerType === this.#l && (this.#h || F.isPrimary) && i(F), Lg(F);
    }, Z));
    const B = (F) => {
      if (!this.#d || this.#d === F.pointerId) {
        i(F);
        return;
      }
      Lg(F);
    };
    window.addEventListener("pointerup", B, {
      signal: d
    }), window.addEventListener("blur", B, {
      signal: d
    });
  }
  _onStartDragging() {
  }
  _onStopDragging() {
  }
  moveInDOM() {
    this.#n && clearTimeout(this.#n), this.#n = setTimeout(() => {
      this.#n = null, this.parent?.moveEditorInDOM(this);
    }, 0);
  }
  _setParentAndPosition(I, g, C) {
    I.changeParent(this), this.x = g, this.y = C, this.fixAndSetPosition(), this._onTranslated();
  }
  getRect(I, g, C = this.rotation) {
    const A = this.parentScale, [d, Z] = this.pageDimensions, [i, B] = this.pageTranslation, F = I / A, s = g / A, c = this.x * d, G = this.y * Z, V = this.width * d, W = this.height * Z;
    switch (C) {
      case 0:
        return [c + F + i, Z - G - s - W + B, c + F + V + i, Z - G - s + B];
      case 90:
        return [c + s + i, Z - G + F + B, c + s + W + i, Z - G + F + V + B];
      case 180:
        return [c - F - V + i, Z - G + s + B, c - F + i, Z - G + s + W + B];
      case 270:
        return [c - s - W + i, Z - G - F - V + B, c - s + i, Z - G - F + B];
      default:
        throw new Error("Invalid rotation");
    }
  }
  getRectInCurrentCoords(I, g) {
    const [C, A, d, Z] = I, i = d - C, B = Z - A;
    switch (this.rotation) {
      case 0:
        return [C, g - Z, i, B];
      case 90:
        return [C, g - A, B, i];
      case 180:
        return [d, g - A, i, B];
      case 270:
        return [d, g - Z, B, i];
      default:
        throw new Error("Invalid rotation");
    }
  }
  onceAdded(I) {
  }
  isEmpty() {
    return !1;
  }
  enableEditMode() {
    this.#R = !0;
  }
  disableEditMode() {
    this.#R = !1;
  }
  isInEditMode() {
    return this.#R;
  }
  shouldGetKeyboardEvents() {
    return this.#b;
  }
  needsToBeRebuilt() {
    return this.div && !this.isAttachedToDOM;
  }
  get isOnScreen() {
    const {
      top: I,
      left: g,
      bottom: C,
      right: A
    } = this.getClientDimensions(), {
      innerHeight: d,
      innerWidth: Z
    } = window;
    return g < Z && A > 0 && I < d && C > 0;
  }
  #p() {
    if (this.#G || !this.div)
      return;
    this.#G = new AbortController();
    const I = this._uiManager.combinedSignal(this.#G);
    this.div.addEventListener("focusin", this.focusin.bind(this), {
      signal: I
    }), this.div.addEventListener("focusout", this.focusout.bind(this), {
      signal: I
    });
  }
  rebuild() {
    this.#p();
  }
  rotate(I) {
  }
  resize() {
  }
  serializeDeleted() {
    return {
      id: this.annotationElementId,
      deleted: !0,
      pageIndex: this.pageIndex,
      popupRef: this._initialData?.popupRef || ""
    };
  }
  serialize(I = !1, g = null) {
    _I("An editor must be serializable");
  }
  static async deserialize(I, g, C) {
    const A = new this.prototype.constructor({
      parent: g,
      id: g.getNextId(),
      uiManager: C
    });
    A.rotation = I.rotation, A.#I = I.accessibilityData;
    const [d, Z] = A.pageDimensions, [i, B, F, s] = A.getRectInCurrentCoords(I.rect, Z);
    return A.x = i / d, A.y = B / Z, A.width = F / d, A.height = s / Z, A;
  }
  get hasBeenModified() {
    return !!this.annotationElementId && (this.deleted || this.serialize() !== null);
  }
  remove() {
    if (this.#G?.abort(), this.#G = null, this.isEmpty() || this.commit(), this.parent ? this.parent.remove(this) : this._uiManager.removeEditor(this), this.#n && (clearTimeout(this.#n), this.#n = null), this.#K(), this.removeEditToolbar(), this.#e) {
      for (const I of this.#e.values())
        clearTimeout(I);
      this.#e = null;
    }
    this.parent = null, this.#h?.destroy(), this.#h = null;
  }
  get isResizable() {
    return !1;
  }
  makeResizable() {
    this.isResizable && (this.#N(), this.#i.classList.remove("hidden"), Rd(this, this.div, ["keydown"]));
  }
  get toolbarPosition() {
    return null;
  }
  keydown(I) {
    if (!this.isResizable || I.target !== this.div || I.key !== "Enter")
      return;
    this._uiManager.setSelected(this), this.#F = {
      savedX: this.x,
      savedY: this.y,
      savedWidth: this.width,
      savedHeight: this.height
    };
    const g = this.#i.children;
    if (!this.#g) {
      this.#g = Array.from(g);
      const Z = this.#X.bind(this), i = this.#k.bind(this), B = this._uiManager._signal;
      for (const F of this.#g) {
        const s = F.getAttribute("data-resizer-name");
        F.setAttribute("role", "spinbutton"), F.addEventListener("keydown", Z, {
          signal: B
        }), F.addEventListener("blur", i, {
          signal: B
        }), F.addEventListener("focus", this.#E.bind(this, s), {
          signal: B
        }), F.setAttribute("data-l10n-id", WI._l10nResizer[s]);
      }
    }
    const C = this.#g[0];
    let A = 0;
    for (const Z of g) {
      if (Z === C)
        break;
      A++;
    }
    const d = (360 - this.rotation + this.parentRotation) % 360 / 90 * (this.#g.length / 4);
    if (d !== A) {
      if (d < A)
        for (let i = 0; i < A - d; i++)
          this.#i.append(this.#i.firstChild);
      else if (d > A)
        for (let i = 0; i < d - A; i++)
          this.#i.firstChild.before(this.#i.lastChild);
      let Z = 0;
      for (const i of g) {
        const F = this.#g[Z++].getAttribute("data-resizer-name");
        i.setAttribute("data-l10n-id", WI._l10nResizer[F]);
      }
    }
    this.#u(0), this.#b = !0, this.#i.firstChild.focus({
      focusVisible: !0
    }), I.preventDefault(), I.stopImmediatePropagation();
  }
  #X(I) {
    WI._resizerKeyboardManager.exec(this, I);
  }
  #k(I) {
    this.#b && I.relatedTarget?.parentNode !== this.#i && this.#K();
  }
  #E(I) {
    this.#c = this.#b ? I : "";
  }
  #u(I) {
    if (this.#g)
      for (const g of this.#g)
        g.tabIndex = I;
  }
  _resizeWithKeyboard(I, g) {
    this.#b && this.#Q(this.#c, {
      deltaX: I,
      deltaY: g,
      fromKeyboard: !0
    });
  }
  #K() {
    this.#b = !1, this.#u(-1), this.#H();
  }
  _stopResizingWithKeyboard() {
    this.#K(), this.div.focus();
  }
  select() {
    if (this.makeResizable(), this.div?.classList.add("selectedEditor"), !this._editToolbar) {
      this.addEditToolbar().then(() => {
        this.div?.classList.contains("selectedEditor") && this._editToolbar?.show();
      });
      return;
    }
    this._editToolbar?.show(), this.#C?.toggleAltTextBadge(!1);
  }
  unselect() {
    this.#i?.classList.add("hidden"), this.div?.classList.remove("selectedEditor"), this.div?.contains(document.activeElement) && this._uiManager.currentLayer.div.focus({
      preventScroll: !0
    }), this._editToolbar?.hide(), this.#C?.toggleAltTextBadge(!0);
  }
  updateParams(I, g) {
  }
  disableEditing() {
  }
  enableEditing() {
  }
  enterInEditMode() {
  }
  getImageForAltText() {
    return null;
  }
  get contentDiv() {
    return this.div;
  }
  get isEditing() {
    return this.#W;
  }
  set isEditing(I) {
    this.#W = I, this.parent && (I ? (this.parent.setSelected(this), this.parent.setActiveEditor(this)) : this.parent.setActiveEditor(null));
  }
  setAspectRatio(I, g) {
    this.#B = !0;
    const C = I / g, {
      style: A
    } = this.div;
    A.aspectRatio = C, A.height = "auto";
  }
  static get MIN_SIZE() {
    return 16;
  }
  static canCreateNewEmptyEditor() {
    return !0;
  }
  get telemetryInitialData() {
    return {
      action: "added"
    };
  }
  get telemetryFinalData() {
    return null;
  }
  _reportTelemetry(I, g = !1) {
    if (g) {
      this.#e ||= /* @__PURE__ */ new Map();
      const {
        action: C
      } = I;
      let A = this.#e.get(C);
      A && clearTimeout(A), A = setTimeout(() => {
        this._reportTelemetry(I), this.#e.delete(C), this.#e.size === 0 && (this.#e = null);
      }, WI._telemetryTimeout), this.#e.set(C, A);
      return;
    }
    I.type ||= this.editorType, this._uiManager._eventBus.dispatch("reporttelemetry", {
      source: this,
      details: {
        type: "editing",
        data: I
      }
    });
  }
  show(I = this._isVisible) {
    this.div.classList.toggle("hidden", !I), this._isVisible = I;
  }
  enable() {
    this.div && (this.div.tabIndex = 0), this.#A = !1;
  }
  disable() {
    this.div && (this.div.tabIndex = -1), this.#A = !0;
  }
  renderAnnotationElement(I) {
    let g = I.container.querySelector(".annotationContent");
    if (!g)
      g = document.createElement("div"), g.classList.add("annotationContent", this.editorType), I.container.prepend(g);
    else if (g.nodeName === "CANVAS") {
      const C = g;
      g = document.createElement("div"), g.classList.add("annotationContent", this.editorType), C.before(g);
    }
    return g;
  }
  resetAnnotationElement(I) {
    const {
      firstChild: g
    } = I.container;
    g?.nodeName === "DIV" && g.classList.contains("annotationContent") && g.remove();
  }
}
class Es extends WI {
  constructor(I) {
    super(I), this.annotationElementId = I.annotationElementId, this.deleted = !0;
  }
  serialize() {
    return this.serializeDeleted();
  }
}
const $Z = 3285377520, $g = 4294901760, oC = 65535;
class RB {
  constructor(I) {
    this.h1 = I ? I & 4294967295 : $Z, this.h2 = I ? I & 4294967295 : $Z;
  }
  update(I) {
    let g, C;
    if (typeof I == "string") {
      g = new Uint8Array(I.length * 2), C = 0;
      for (let R = 0, U = I.length; R < U; R++) {
        const n = I.charCodeAt(R);
        n <= 255 ? g[C++] = n : (g[C++] = n >>> 8, g[C++] = n & 255);
      }
    } else if (ArrayBuffer.isView(I))
      g = I.slice(), C = g.byteLength;
    else
      throw new Error("Invalid data format, must be a string or TypedArray.");
    const A = C >> 2, d = C - A * 4, Z = new Uint32Array(g.buffer, 0, A);
    let i = 0, B = 0, F = this.h1, s = this.h2;
    const c = 3432918353, G = 461845907, V = c & oC, W = G & oC;
    for (let R = 0; R < A; R++)
      R & 1 ? (i = Z[R], i = i * c & $g | i * V & oC, i = i << 15 | i >>> 17, i = i * G & $g | i * W & oC, F ^= i, F = F << 13 | F >>> 19, F = F * 5 + 3864292196) : (B = Z[R], B = B * c & $g | B * V & oC, B = B << 15 | B >>> 17, B = B * G & $g | B * W & oC, s ^= B, s = s << 13 | s >>> 19, s = s * 5 + 3864292196);
    switch (i = 0, d) {
      case 3:
        i ^= g[A * 4 + 2] << 16;
      case 2:
        i ^= g[A * 4 + 1] << 8;
      case 1:
        i ^= g[A * 4], i = i * c & $g | i * V & oC, i = i << 15 | i >>> 17, i = i * G & $g | i * W & oC, A & 1 ? F ^= i : s ^= i;
    }
    this.h1 = F, this.h2 = s;
  }
  hexdigest() {
    let I = this.h1, g = this.h2;
    return I ^= g >>> 1, I = I * 3981806797 & $g | I * 36045 & oC, g = g * 4283543511 & $g | ((g << 16 | I >>> 16) * 2950163797 & $g) >>> 16, I ^= g >>> 1, I = I * 444984403 & $g | I * 60499 & oC, g = g * 3301882366 & $g | ((g << 16 | I >>> 16) * 3120437893 & $g) >>> 16, I ^= g >>> 1, (I >>> 0).toString(16).padStart(8, "0") + (g >>> 0).toString(16).padStart(8, "0");
  }
}
const u0 = Object.freeze({
  map: null,
  hash: "",
  transfer: void 0
});
class iZ {
  #I = !1;
  #g = null;
  #C = /* @__PURE__ */ new Map();
  constructor() {
    this.onSetModified = null, this.onResetModified = null, this.onAnnotationEditor = null;
  }
  getValue(I, g) {
    const C = this.#C.get(I);
    return C === void 0 ? g : Object.assign(g, C);
  }
  getRawValue(I) {
    return this.#C.get(I);
  }
  remove(I) {
    if (this.#C.delete(I), this.#C.size === 0 && this.resetModified(), typeof this.onAnnotationEditor == "function") {
      for (const g of this.#C.values())
        if (g instanceof WI)
          return;
      this.onAnnotationEditor(null);
    }
  }
  setValue(I, g) {
    const C = this.#C.get(I);
    let A = !1;
    if (C !== void 0)
      for (const [d, Z] of Object.entries(g))
        C[d] !== Z && (A = !0, C[d] = Z);
    else
      A = !0, this.#C.set(I, g);
    A && this.#A(), g instanceof WI && typeof this.onAnnotationEditor == "function" && this.onAnnotationEditor(g.constructor._type);
  }
  has(I) {
    return this.#C.has(I);
  }
  getAll() {
    return this.#C.size > 0 ? IZ(this.#C) : null;
  }
  setAll(I) {
    for (const [g, C] of Object.entries(I))
      this.setValue(g, C);
  }
  get size() {
    return this.#C.size;
  }
  #A() {
    this.#I || (this.#I = !0, typeof this.onSetModified == "function" && this.onSetModified());
  }
  resetModified() {
    this.#I && (this.#I = !1, typeof this.onResetModified == "function" && this.onResetModified());
  }
  get print() {
    return new nB(this);
  }
  get serializable() {
    if (this.#C.size === 0)
      return u0;
    const I = /* @__PURE__ */ new Map(), g = new RB(), C = [], A = /* @__PURE__ */ Object.create(null);
    let d = !1;
    for (const [Z, i] of this.#C) {
      const B = i instanceof WI ? i.serialize(!1, A) : i;
      B && (I.set(Z, B), g.update(`${Z}:${JSON.stringify(B)}`), d ||= !!B.bitmap);
    }
    if (d)
      for (const Z of I.values())
        Z.bitmap && C.push(Z.bitmap);
    return I.size > 0 ? {
      map: I,
      hash: g.hexdigest(),
      transfer: C
    } : u0;
  }
  get editorStats() {
    let I = null;
    const g = /* @__PURE__ */ new Map();
    for (const C of this.#C.values()) {
      if (!(C instanceof WI))
        continue;
      const A = C.telemetryFinalData;
      if (!A)
        continue;
      const {
        type: d
      } = A;
      g.has(d) || g.set(d, Object.getPrototypeOf(C).constructor), I ||= /* @__PURE__ */ Object.create(null);
      const Z = I[d] ||= /* @__PURE__ */ new Map();
      for (const [i, B] of Object.entries(A)) {
        if (i === "type")
          continue;
        let F = Z.get(i);
        F || (F = /* @__PURE__ */ new Map(), Z.set(i, F));
        const s = F.get(B) ?? 0;
        F.set(B, s + 1);
      }
    }
    for (const [C, A] of g)
      I[C] = A.computeTelemetryFinalData(I[C]);
    return I;
  }
  resetModifiedIds() {
    this.#g = null;
  }
  get modifiedIds() {
    if (this.#g)
      return this.#g;
    const I = [];
    for (const g of this.#C.values())
      !(g instanceof WI) || !g.annotationElementId || !g.serialize() || I.push(g.annotationElementId);
    return this.#g = {
      ids: new Set(I),
      hash: I.join(",")
    };
  }
}
class nB extends iZ {
  #I;
  constructor(I) {
    super();
    const {
      map: g,
      hash: C,
      transfer: A
    } = I.serializable, d = structuredClone(g, A ? {
      transfer: A
    } : null);
    this.#I = {
      map: d,
      hash: C,
      transfer: A
    };
  }
  get print() {
    _I("Should not call PrintAnnotationStorage.print");
  }
  get serializable() {
    return this.#I;
  }
  get modifiedIds() {
    return uI(this, "modifiedIds", {
      ids: /* @__PURE__ */ new Set(),
      hash: ""
    });
  }
}
class js {
  #I = /* @__PURE__ */ new Set();
  constructor({
    ownerDocument: I = globalThis.document,
    styleElement: g = null
  }) {
    this._document = I, this.nativeFontFaces = /* @__PURE__ */ new Set(), this.styleElement = null, this.loadingRequests = [], this.loadTestFontId = 0;
  }
  addNativeFontFace(I) {
    this.nativeFontFaces.add(I), this._document.fonts.add(I);
  }
  removeNativeFontFace(I) {
    this.nativeFontFaces.delete(I), this._document.fonts.delete(I);
  }
  insertRule(I) {
    this.styleElement || (this.styleElement = this._document.createElement("style"), this._document.documentElement.getElementsByTagName("head")[0].append(this.styleElement));
    const g = this.styleElement.sheet;
    g.insertRule(I, g.cssRules.length);
  }
  clear() {
    for (const I of this.nativeFontFaces)
      this._document.fonts.delete(I);
    this.nativeFontFaces.clear(), this.#I.clear(), this.styleElement && (this.styleElement.remove(), this.styleElement = null);
  }
  async loadSystemFont({
    systemFontInfo: I,
    _inspectFont: g
  }) {
    if (!(!I || this.#I.has(I.loadedName))) {
      if (Fg(!this.disableFontFace, "loadSystemFont shouldn't be called when `disableFontFace` is set."), this.isFontLoadingAPISupported) {
        const {
          loadedName: C,
          src: A,
          style: d
        } = I, Z = new FontFace(C, A, d);
        this.addNativeFontFace(Z);
        try {
          await Z.load(), this.#I.add(C), g?.(I);
        } catch {
          DI(`Cannot load system font: ${I.baseFontName}, installing it could help to improve PDF rendering.`), this.removeNativeFontFace(Z);
        }
        return;
      }
      _I("Not implemented: loadSystemFont without the Font Loading API.");
    }
  }
  async bind(I) {
    if (I.attached || I.missingFile && !I.systemFontInfo)
      return;
    if (I.attached = !0, I.systemFontInfo) {
      await this.loadSystemFont(I);
      return;
    }
    if (this.isFontLoadingAPISupported) {
      const C = I.createNativeFontFace();
      if (C) {
        this.addNativeFontFace(C);
        try {
          await C.loaded;
        } catch (A) {
          throw DI(`Failed to load font '${C.family}': '${A}'.`), I.disableFontFace = !0, A;
        }
      }
      return;
    }
    const g = I.createFontFaceRule();
    if (g) {
      if (this.insertRule(g), this.isSyncFontLoadingSupported)
        return;
      await new Promise((C) => {
        const A = this._queueLoadingCallback(C);
        this._prepareFontLoadEvent(I, A);
      });
    }
  }
  get isFontLoadingAPISupported() {
    const I = !!this._document?.fonts;
    return uI(this, "isFontLoadingAPISupported", I);
  }
  get isSyncFontLoadingSupported() {
    let I = !1;
    return (Yg || typeof navigator < "u" && typeof navigator?.userAgent == "string" && /Mozilla\/5.0.*?rv:\d+.*? Gecko/.test(navigator.userAgent)) && (I = !0), uI(this, "isSyncFontLoadingSupported", I);
  }
  _queueLoadingCallback(I) {
    function g() {
      for (Fg(!A.done, "completeRequest() cannot be called twice."), A.done = !0; C.length > 0 && C[0].done; ) {
        const d = C.shift();
        setTimeout(d.callback, 0);
      }
    }
    const {
      loadingRequests: C
    } = this, A = {
      done: !1,
      complete: g,
      callback: I
    };
    return C.push(A), A;
  }
  get _loadTestFont() {
    const I = atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==");
    return uI(this, "_loadTestFont", I);
  }
  _prepareFontLoadEvent(I, g) {
    function C(N, w) {
      return N.charCodeAt(w) << 24 | N.charCodeAt(w + 1) << 16 | N.charCodeAt(w + 2) << 8 | N.charCodeAt(w + 3) & 255;
    }
    function A(N, w, S, Y) {
      const M = N.substring(0, w), y = N.substring(w + S);
      return M + Y + y;
    }
    let d, Z;
    const i = this._document.createElement("canvas");
    i.width = 1, i.height = 1;
    const B = i.getContext("2d");
    let F = 0;
    function s(N, w) {
      if (++F > 30) {
        DI("Load test font never loaded."), w();
        return;
      }
      if (B.font = "30px " + N, B.fillText(".", 0, 20), B.getImageData(0, 0, 1, 1).data[3] > 0) {
        w();
        return;
      }
      setTimeout(s.bind(null, N, w));
    }
    const c = `lt${Date.now()}${this.loadTestFontId++}`;
    let G = this._loadTestFont;
    G = A(G, 976, c.length, c);
    const W = 16, R = 1482184792;
    let U = C(G, W);
    for (d = 0, Z = c.length - 3; d < Z; d += 4)
      U = U - R + C(c, d) | 0;
    d < c.length && (U = U - R + C(c + "XXX", d) | 0), G = A(G, W, 4, Js(U));
    const n = `url(data:font/opentype;base64,${btoa(G)});`, m = `@font-face {font-family:"${c}";src:${n}}`;
    this.insertRule(m);
    const e = this._document.createElement("div");
    e.style.visibility = "hidden", e.style.width = e.style.height = "10px", e.style.position = "absolute", e.style.top = e.style.left = "0px";
    for (const N of [I.loadedName, c]) {
      const w = this._document.createElement("span");
      w.textContent = "Hi", w.style.fontFamily = N, e.append(w);
    }
    this._document.body.append(e), s(c, () => {
      e.remove(), g.complete();
    });
  }
}
class vs {
  constructor(I, {
    disableFontFace: g = !1,
    fontExtraProperties: C = !1,
    inspectFont: A = null
  }) {
    this.compiledGlyphs = /* @__PURE__ */ Object.create(null);
    for (const d in I)
      this[d] = I[d];
    this.disableFontFace = g === !0, this.fontExtraProperties = C === !0, this._inspectFont = A;
  }
  createNativeFontFace() {
    if (!this.data || this.disableFontFace)
      return null;
    let I;
    if (!this.cssFontInfo)
      I = new FontFace(this.loadedName, this.data, {});
    else {
      const g = {
        weight: this.cssFontInfo.fontWeight
      };
      this.cssFontInfo.italicAngle && (g.style = `oblique ${this.cssFontInfo.italicAngle}deg`), I = new FontFace(this.cssFontInfo.fontFamily, this.data, g);
    }
    return this._inspectFont?.(this), I;
  }
  createFontFaceRule() {
    if (!this.data || this.disableFontFace)
      return null;
    const I = `url(data:${this.mimetype};base64,${Hs(this.data)});`;
    let g;
    if (!this.cssFontInfo)
      g = `@font-face {font-family:"${this.loadedName}";src:${I}}`;
    else {
      let C = `font-weight: ${this.cssFontInfo.fontWeight};`;
      this.cssFontInfo.italicAngle && (C += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`), g = `@font-face {font-family:"${this.cssFontInfo.fontFamily}";${C}src:${I}}`;
    }
    return this._inspectFont?.(this, I), g;
  }
  getPathGenerator(I, g) {
    if (this.compiledGlyphs[g] !== void 0)
      return this.compiledGlyphs[g];
    const C = this.loadedName + "_path_" + g;
    let A;
    try {
      A = I.get(C);
    } catch (Z) {
      DI(`getPathGenerator - ignoring character: "${Z}".`);
    }
    const d = new Path2D(A || "");
    return this.fontExtraProperties || I.delete(C), this.compiledGlyphs[g] = d;
  }
}
const El = {
  DATA: 1,
  ERROR: 2
}, ig = {
  CANCEL: 1,
  CANCEL_COMPLETE: 2,
  CLOSE: 3,
  ENQUEUE: 4,
  ERROR: 5,
  PULL: 6,
  PULL_COMPLETE: 7,
  START_COMPLETE: 8
};
function Ii() {
}
function kg(l) {
  if (l instanceof xC || l instanceof J0 || l instanceof Ql || l instanceof PZ || l instanceof bd || l instanceof B0)
    return l;
  switch (l instanceof Error || typeof l == "object" && l !== null || _I('wrapReason: Expected "reason" to be a (possibly cloned) Error.'), l.name) {
    case "AbortException":
      return new xC(l.message);
    case "InvalidPDFException":
      return new J0(l.message);
    case "MissingPDFException":
      return new Ql(l.message);
    case "PasswordException":
      return new PZ(l.message, l.code);
    case "UnexpectedResponseException":
      return new bd(l.message, l.status);
    case "UnknownErrorException":
      return new B0(l.message, l.details);
  }
  return new B0(l.message, l.toString());
}
class ll {
  #I = new AbortController();
  constructor(I, g, C) {
    this.sourceName = I, this.targetName = g, this.comObj = C, this.callbackId = 1, this.streamId = 1, this.streamSinks = /* @__PURE__ */ Object.create(null), this.streamControllers = /* @__PURE__ */ Object.create(null), this.callbackCapabilities = /* @__PURE__ */ Object.create(null), this.actionHandler = /* @__PURE__ */ Object.create(null), C.addEventListener("message", this.#g.bind(this), {
      signal: this.#I.signal
    });
  }
  #g({
    data: I
  }) {
    if (I.targetName !== this.sourceName)
      return;
    if (I.stream) {
      this.#A(I);
      return;
    }
    if (I.callback) {
      const C = I.callbackId, A = this.callbackCapabilities[C];
      if (!A)
        throw new Error(`Cannot resolve callback ${C}`);
      if (delete this.callbackCapabilities[C], I.callback === El.DATA)
        A.resolve(I.data);
      else if (I.callback === El.ERROR)
        A.reject(kg(I.reason));
      else
        throw new Error("Unexpected callback case");
      return;
    }
    const g = this.actionHandler[I.action];
    if (!g)
      throw new Error(`Unknown action from worker: ${I.action}`);
    if (I.callbackId) {
      const C = this.sourceName, A = I.sourceName, d = this.comObj;
      Promise.try(g, I.data).then(function(Z) {
        d.postMessage({
          sourceName: C,
          targetName: A,
          callback: El.DATA,
          callbackId: I.callbackId,
          data: Z
        });
      }, function(Z) {
        d.postMessage({
          sourceName: C,
          targetName: A,
          callback: El.ERROR,
          callbackId: I.callbackId,
          reason: kg(Z)
        });
      });
      return;
    }
    if (I.streamId) {
      this.#C(I);
      return;
    }
    g(I.data);
  }
  on(I, g) {
    const C = this.actionHandler;
    if (C[I])
      throw new Error(`There is already an actionName called "${I}"`);
    C[I] = g;
  }
  send(I, g, C) {
    this.comObj.postMessage({
      sourceName: this.sourceName,
      targetName: this.targetName,
      action: I,
      data: g
    }, C);
  }
  sendWithPromise(I, g, C) {
    const A = this.callbackId++, d = Promise.withResolvers();
    this.callbackCapabilities[A] = d;
    try {
      this.comObj.postMessage({
        sourceName: this.sourceName,
        targetName: this.targetName,
        action: I,
        callbackId: A,
        data: g
      }, C);
    } catch (Z) {
      d.reject(Z);
    }
    return d.promise;
  }
  sendWithStream(I, g, C, A) {
    const d = this.streamId++, Z = this.sourceName, i = this.targetName, B = this.comObj;
    return new ReadableStream({
      start: (F) => {
        const s = Promise.withResolvers();
        return this.streamControllers[d] = {
          controller: F,
          startCall: s,
          pullCall: null,
          cancelCall: null,
          isClosed: !1
        }, B.postMessage({
          sourceName: Z,
          targetName: i,
          action: I,
          streamId: d,
          data: g,
          desiredSize: F.desiredSize
        }, A), s.promise;
      },
      pull: (F) => {
        const s = Promise.withResolvers();
        return this.streamControllers[d].pullCall = s, B.postMessage({
          sourceName: Z,
          targetName: i,
          stream: ig.PULL,
          streamId: d,
          desiredSize: F.desiredSize
        }), s.promise;
      },
      cancel: (F) => {
        Fg(F instanceof Error, "cancel must have a valid reason");
        const s = Promise.withResolvers();
        return this.streamControllers[d].cancelCall = s, this.streamControllers[d].isClosed = !0, B.postMessage({
          sourceName: Z,
          targetName: i,
          stream: ig.CANCEL,
          streamId: d,
          reason: kg(F)
        }), s.promise;
      }
    }, C);
  }
  #C(I) {
    const g = I.streamId, C = this.sourceName, A = I.sourceName, d = this.comObj, Z = this, i = this.actionHandler[I.action], B = {
      enqueue(F, s = 1, c) {
        if (this.isCancelled)
          return;
        const G = this.desiredSize;
        this.desiredSize -= s, G > 0 && this.desiredSize <= 0 && (this.sinkCapability = Promise.withResolvers(), this.ready = this.sinkCapability.promise), d.postMessage({
          sourceName: C,
          targetName: A,
          stream: ig.ENQUEUE,
          streamId: g,
          chunk: F
        }, c);
      },
      close() {
        this.isCancelled || (this.isCancelled = !0, d.postMessage({
          sourceName: C,
          targetName: A,
          stream: ig.CLOSE,
          streamId: g
        }), delete Z.streamSinks[g]);
      },
      error(F) {
        Fg(F instanceof Error, "error must have a valid reason"), !this.isCancelled && (this.isCancelled = !0, d.postMessage({
          sourceName: C,
          targetName: A,
          stream: ig.ERROR,
          streamId: g,
          reason: kg(F)
        }));
      },
      sinkCapability: Promise.withResolvers(),
      onPull: null,
      onCancel: null,
      isCancelled: !1,
      desiredSize: I.desiredSize,
      ready: null
    };
    B.sinkCapability.resolve(), B.ready = B.sinkCapability.promise, this.streamSinks[g] = B, Promise.try(i, I.data, B).then(function() {
      d.postMessage({
        sourceName: C,
        targetName: A,
        stream: ig.START_COMPLETE,
        streamId: g,
        success: !0
      });
    }, function(F) {
      d.postMessage({
        sourceName: C,
        targetName: A,
        stream: ig.START_COMPLETE,
        streamId: g,
        reason: kg(F)
      });
    });
  }
  #A(I) {
    const g = I.streamId, C = this.sourceName, A = I.sourceName, d = this.comObj, Z = this.streamControllers[g], i = this.streamSinks[g];
    switch (I.stream) {
      case ig.START_COMPLETE:
        I.success ? Z.startCall.resolve() : Z.startCall.reject(kg(I.reason));
        break;
      case ig.PULL_COMPLETE:
        I.success ? Z.pullCall.resolve() : Z.pullCall.reject(kg(I.reason));
        break;
      case ig.PULL:
        if (!i) {
          d.postMessage({
            sourceName: C,
            targetName: A,
            stream: ig.PULL_COMPLETE,
            streamId: g,
            success: !0
          });
          break;
        }
        i.desiredSize <= 0 && I.desiredSize > 0 && i.sinkCapability.resolve(), i.desiredSize = I.desiredSize, Promise.try(i.onPull || Ii).then(function() {
          d.postMessage({
            sourceName: C,
            targetName: A,
            stream: ig.PULL_COMPLETE,
            streamId: g,
            success: !0
          });
        }, function(F) {
          d.postMessage({
            sourceName: C,
            targetName: A,
            stream: ig.PULL_COMPLETE,
            streamId: g,
            reason: kg(F)
          });
        });
        break;
      case ig.ENQUEUE:
        if (Fg(Z, "enqueue should have stream controller"), Z.isClosed)
          break;
        Z.controller.enqueue(I.chunk);
        break;
      case ig.CLOSE:
        if (Fg(Z, "close should have stream controller"), Z.isClosed)
          break;
        Z.isClosed = !0, Z.controller.close(), this.#d(Z, g);
        break;
      case ig.ERROR:
        Fg(Z, "error should have stream controller"), Z.controller.error(kg(I.reason)), this.#d(Z, g);
        break;
      case ig.CANCEL_COMPLETE:
        I.success ? Z.cancelCall.resolve() : Z.cancelCall.reject(kg(I.reason)), this.#d(Z, g);
        break;
      case ig.CANCEL:
        if (!i)
          break;
        const B = kg(I.reason);
        Promise.try(i.onCancel || Ii, B).then(function() {
          d.postMessage({
            sourceName: C,
            targetName: A,
            stream: ig.CANCEL_COMPLETE,
            streamId: g,
            success: !0
          });
        }, function(F) {
          d.postMessage({
            sourceName: C,
            targetName: A,
            stream: ig.CANCEL_COMPLETE,
            streamId: g,
            reason: kg(F)
          });
        }), i.sinkCapability.reject(B), i.isCancelled = !0, delete this.streamSinks[g];
        break;
      default:
        throw new Error("Unexpected stream case");
    }
  }
  async #d(I, g) {
    await Promise.allSettled([I.startCall?.promise, I.pullCall?.promise, I.cancelCall?.promise]), delete this.streamControllers[g];
  }
  destroy() {
    this.#I?.abort(), this.#I = null;
  }
}
class UB {
  #I = !1;
  constructor({
    enableHWA: I = !1
  }) {
    this.#I = I;
  }
  create(I, g) {
    if (I <= 0 || g <= 0)
      throw new Error("Invalid canvas size");
    const C = this._createCanvas(I, g);
    return {
      canvas: C,
      context: C.getContext("2d", {
        willReadFrequently: !this.#I
      })
    };
  }
  reset(I, g, C) {
    if (!I.canvas)
      throw new Error("Canvas is not specified");
    if (g <= 0 || C <= 0)
      throw new Error("Invalid canvas size");
    I.canvas.width = g, I.canvas.height = C;
  }
  destroy(I) {
    if (!I.canvas)
      throw new Error("Canvas is not specified");
    I.canvas.width = 0, I.canvas.height = 0, I.canvas = null, I.context = null;
  }
  _createCanvas(I, g) {
    _I("Abstract method `_createCanvas` called.");
  }
}
class xs extends UB {
  constructor({
    ownerDocument: I = globalThis.document,
    enableHWA: g = !1
  }) {
    super({
      enableHWA: g
    }), this._document = I;
  }
  _createCanvas(I, g) {
    const C = this._document.createElement("canvas");
    return C.width = I, C.height = g, C;
  }
}
class aB {
  constructor({
    baseUrl: I = null,
    isCompressed: g = !0
  }) {
    this.baseUrl = I, this.isCompressed = g;
  }
  async fetch({
    name: I
  }) {
    if (!this.baseUrl)
      throw new Error("Ensure that the `cMapUrl` and `cMapPacked` API parameters are provided.");
    if (!I)
      throw new Error("CMap name must be specified.");
    const g = this.baseUrl + I + (this.isCompressed ? ".bcmap" : "");
    return this._fetch(g).then((C) => ({
      cMapData: C,
      isCompressed: this.isCompressed
    })).catch((C) => {
      throw new Error(`Unable to load ${this.isCompressed ? "binary " : ""}CMap at: ${g}`);
    });
  }
  async _fetch(I) {
    _I("Abstract method `_fetch` called.");
  }
}
class oB extends aB {
  async _fetch(I) {
    const g = await pd(I, this.isCompressed ? "arraybuffer" : "text");
    return g instanceof ArrayBuffer ? new Uint8Array(g) : Hd(g);
  }
}
class eB {
  addFilter(I) {
    return "none";
  }
  addHCMFilter(I, g) {
    return "none";
  }
  addAlphaFilter(I) {
    return "none";
  }
  addLuminosityFilter(I) {
    return "none";
  }
  addHighlightHCMFilter(I, g, C, A, d) {
    return "none";
  }
  destroy(I = !1) {
  }
}
class Os extends eB {
  #I;
  #g;
  #C;
  #A;
  #d;
  #l;
  #B = 0;
  constructor({
    docId: I,
    ownerDocument: g = globalThis.document
  }) {
    super(), this.#A = I, this.#d = g;
  }
  get #i() {
    return this.#g ||= /* @__PURE__ */ new Map();
  }
  get #s() {
    return this.#l ||= /* @__PURE__ */ new Map();
  }
  get #F() {
    if (!this.#C) {
      const I = this.#d.createElement("div"), {
        style: g
      } = I;
      g.visibility = "hidden", g.contain = "strict", g.width = g.height = 0, g.position = "absolute", g.top = g.left = 0, g.zIndex = -1;
      const C = this.#d.createElementNS(wC, "svg");
      C.setAttribute("width", 0), C.setAttribute("height", 0), this.#C = this.#d.createElementNS(wC, "defs"), I.append(C), C.append(this.#C), this.#d.body.append(I);
    }
    return this.#C;
  }
  #G(I) {
    if (I.length === 1) {
      const B = I[0], F = new Array(256);
      for (let c = 0; c < 256; c++)
        F[c] = B[c] / 255;
      const s = F.join(",");
      return [s, s, s];
    }
    const [g, C, A] = I, d = new Array(256), Z = new Array(256), i = new Array(256);
    for (let B = 0; B < 256; B++)
      d[B] = g[B] / 255, Z[B] = C[B] / 255, i[B] = A[B] / 255;
    return [d.join(","), Z.join(","), i.join(",")];
  }
  #c(I) {
    if (this.#I === void 0) {
      this.#I = "";
      const g = this.#d.URL;
      g !== this.#d.baseURI && (kd(g) ? DI('#createUrl: ignore "data:"-URL for performance reasons.') : this.#I = g.split("#", 1)[0]);
    }
    return `url(${this.#I}#${I})`;
  }
  addFilter(I) {
    if (!I)
      return "none";
    let g = this.#i.get(I);
    if (g)
      return g;
    const [C, A, d] = this.#G(I), Z = I.length === 1 ? C : `${C}${A}${d}`;
    if (g = this.#i.get(Z), g)
      return this.#i.set(I, g), g;
    const i = `g_${this.#A}_transfer_map_${this.#B++}`, B = this.#c(i);
    this.#i.set(I, B), this.#i.set(Z, B);
    const F = this.#W(i);
    return this.#b(C, A, d, F), B;
  }
  addHCMFilter(I, g) {
    const C = `${I}-${g}`, A = "base";
    let d = this.#s.get(A);
    if (d?.key === C || (d ? (d.filter?.remove(), d.key = C, d.url = "none", d.filter = null) : (d = {
      key: C,
      url: "none",
      filter: null
    }, this.#s.set(A, d)), !I || !g))
      return d.url;
    const Z = this.#o(I);
    I = iI.makeHexColor(...Z);
    const i = this.#o(g);
    if (g = iI.makeHexColor(...i), this.#F.style.color = "", I === "#000000" && g === "#ffffff" || I === g)
      return d.url;
    const B = new Array(256);
    for (let V = 0; V <= 255; V++) {
      const W = V / 255;
      B[V] = W <= 0.03928 ? W / 12.92 : ((W + 0.055) / 1.055) ** 2.4;
    }
    const F = B.join(","), s = `g_${this.#A}_hcm_filter`, c = d.filter = this.#W(s);
    this.#b(F, F, F, c), this.#Z(c);
    const G = (V, W) => {
      const R = Z[V] / 255, U = i[V] / 255, n = new Array(W + 1);
      for (let m = 0; m <= W; m++)
        n[m] = R + m / W * (U - R);
      return n.join(",");
    };
    return this.#b(G(0, 5), G(1, 5), G(2, 5), c), d.url = this.#c(s), d.url;
  }
  addAlphaFilter(I) {
    let g = this.#i.get(I);
    if (g)
      return g;
    const [C] = this.#G([I]), A = `alpha_${C}`;
    if (g = this.#i.get(A), g)
      return this.#i.set(I, g), g;
    const d = `g_${this.#A}_alpha_map_${this.#B++}`, Z = this.#c(d);
    this.#i.set(I, Z), this.#i.set(A, Z);
    const i = this.#W(d);
    return this.#n(C, i), Z;
  }
  addLuminosityFilter(I) {
    let g = this.#i.get(I || "luminosity");
    if (g)
      return g;
    let C, A;
    if (I ? ([C] = this.#G([I]), A = `luminosity_${C}`) : A = "luminosity", g = this.#i.get(A), g)
      return this.#i.set(I, g), g;
    const d = `g_${this.#A}_luminosity_map_${this.#B++}`, Z = this.#c(d);
    this.#i.set(I, Z), this.#i.set(A, Z);
    const i = this.#W(d);
    return this.#V(i), I && this.#n(C, i), Z;
  }
  addHighlightHCMFilter(I, g, C, A, d) {
    const Z = `${g}-${C}-${A}-${d}`;
    let i = this.#s.get(I);
    if (i?.key === Z || (i ? (i.filter?.remove(), i.key = Z, i.url = "none", i.filter = null) : (i = {
      key: Z,
      url: "none",
      filter: null
    }, this.#s.set(I, i)), !g || !C))
      return i.url;
    const [B, F] = [g, C].map(this.#o.bind(this));
    let s = Math.round(0.2126 * B[0] + 0.7152 * B[1] + 0.0722 * B[2]), c = Math.round(0.2126 * F[0] + 0.7152 * F[1] + 0.0722 * F[2]), [G, V] = [A, d].map(this.#o.bind(this));
    c < s && ([s, c, G, V] = [c, s, V, G]), this.#F.style.color = "";
    const W = (n, m, e) => {
      const N = new Array(256), w = (c - s) / e, S = n / 255, Y = (m - n) / (255 * e);
      let M = 0;
      for (let y = 0; y <= e; y++) {
        const r = Math.round(s + y * w), z = S + y * Y;
        for (let E = M; E <= r; E++)
          N[E] = z;
        M = r + 1;
      }
      for (let y = M; y < 256; y++)
        N[y] = N[M - 1];
      return N.join(",");
    }, R = `g_${this.#A}_hcm_${I}_filter`, U = i.filter = this.#W(R);
    return this.#Z(U), this.#b(W(G[0], V[0], 5), W(G[1], V[1], 5), W(G[2], V[2], 5), U), i.url = this.#c(R), i.url;
  }
  destroy(I = !1) {
    I && this.#l?.size || (this.#C?.parentNode.parentNode.remove(), this.#C = null, this.#g?.clear(), this.#g = null, this.#l?.clear(), this.#l = null, this.#B = 0);
  }
  #V(I) {
    const g = this.#d.createElementNS(wC, "feColorMatrix");
    g.setAttribute("type", "matrix"), g.setAttribute("values", "0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.3 0.59 0.11 0 0"), I.append(g);
  }
  #Z(I) {
    const g = this.#d.createElementNS(wC, "feColorMatrix");
    g.setAttribute("type", "matrix"), g.setAttribute("values", "0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0"), I.append(g);
  }
  #W(I) {
    const g = this.#d.createElementNS(wC, "filter");
    return g.setAttribute("color-interpolation-filters", "sRGB"), g.setAttribute("id", I), this.#F.append(g), g;
  }
  #R(I, g, C) {
    const A = this.#d.createElementNS(wC, g);
    A.setAttribute("type", "discrete"), A.setAttribute("tableValues", C), I.append(A);
  }
  #b(I, g, C, A) {
    const d = this.#d.createElementNS(wC, "feComponentTransfer");
    A.append(d), this.#R(d, "feFuncR", I), this.#R(d, "feFuncG", g), this.#R(d, "feFuncB", C);
  }
  #n(I, g) {
    const C = this.#d.createElementNS(wC, "feComponentTransfer");
    g.append(C), this.#R(C, "feFuncA", I);
  }
  #o(I) {
    return this.#F.style.color = I, lZ(getComputedStyle(this.#F).getPropertyValue("color"));
  }
}
class mB {
  constructor({
    baseUrl: I = null
  }) {
    this.baseUrl = I;
  }
  async fetch({
    filename: I
  }) {
    if (!this.baseUrl)
      throw new Error("Ensure that the `standardFontDataUrl` API parameter is provided.");
    if (!I)
      throw new Error("Font filename must be specified.");
    const g = `${this.baseUrl}${I}`;
    return this._fetch(g).catch((C) => {
      throw new Error(`Unable to load font data at: ${g}`);
    });
  }
  async _fetch(I) {
    _I("Abstract method `_fetch` called.");
  }
}
class hB extends mB {
  async _fetch(I) {
    const g = await pd(I, "arraybuffer");
    return new Uint8Array(g);
  }
}
Yg && DI("Please use the `legacy` build in Node.js environments.");
async function QB(l) {
  const g = await process.getBuiltinModule("fs").promises.readFile(l);
  return new Uint8Array(g);
}
class fs extends eB {
}
class Ps extends UB {
  _createCanvas(I, g) {
    return process.getBuiltinModule("module").createRequire(import.meta.url)("@napi-rs/canvas").createCanvas(I, g);
  }
}
class qs extends aB {
  async _fetch(I) {
    return QB(I);
  }
}
class _s extends mB {
  async _fetch(I) {
    return QB(I);
  }
}
const wg = {
  FILL: "Fill",
  STROKE: "Stroke",
  SHADING: "Shading"
};
function M0(l, I) {
  if (!I)
    return;
  const g = I[2] - I[0], C = I[3] - I[1], A = new Path2D();
  A.rect(I[0], I[1], g, C), l.clip(A);
}
class BZ {
  getPattern() {
    _I("Abstract method `getPattern` called.");
  }
}
class $s extends BZ {
  constructor(I) {
    super(), this._type = I[1], this._bbox = I[2], this._colorStops = I[3], this._p0 = I[4], this._p1 = I[5], this._r0 = I[6], this._r1 = I[7], this.matrix = null;
  }
  _createGradient(I) {
    let g;
    this._type === "axial" ? g = I.createLinearGradient(this._p0[0], this._p0[1], this._p1[0], this._p1[1]) : this._type === "radial" && (g = I.createRadialGradient(this._p0[0], this._p0[1], this._r0, this._p1[0], this._p1[1], this._r1));
    for (const C of this._colorStops)
      g.addColorStop(C[0], C[1]);
    return g;
  }
  getPattern(I, g, C, A) {
    let d;
    if (A === wg.STROKE || A === wg.FILL) {
      const Z = g.current.getClippedPathBoundingBox(A, $I(I)) || [0, 0, 0, 0], i = Math.ceil(Z[2] - Z[0]) || 1, B = Math.ceil(Z[3] - Z[1]) || 1, F = g.cachedCanvases.getCanvas("pattern", i, B), s = F.context;
      s.clearRect(0, 0, s.canvas.width, s.canvas.height), s.beginPath(), s.rect(0, 0, s.canvas.width, s.canvas.height), s.translate(-Z[0], -Z[1]), C = iI.transform(C, [1, 0, 0, 1, Z[0], Z[1]]), s.transform(...g.baseTransform), this.matrix && s.transform(...this.matrix), M0(s, this._bbox), s.fillStyle = this._createGradient(s), s.fill(), d = I.createPattern(F.canvas, "no-repeat");
      const c = new DOMMatrix(C);
      d.setTransform(c);
    } else
      M0(I, this._bbox), d = this._createGradient(I);
    return d;
  }
}
function c0(l, I, g, C, A, d, Z, i) {
  const B = I.coords, F = I.colors, s = l.data, c = l.width * 4;
  let G;
  B[g + 1] > B[C + 1] && (G = g, g = C, C = G, G = d, d = Z, Z = G), B[C + 1] > B[A + 1] && (G = C, C = A, A = G, G = Z, Z = i, i = G), B[g + 1] > B[C + 1] && (G = g, g = C, C = G, G = d, d = Z, Z = G);
  const V = (B[g] + I.offsetX) * I.scaleX, W = (B[g + 1] + I.offsetY) * I.scaleY, R = (B[C] + I.offsetX) * I.scaleX, U = (B[C + 1] + I.offsetY) * I.scaleY, n = (B[A] + I.offsetX) * I.scaleX, m = (B[A + 1] + I.offsetY) * I.scaleY;
  if (W >= m)
    return;
  const e = F[d], N = F[d + 1], w = F[d + 2], S = F[Z], Y = F[Z + 1], M = F[Z + 2], y = F[i], r = F[i + 1], z = F[i + 2], E = Math.round(W), X = Math.round(m);
  let O, _, p, T, UI, sI, jI, SI;
  for (let aI = E; aI <= X; aI++) {
    if (aI < U) {
      const BI = aI < W ? 0 : (W - aI) / (W - U);
      O = V - (V - R) * BI, _ = e - (e - S) * BI, p = N - (N - Y) * BI, T = w - (w - M) * BI;
    } else {
      let BI;
      aI > m ? BI = 1 : U === m ? BI = 0 : BI = (U - aI) / (U - m), O = R - (R - n) * BI, _ = S - (S - y) * BI, p = Y - (Y - r) * BI, T = M - (M - z) * BI;
    }
    let eI;
    aI < W ? eI = 0 : aI > m ? eI = 1 : eI = (W - aI) / (W - m), UI = V - (V - n) * eI, sI = e - (e - y) * eI, jI = N - (N - r) * eI, SI = w - (w - z) * eI;
    const zI = Math.round(Math.min(O, UI)), fI = Math.round(Math.max(O, UI));
    let bI = c * aI + zI * 4;
    for (let BI = zI; BI <= fI; BI++)
      eI = (O - BI) / (O - UI), eI < 0 ? eI = 0 : eI > 1 && (eI = 1), s[bI++] = _ - (_ - sI) * eI | 0, s[bI++] = p - (p - jI) * eI | 0, s[bI++] = T - (T - SI) * eI | 0, s[bI++] = 255;
  }
}
function Ic(l, I, g) {
  const C = I.coords, A = I.colors;
  let d, Z;
  switch (I.type) {
    case "lattice":
      const i = I.verticesPerRow, B = Math.floor(C.length / i) - 1, F = i - 1;
      for (d = 0; d < B; d++) {
        let s = d * i;
        for (let c = 0; c < F; c++, s++)
          c0(l, g, C[s], C[s + 1], C[s + i], A[s], A[s + 1], A[s + i]), c0(l, g, C[s + i + 1], C[s + 1], C[s + i], A[s + i + 1], A[s + 1], A[s + i]);
      }
      break;
    case "triangles":
      for (d = 0, Z = C.length; d < Z; d += 3)
        c0(l, g, C[d], C[d + 1], C[d + 2], A[d], A[d + 1], A[d + 2]);
      break;
    default:
      throw new Error("illegal figure");
  }
}
class gc extends BZ {
  constructor(I) {
    super(), this._coords = I[2], this._colors = I[3], this._figures = I[4], this._bounds = I[5], this._bbox = I[7], this._background = I[8], this.matrix = null;
  }
  _createMeshCanvas(I, g, C) {
    const i = Math.floor(this._bounds[0]), B = Math.floor(this._bounds[1]), F = Math.ceil(this._bounds[2]) - i, s = Math.ceil(this._bounds[3]) - B, c = Math.min(Math.ceil(Math.abs(F * I[0] * 1.1)), 3e3), G = Math.min(Math.ceil(Math.abs(s * I[1] * 1.1)), 3e3), V = F / c, W = s / G, R = {
      coords: this._coords,
      colors: this._colors,
      offsetX: -i,
      offsetY: -B,
      scaleX: 1 / V,
      scaleY: 1 / W
    }, U = c + 2 * 2, n = G + 2 * 2, m = C.getCanvas("mesh", U, n), e = m.context, N = e.createImageData(c, G);
    if (g) {
      const S = N.data;
      for (let Y = 0, M = S.length; Y < M; Y += 4)
        S[Y] = g[0], S[Y + 1] = g[1], S[Y + 2] = g[2], S[Y + 3] = 255;
    }
    for (const S of this._figures)
      Ic(N, S, R);
    return e.putImageData(N, 2, 2), {
      canvas: m.canvas,
      offsetX: i - 2 * V,
      offsetY: B - 2 * W,
      scaleX: V,
      scaleY: W
    };
  }
  getPattern(I, g, C, A) {
    M0(I, this._bbox);
    let d;
    if (A === wg.SHADING)
      d = iI.singularValueDecompose2dScale($I(I));
    else if (d = iI.singularValueDecompose2dScale(g.baseTransform), this.matrix) {
      const i = iI.singularValueDecompose2dScale(this.matrix);
      d = [d[0] * i[0], d[1] * i[1]];
    }
    const Z = this._createMeshCanvas(d, A === wg.SHADING ? null : this._background, g.cachedCanvases);
    return A !== wg.SHADING && (I.setTransform(...g.baseTransform), this.matrix && I.transform(...this.matrix)), I.translate(Z.offsetX, Z.offsetY), I.scale(Z.scaleX, Z.scaleY), I.createPattern(Z.canvas, "no-repeat");
  }
}
class Cc extends BZ {
  getPattern() {
    return "hotpink";
  }
}
function Ac(l) {
  switch (l[0]) {
    case "RadialAxial":
      return new $s(l);
    case "Mesh":
      return new gc(l);
    case "Dummy":
      return new Cc();
  }
  throw new Error(`Unknown IR type: ${l[0]}`);
}
const gi = {
  COLORED: 1,
  UNCOLORED: 2
};
class FZ {
  static MAX_PATTERN_SIZE = 3e3;
  constructor(I, g, C, A, d) {
    this.operatorList = I[2], this.matrix = I[3], this.bbox = I[4], this.xstep = I[5], this.ystep = I[6], this.paintType = I[7], this.tilingType = I[8], this.color = g, this.ctx = C, this.canvasGraphicsFactory = A, this.baseTransform = d;
  }
  createPatternCanvas(I) {
    const {
      bbox: g,
      operatorList: C,
      paintType: A,
      tilingType: d,
      color: Z,
      canvasGraphicsFactory: i
    } = this;
    let {
      xstep: B,
      ystep: F
    } = this;
    B = Math.abs(B), F = Math.abs(F), Xd("TilingType: " + d);
    const s = g[0], c = g[1], G = g[2], V = g[3], W = G - s, R = V - c, U = iI.singularValueDecompose2dScale(this.matrix), n = iI.singularValueDecompose2dScale(this.baseTransform), m = U[0] * n[0], e = U[1] * n[1];
    let N = W, w = R, S = !1, Y = !1;
    const M = Math.ceil(B * m), y = Math.ceil(F * e), r = Math.ceil(W * m), z = Math.ceil(R * e);
    M >= r ? N = B : S = !0, y >= z ? w = F : Y = !0;
    const E = this.getSizeAndScale(N, this.ctx.canvas.width, m), X = this.getSizeAndScale(w, this.ctx.canvas.height, e), O = I.cachedCanvases.getCanvas("pattern", E.size, X.size), _ = O.context, p = i.createCanvasGraphics(_);
    if (p.groupLevel = I.groupLevel, this.setFillAndStrokeStyleToContext(p, A, Z), _.translate(-E.scale * s, -X.scale * c), p.transform(E.scale, 0, 0, X.scale, 0, 0), _.save(), this.clipBbox(p, s, c, G, V), p.baseTransform = $I(p.ctx), p.executeOperatorList(C), p.endDrawing(), _.restore(), S || Y) {
      const T = O.canvas;
      S && (N = B), Y && (w = F);
      const UI = this.getSizeAndScale(N, this.ctx.canvas.width, m), sI = this.getSizeAndScale(w, this.ctx.canvas.height, e), jI = UI.size, SI = sI.size, aI = I.cachedCanvases.getCanvas("pattern-workaround", jI, SI), eI = aI.context, zI = S ? Math.floor(W / B) : 0, fI = Y ? Math.floor(R / F) : 0;
      for (let bI = 0; bI <= zI; bI++)
        for (let BI = 0; BI <= fI; BI++)
          eI.drawImage(T, jI * bI, SI * BI, jI, SI, 0, 0, jI, SI);
      return {
        canvas: aI.canvas,
        scaleX: UI.scale,
        scaleY: sI.scale,
        offsetX: s,
        offsetY: c
      };
    }
    return {
      canvas: O.canvas,
      scaleX: E.scale,
      scaleY: X.scale,
      offsetX: s,
      offsetY: c
    };
  }
  getSizeAndScale(I, g, C) {
    const A = Math.max(FZ.MAX_PATTERN_SIZE, g);
    let d = Math.ceil(I * C);
    return d >= A ? d = A : C = d / I, {
      scale: C,
      size: d
    };
  }
  clipBbox(I, g, C, A, d) {
    const Z = A - g, i = d - C;
    I.ctx.rect(g, C, Z, i), I.current.updateRectMinMax($I(I.ctx), [g, C, A, d]), I.clip(), I.endPath();
  }
  setFillAndStrokeStyleToContext(I, g, C) {
    const A = I.ctx, d = I.current;
    switch (g) {
      case gi.COLORED:
        const Z = this.ctx;
        A.fillStyle = Z.fillStyle, A.strokeStyle = Z.strokeStyle, d.fillColor = Z.fillStyle, d.strokeColor = Z.strokeStyle;
        break;
      case gi.UNCOLORED:
        const i = iI.makeHexColor(C[0], C[1], C[2]);
        A.fillStyle = i, A.strokeStyle = i, d.fillColor = i, d.strokeColor = i;
        break;
      default:
        throw new Ss(`Unsupported paint type: ${g}`);
    }
  }
  getPattern(I, g, C, A) {
    let d = C;
    A !== wg.SHADING && (d = iI.transform(d, g.baseTransform), this.matrix && (d = iI.transform(d, this.matrix)));
    const Z = this.createPatternCanvas(g);
    let i = new DOMMatrix(d);
    i = i.translate(Z.offsetX, Z.offsetY), i = i.scale(1 / Z.scaleX, 1 / Z.scaleY);
    const B = I.createPattern(Z.canvas, "repeat");
    return B.setTransform(i), B;
  }
}
function lc({
  src: l,
  srcPos: I = 0,
  dest: g,
  width: C,
  height: A,
  nonBlackColor: d = 4294967295,
  inverseDecode: Z = !1
}) {
  const i = ug.isLittleEndian ? 4278190080 : 255, [B, F] = Z ? [d, i] : [i, d], s = C >> 3, c = C & 7, G = l.length;
  g = new Uint32Array(g.buffer);
  let V = 0;
  for (let W = 0; W < A; W++) {
    for (const U = I + s; I < U; I++) {
      const n = I < G ? l[I] : 255;
      g[V++] = n & 128 ? F : B, g[V++] = n & 64 ? F : B, g[V++] = n & 32 ? F : B, g[V++] = n & 16 ? F : B, g[V++] = n & 8 ? F : B, g[V++] = n & 4 ? F : B, g[V++] = n & 2 ? F : B, g[V++] = n & 1 ? F : B;
    }
    if (c === 0)
      continue;
    const R = I < G ? l[I++] : 255;
    for (let U = 0; U < c; U++)
      g[V++] = R & 1 << 7 - U ? F : B;
  }
  return {
    srcPos: I,
    destPos: V
  };
}
const Ci = 16, Ai = 100, dc = 15, li = 10, di = 1e3, Kg = 16;
function Zc(l, I) {
  if (l._removeMirroring)
    throw new Error("Context is already forwarding operations.");
  l.__originalSave = l.save, l.__originalRestore = l.restore, l.__originalRotate = l.rotate, l.__originalScale = l.scale, l.__originalTranslate = l.translate, l.__originalTransform = l.transform, l.__originalSetTransform = l.setTransform, l.__originalResetTransform = l.resetTransform, l.__originalClip = l.clip, l.__originalMoveTo = l.moveTo, l.__originalLineTo = l.lineTo, l.__originalBezierCurveTo = l.bezierCurveTo, l.__originalRect = l.rect, l.__originalClosePath = l.closePath, l.__originalBeginPath = l.beginPath, l._removeMirroring = () => {
    l.save = l.__originalSave, l.restore = l.__originalRestore, l.rotate = l.__originalRotate, l.scale = l.__originalScale, l.translate = l.__originalTranslate, l.transform = l.__originalTransform, l.setTransform = l.__originalSetTransform, l.resetTransform = l.__originalResetTransform, l.clip = l.__originalClip, l.moveTo = l.__originalMoveTo, l.lineTo = l.__originalLineTo, l.bezierCurveTo = l.__originalBezierCurveTo, l.rect = l.__originalRect, l.closePath = l.__originalClosePath, l.beginPath = l.__originalBeginPath, delete l._removeMirroring;
  }, l.save = function() {
    I.save(), this.__originalSave();
  }, l.restore = function() {
    I.restore(), this.__originalRestore();
  }, l.translate = function(C, A) {
    I.translate(C, A), this.__originalTranslate(C, A);
  }, l.scale = function(C, A) {
    I.scale(C, A), this.__originalScale(C, A);
  }, l.transform = function(C, A, d, Z, i, B) {
    I.transform(C, A, d, Z, i, B), this.__originalTransform(C, A, d, Z, i, B);
  }, l.setTransform = function(C, A, d, Z, i, B) {
    I.setTransform(C, A, d, Z, i, B), this.__originalSetTransform(C, A, d, Z, i, B);
  }, l.resetTransform = function() {
    I.resetTransform(), this.__originalResetTransform();
  }, l.rotate = function(C) {
    I.rotate(C), this.__originalRotate(C);
  }, l.clip = function(C) {
    I.clip(C), this.__originalClip(C);
  }, l.moveTo = function(g, C) {
    I.moveTo(g, C), this.__originalMoveTo(g, C);
  }, l.lineTo = function(g, C) {
    I.lineTo(g, C), this.__originalLineTo(g, C);
  }, l.bezierCurveTo = function(g, C, A, d, Z, i) {
    I.bezierCurveTo(g, C, A, d, Z, i), this.__originalBezierCurveTo(g, C, A, d, Z, i);
  }, l.rect = function(g, C, A, d) {
    I.rect(g, C, A, d), this.__originalRect(g, C, A, d);
  }, l.closePath = function() {
    I.closePath(), this.__originalClosePath();
  }, l.beginPath = function() {
    I.beginPath(), this.__originalBeginPath();
  };
}
class ic {
  constructor(I) {
    this.canvasFactory = I, this.cache = /* @__PURE__ */ Object.create(null);
  }
  getCanvas(I, g, C) {
    let A;
    return this.cache[I] !== void 0 ? (A = this.cache[I], this.canvasFactory.reset(A, g, C)) : (A = this.canvasFactory.create(g, C), this.cache[I] = A), A;
  }
  delete(I) {
    delete this.cache[I];
  }
  clear() {
    for (const I in this.cache) {
      const g = this.cache[I];
      this.canvasFactory.destroy(g), delete this.cache[I];
    }
  }
}
function jl(l, I, g, C, A, d, Z, i, B, F) {
  const [s, c, G, V, W, R] = $I(l);
  if (c === 0 && G === 0) {
    const m = Z * s + W, e = Math.round(m), N = i * V + R, w = Math.round(N), S = (Z + B) * s + W, Y = Math.abs(Math.round(S) - e) || 1, M = (i + F) * V + R, y = Math.abs(Math.round(M) - w) || 1;
    return l.setTransform(Math.sign(s), 0, 0, Math.sign(V), e, w), l.drawImage(I, g, C, A, d, 0, 0, Y, y), l.setTransform(s, c, G, V, W, R), [Y, y];
  }
  if (s === 0 && V === 0) {
    const m = i * G + W, e = Math.round(m), N = Z * c + R, w = Math.round(N), S = (i + F) * G + W, Y = Math.abs(Math.round(S) - e) || 1, M = (Z + B) * c + R, y = Math.abs(Math.round(M) - w) || 1;
    return l.setTransform(0, Math.sign(c), Math.sign(G), 0, e, w), l.drawImage(I, g, C, A, d, 0, 0, y, Y), l.setTransform(s, c, G, V, W, R), [y, Y];
  }
  l.drawImage(I, g, C, A, d, Z, i, B, F);
  const U = Math.hypot(s, c), n = Math.hypot(G, V);
  return [U * B, n * F];
}
function Bc(l) {
  const {
    width: I,
    height: g
  } = l;
  if (I > di || g > di)
    return null;
  const C = 1e3, A = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]), d = I + 1;
  let Z = new Uint8Array(d * (g + 1)), i, B, F;
  const s = I + 7 & -8;
  let c = new Uint8Array(s * g), G = 0;
  for (const n of l.data) {
    let m = 128;
    for (; m > 0; )
      c[G++] = n & m ? 0 : 255, m >>= 1;
  }
  let V = 0;
  for (G = 0, c[G] !== 0 && (Z[0] = 1, ++V), B = 1; B < I; B++)
    c[G] !== c[G + 1] && (Z[B] = c[G] ? 2 : 1, ++V), G++;
  for (c[G] !== 0 && (Z[B] = 2, ++V), i = 1; i < g; i++) {
    G = i * s, F = i * d, c[G - s] !== c[G] && (Z[F] = c[G] ? 1 : 8, ++V);
    let n = (c[G] ? 4 : 0) + (c[G - s] ? 8 : 0);
    for (B = 1; B < I; B++)
      n = (n >> 2) + (c[G + 1] ? 4 : 0) + (c[G - s + 1] ? 8 : 0), A[n] && (Z[F + B] = A[n], ++V), G++;
    if (c[G - s] !== c[G] && (Z[F + B] = c[G] ? 2 : 4, ++V), V > C)
      return null;
  }
  for (G = s * (g - 1), F = i * d, c[G] !== 0 && (Z[F] = 8, ++V), B = 1; B < I; B++)
    c[G] !== c[G + 1] && (Z[F + B] = c[G] ? 4 : 8, ++V), G++;
  if (c[G] !== 0 && (Z[F + B] = 4, ++V), V > C)
    return null;
  const W = new Int32Array([0, d, -1, 0, -d, 0, 0, 0, 1]), R = new Path2D();
  for (i = 0; V && i <= g; i++) {
    let n = i * d;
    const m = n + I;
    for (; n < m && !Z[n]; )
      n++;
    if (n === m)
      continue;
    R.moveTo(n % d, i);
    const e = n;
    let N = Z[n];
    do {
      const w = W[N];
      do
        n += w;
      while (!Z[n]);
      const S = Z[n];
      S !== 5 && S !== 10 ? (N = S, Z[n] = 0) : (N = S & 51 * N >> 4, Z[n] &= N >> 2 | N << 2), R.lineTo(n % d, n / d | 0), Z[n] || --V;
    } while (e !== n);
    --i;
  }
  return c = null, Z = null, function(n) {
    n.save(), n.scale(1 / I, -1 / g), n.translate(0, -g), n.fill(R), n.beginPath(), n.restore();
  };
}
class Zi {
  constructor(I, g) {
    this.alphaIsShape = !1, this.fontSize = 0, this.fontSizeScale = 1, this.textMatrix = VB, this.textMatrixScale = 1, this.fontMatrix = S0, this.leading = 0, this.x = 0, this.y = 0, this.lineX = 0, this.lineY = 0, this.charSpacing = 0, this.wordSpacing = 0, this.textHScale = 1, this.textRenderingMode = Ng.FILL, this.textRise = 0, this.fillColor = "#000000", this.strokeColor = "#000000", this.patternFill = !1, this.patternStroke = !1, this.fillAlpha = 1, this.strokeAlpha = 1, this.lineWidth = 1, this.activeSMask = null, this.transferMaps = "none", this.startNewPathAndClipBox([0, 0, I, g]);
  }
  clone() {
    const I = Object.create(this);
    return I.clipBox = this.clipBox.slice(), I;
  }
  setCurrentPoint(I, g) {
    this.x = I, this.y = g;
  }
  updatePathMinMax(I, g, C) {
    [g, C] = iI.applyTransform([g, C], I), this.minX = Math.min(this.minX, g), this.minY = Math.min(this.minY, C), this.maxX = Math.max(this.maxX, g), this.maxY = Math.max(this.maxY, C);
  }
  updateRectMinMax(I, g) {
    const C = iI.applyTransform(g, I), A = iI.applyTransform(g.slice(2), I), d = iI.applyTransform([g[0], g[3]], I), Z = iI.applyTransform([g[2], g[1]], I);
    this.minX = Math.min(this.minX, C[0], A[0], d[0], Z[0]), this.minY = Math.min(this.minY, C[1], A[1], d[1], Z[1]), this.maxX = Math.max(this.maxX, C[0], A[0], d[0], Z[0]), this.maxY = Math.max(this.maxY, C[1], A[1], d[1], Z[1]);
  }
  updateScalingPathMinMax(I, g) {
    iI.scaleMinMax(I, g), this.minX = Math.min(this.minX, g[0]), this.minY = Math.min(this.minY, g[1]), this.maxX = Math.max(this.maxX, g[2]), this.maxY = Math.max(this.maxY, g[3]);
  }
  updateCurvePathMinMax(I, g, C, A, d, Z, i, B, F, s) {
    const c = iI.bezierBoundingBox(g, C, A, d, Z, i, B, F, s);
    s || this.updateRectMinMax(I, c);
  }
  getPathBoundingBox(I = wg.FILL, g = null) {
    const C = [this.minX, this.minY, this.maxX, this.maxY];
    if (I === wg.STROKE) {
      g || _I("Stroke bounding box must include transform.");
      const A = iI.singularValueDecompose2dScale(g), d = A[0] * this.lineWidth / 2, Z = A[1] * this.lineWidth / 2;
      C[0] -= d, C[1] -= Z, C[2] += d, C[3] += Z;
    }
    return C;
  }
  updateClipFromPath() {
    const I = iI.intersect(this.clipBox, this.getPathBoundingBox());
    this.startNewPathAndClipBox(I || [0, 0, 0, 0]);
  }
  isEmptyClip() {
    return this.minX === 1 / 0;
  }
  startNewPathAndClipBox(I) {
    this.clipBox = I, this.minX = 1 / 0, this.minY = 1 / 0, this.maxX = 0, this.maxY = 0;
  }
  getClippedPathBoundingBox(I = wg.FILL, g = null) {
    return iI.intersect(this.clipBox, this.getPathBoundingBox(I, g));
  }
}
function ii(l, I) {
  if (I instanceof ImageData) {
    l.putImageData(I, 0, 0);
    return;
  }
  const g = I.height, C = I.width, A = g % Kg, d = (g - A) / Kg, Z = A === 0 ? d : d + 1, i = l.createImageData(C, Kg);
  let B = 0, F;
  const s = I.data, c = i.data;
  let G, V, W, R;
  if (I.kind === Zd.GRAYSCALE_1BPP) {
    const U = s.byteLength, n = new Uint32Array(c.buffer, 0, c.byteLength >> 2), m = n.length, e = C + 7 >> 3, N = 4294967295, w = ug.isLittleEndian ? 4278190080 : 255;
    for (G = 0; G < Z; G++) {
      for (W = G < d ? Kg : A, F = 0, V = 0; V < W; V++) {
        const S = U - B;
        let Y = 0;
        const M = S > e ? C : S * 8 - 7, y = M & -8;
        let r = 0, z = 0;
        for (; Y < y; Y += 8)
          z = s[B++], n[F++] = z & 128 ? N : w, n[F++] = z & 64 ? N : w, n[F++] = z & 32 ? N : w, n[F++] = z & 16 ? N : w, n[F++] = z & 8 ? N : w, n[F++] = z & 4 ? N : w, n[F++] = z & 2 ? N : w, n[F++] = z & 1 ? N : w;
        for (; Y < M; Y++)
          r === 0 && (z = s[B++], r = 128), n[F++] = z & r ? N : w, r >>= 1;
      }
      for (; F < m; )
        n[F++] = 0;
      l.putImageData(i, 0, G * Kg);
    }
  } else if (I.kind === Zd.RGBA_32BPP) {
    for (V = 0, R = C * Kg * 4, G = 0; G < d; G++)
      c.set(s.subarray(B, B + R)), B += R, l.putImageData(i, 0, V), V += Kg;
    G < Z && (R = C * A * 4, c.set(s.subarray(B, B + R)), l.putImageData(i, 0, V));
  } else if (I.kind === Zd.RGB_24BPP)
    for (W = Kg, R = C * W, G = 0; G < Z; G++) {
      for (G >= d && (W = A, R = C * W), F = 0, V = R; V--; )
        c[F++] = s[B++], c[F++] = s[B++], c[F++] = s[B++], c[F++] = 255;
      l.putImageData(i, 0, G * Kg);
    }
  else
    throw new Error(`bad image kind: ${I.kind}`);
}
function Bi(l, I) {
  if (I.bitmap) {
    l.drawImage(I.bitmap, 0, 0);
    return;
  }
  const g = I.height, C = I.width, A = g % Kg, d = (g - A) / Kg, Z = A === 0 ? d : d + 1, i = l.createImageData(C, Kg);
  let B = 0;
  const F = I.data, s = i.data;
  for (let c = 0; c < Z; c++) {
    const G = c < d ? Kg : A;
    ({
      srcPos: B
    } = lc({
      src: F,
      srcPos: B,
      dest: s,
      width: C,
      height: G,
      nonBlackColor: 0
    })), l.putImageData(i, 0, c * Kg);
  }
}
function xA(l, I) {
  const g = ["strokeStyle", "fillStyle", "fillRule", "globalAlpha", "lineWidth", "lineCap", "lineJoin", "miterLimit", "globalCompositeOperation", "font", "filter"];
  for (const C of g)
    l[C] !== void 0 && (I[C] = l[C]);
  l.setLineDash !== void 0 && (I.setLineDash(l.getLineDash()), I.lineDashOffset = l.lineDashOffset);
}
function vl(l) {
  if (l.strokeStyle = l.fillStyle = "#000000", l.fillRule = "nonzero", l.globalAlpha = 1, l.lineWidth = 1, l.lineCap = "butt", l.lineJoin = "miter", l.miterLimit = 10, l.globalCompositeOperation = "source-over", l.font = "10px sans-serif", l.setLineDash !== void 0 && (l.setLineDash([]), l.lineDashOffset = 0), !Yg) {
    const {
      filter: I
    } = l;
    I !== "none" && I !== "" && (l.filter = "none");
  }
}
function Fi(l, I) {
  if (I)
    return !0;
  const g = iI.singularValueDecompose2dScale(l);
  g[0] = Math.fround(g[0]), g[1] = Math.fround(g[1]);
  const C = Math.fround((globalThis.devicePixelRatio || 1) * kA.PDF_TO_CSS_UNITS);
  return g[0] <= C && g[1] <= C;
}
const Fc = ["butt", "round", "square"], sc = ["miter", "round", "bevel"], cc = {}, si = {};
class yA {
  constructor(I, g, C, A, d, {
    optionalContentConfig: Z,
    markedContentStack: i = null
  }, B, F) {
    this.ctx = I, this.current = new Zi(this.ctx.canvas.width, this.ctx.canvas.height), this.stateStack = [], this.pendingClip = null, this.pendingEOFill = !1, this.res = null, this.xobjs = null, this.commonObjs = g, this.objs = C, this.canvasFactory = A, this.filterFactory = d, this.groupStack = [], this.processingType3 = null, this.baseTransform = null, this.baseTransformStack = [], this.groupLevel = 0, this.smaskStack = [], this.smaskCounter = 0, this.tempSMask = null, this.suspendedCtx = null, this.contentVisible = !0, this.markedContentStack = i || [], this.optionalContentConfig = Z, this.cachedCanvases = new ic(this.canvasFactory), this.cachedPatterns = /* @__PURE__ */ new Map(), this.annotationCanvasMap = B, this.viewportScale = 1, this.outputScaleX = 1, this.outputScaleY = 1, this.pageColors = F, this._cachedScaleForStroking = [-1, 0], this._cachedGetSinglePixelWidth = null, this._cachedBitmapsMap = /* @__PURE__ */ new Map();
  }
  getObject(I, g = null) {
    return typeof I == "string" ? I.startsWith("g_") ? this.commonObjs.get(I) : this.objs.get(I) : g;
  }
  beginDrawing({
    transform: I,
    viewport: g,
    transparency: C = !1,
    background: A = null
  }) {
    const d = this.ctx.canvas.width, Z = this.ctx.canvas.height, i = this.ctx.fillStyle;
    if (this.ctx.fillStyle = A || "#ffffff", this.ctx.fillRect(0, 0, d, Z), this.ctx.fillStyle = i, C) {
      const B = this.cachedCanvases.getCanvas("transparent", d, Z);
      this.compositeCtx = this.ctx, this.transparentCanvas = B.canvas, this.ctx = B.context, this.ctx.save(), this.ctx.transform(...$I(this.compositeCtx));
    }
    this.ctx.save(), vl(this.ctx), I && (this.ctx.transform(...I), this.outputScaleX = I[0], this.outputScaleY = I[0]), this.ctx.transform(...g.transform), this.viewportScale = g.scale, this.baseTransform = $I(this.ctx);
  }
  executeOperatorList(I, g, C, A) {
    const d = I.argsArray, Z = I.fnArray;
    let i = g || 0;
    const B = d.length;
    if (B === i)
      return i;
    const F = B - i > li && typeof C == "function", s = F ? Date.now() + dc : 0;
    let c = 0;
    const G = this.commonObjs, V = this.objs;
    let W;
    for (; ; ) {
      if (A !== void 0 && i === A.nextBreakPoint)
        return A.breakIt(i, C), i;
      if (W = Z[i], W !== WC.dependency)
        this[W].apply(this, d[i]);
      else
        for (const R of d[i]) {
          const U = R.startsWith("g_") ? G : V;
          if (!U.has(R))
            return U.get(R, C), i;
        }
      if (i++, i === B)
        return i;
      if (F && ++c > li) {
        if (Date.now() > s)
          return C(), i;
        c = 0;
      }
    }
  }
  #I() {
    for (; this.stateStack.length || this.inSMaskMode; )
      this.restore();
    this.current.activeSMask = null, this.ctx.restore(), this.transparentCanvas && (this.ctx = this.compositeCtx, this.ctx.save(), this.ctx.setTransform(1, 0, 0, 1, 0, 0), this.ctx.drawImage(this.transparentCanvas, 0, 0), this.ctx.restore(), this.transparentCanvas = null);
  }
  endDrawing() {
    this.#I(), this.cachedCanvases.clear(), this.cachedPatterns.clear();
    for (const I of this._cachedBitmapsMap.values()) {
      for (const g of I.values())
        typeof HTMLCanvasElement < "u" && g instanceof HTMLCanvasElement && (g.width = g.height = 0);
      I.clear();
    }
    this._cachedBitmapsMap.clear(), this.#g();
  }
  #g() {
    if (this.pageColors) {
      const I = this.filterFactory.addHCMFilter(this.pageColors.foreground, this.pageColors.background);
      if (I !== "none") {
        const g = this.ctx.filter;
        this.ctx.filter = I, this.ctx.drawImage(this.ctx.canvas, 0, 0), this.ctx.filter = g;
      }
    }
  }
  _scaleImage(I, g) {
    const C = I.width ?? I.displayWidth, A = I.height ?? I.displayHeight;
    let d = Math.max(Math.hypot(g[0], g[1]), 1), Z = Math.max(Math.hypot(g[2], g[3]), 1), i = C, B = A, F = "prescale1", s, c;
    for (; d > 2 && i > 1 || Z > 2 && B > 1; ) {
      let G = i, V = B;
      d > 2 && i > 1 && (G = i >= 16384 ? Math.floor(i / 2) - 1 || 1 : Math.ceil(i / 2), d /= i / G), Z > 2 && B > 1 && (V = B >= 16384 ? Math.floor(B / 2) - 1 || 1 : Math.ceil(B) / 2, Z /= B / V), s = this.cachedCanvases.getCanvas(F, G, V), c = s.context, c.clearRect(0, 0, G, V), c.drawImage(I, 0, 0, i, B, 0, 0, G, V), I = s.canvas, i = G, B = V, F = F === "prescale1" ? "prescale2" : "prescale1";
    }
    return {
      img: I,
      paintWidth: i,
      paintHeight: B
    };
  }
  _createMaskCanvas(I) {
    const g = this.ctx, {
      width: C,
      height: A
    } = I, d = this.current.fillColor, Z = this.current.patternFill, i = $I(g);
    let B, F, s, c;
    if ((I.bitmap || I.data) && I.count > 1) {
      const M = I.bitmap || I.data.buffer;
      F = JSON.stringify(Z ? i : [i.slice(0, 4), d]), B = this._cachedBitmapsMap.get(M), B || (B = /* @__PURE__ */ new Map(), this._cachedBitmapsMap.set(M, B));
      const y = B.get(F);
      if (y && !Z) {
        const r = Math.round(Math.min(i[0], i[2]) + i[4]), z = Math.round(Math.min(i[1], i[3]) + i[5]);
        return {
          canvas: y,
          offsetX: r,
          offsetY: z
        };
      }
      s = y;
    }
    s || (c = this.cachedCanvases.getCanvas("maskCanvas", C, A), Bi(c.context, I));
    let G = iI.transform(i, [1 / C, 0, 0, -1 / A, 0, 0]);
    G = iI.transform(G, [1, 0, 0, 1, 0, -A]);
    const [V, W, R, U] = iI.getAxialAlignedBoundingBox([0, 0, C, A], G), n = Math.round(R - V) || 1, m = Math.round(U - W) || 1, e = this.cachedCanvases.getCanvas("fillCanvas", n, m), N = e.context, w = V, S = W;
    N.translate(-w, -S), N.transform(...G), s || (s = this._scaleImage(c.canvas, aC(N)), s = s.img, B && Z && B.set(F, s)), N.imageSmoothingEnabled = Fi($I(N), I.interpolate), jl(N, s, 0, 0, s.width, s.height, 0, 0, C, A), N.globalCompositeOperation = "source-in";
    const Y = iI.transform(aC(N), [1, 0, 0, 1, -w, -S]);
    return N.fillStyle = Z ? d.getPattern(g, this, Y, wg.FILL) : d, N.fillRect(0, 0, C, A), B && !Z && (this.cachedCanvases.delete("fillCanvas"), B.set(F, e.canvas)), {
      canvas: e.canvas,
      offsetX: Math.round(w),
      offsetY: Math.round(S)
    };
  }
  setLineWidth(I) {
    I !== this.current.lineWidth && (this._cachedScaleForStroking[0] = -1), this.current.lineWidth = I, this.ctx.lineWidth = I;
  }
  setLineCap(I) {
    this.ctx.lineCap = Fc[I];
  }
  setLineJoin(I) {
    this.ctx.lineJoin = sc[I];
  }
  setMiterLimit(I) {
    this.ctx.miterLimit = I;
  }
  setDash(I, g) {
    const C = this.ctx;
    C.setLineDash !== void 0 && (C.setLineDash(I), C.lineDashOffset = g);
  }
  setRenderingIntent(I) {
  }
  setFlatness(I) {
  }
  setGState(I) {
    for (const [g, C] of I)
      switch (g) {
        case "LW":
          this.setLineWidth(C);
          break;
        case "LC":
          this.setLineCap(C);
          break;
        case "LJ":
          this.setLineJoin(C);
          break;
        case "ML":
          this.setMiterLimit(C);
          break;
        case "D":
          this.setDash(C[0], C[1]);
          break;
        case "RI":
          this.setRenderingIntent(C);
          break;
        case "FL":
          this.setFlatness(C);
          break;
        case "Font":
          this.setFont(C[0], C[1]);
          break;
        case "CA":
          this.current.strokeAlpha = C;
          break;
        case "ca":
          this.current.fillAlpha = C, this.ctx.globalAlpha = C;
          break;
        case "BM":
          this.ctx.globalCompositeOperation = C;
          break;
        case "SMask":
          this.current.activeSMask = C ? this.tempSMask : null, this.tempSMask = null, this.checkSMaskState();
          break;
        case "TR":
          this.ctx.filter = this.current.transferMaps = this.filterFactory.addFilter(C);
          break;
      }
  }
  get inSMaskMode() {
    return !!this.suspendedCtx;
  }
  checkSMaskState() {
    const I = this.inSMaskMode;
    this.current.activeSMask && !I ? this.beginSMaskMode() : !this.current.activeSMask && I && this.endSMaskMode();
  }
  beginSMaskMode() {
    if (this.inSMaskMode)
      throw new Error("beginSMaskMode called while already in smask mode");
    const I = this.ctx.canvas.width, g = this.ctx.canvas.height, C = "smaskGroupAt" + this.groupLevel, A = this.cachedCanvases.getCanvas(C, I, g);
    this.suspendedCtx = this.ctx, this.ctx = A.context;
    const d = this.ctx;
    d.setTransform(...$I(this.suspendedCtx)), xA(this.suspendedCtx, d), Zc(d, this.suspendedCtx), this.setGState([["BM", "source-over"], ["ca", 1], ["CA", 1]]);
  }
  endSMaskMode() {
    if (!this.inSMaskMode)
      throw new Error("endSMaskMode called while not in smask mode");
    this.ctx._removeMirroring(), xA(this.ctx, this.suspendedCtx), this.ctx = this.suspendedCtx, this.suspendedCtx = null;
  }
  compose(I) {
    if (!this.current.activeSMask)
      return;
    I ? (I[0] = Math.floor(I[0]), I[1] = Math.floor(I[1]), I[2] = Math.ceil(I[2]), I[3] = Math.ceil(I[3])) : I = [0, 0, this.ctx.canvas.width, this.ctx.canvas.height];
    const g = this.current.activeSMask, C = this.suspendedCtx;
    this.composeSMask(C, g, this.ctx, I), this.ctx.save(), this.ctx.setTransform(1, 0, 0, 1, 0, 0), this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height), this.ctx.restore();
  }
  composeSMask(I, g, C, A) {
    const d = A[0], Z = A[1], i = A[2] - d, B = A[3] - Z;
    i === 0 || B === 0 || (this.genericComposeSMask(g.context, C, i, B, g.subtype, g.backdrop, g.transferMap, d, Z, g.offsetX, g.offsetY), I.save(), I.globalAlpha = 1, I.globalCompositeOperation = "source-over", I.setTransform(1, 0, 0, 1, 0, 0), I.drawImage(C.canvas, 0, 0), I.restore());
  }
  genericComposeSMask(I, g, C, A, d, Z, i, B, F, s, c) {
    let G = I.canvas, V = B - s, W = F - c;
    if (Z) {
      const U = iI.makeHexColor(...Z);
      if (V < 0 || W < 0 || V + C > G.width || W + A > G.height) {
        const n = this.cachedCanvases.getCanvas("maskExtension", C, A), m = n.context;
        m.drawImage(G, -V, -W), m.globalCompositeOperation = "destination-atop", m.fillStyle = U, m.fillRect(0, 0, C, A), m.globalCompositeOperation = "source-over", G = n.canvas, V = W = 0;
      } else {
        I.save(), I.globalAlpha = 1, I.setTransform(1, 0, 0, 1, 0, 0);
        const n = new Path2D();
        n.rect(V, W, C, A), I.clip(n), I.globalCompositeOperation = "destination-atop", I.fillStyle = U, I.fillRect(V, W, C, A), I.restore();
      }
    }
    g.save(), g.globalAlpha = 1, g.setTransform(1, 0, 0, 1, 0, 0), d === "Alpha" && i ? g.filter = this.filterFactory.addAlphaFilter(i) : d === "Luminosity" && (g.filter = this.filterFactory.addLuminosityFilter(i));
    const R = new Path2D();
    R.rect(B, F, C, A), g.clip(R), g.globalCompositeOperation = "destination-in", g.drawImage(G, V, W, C, A, B, F, C, A), g.restore();
  }
  save() {
    this.inSMaskMode ? (xA(this.ctx, this.suspendedCtx), this.suspendedCtx.save()) : this.ctx.save();
    const I = this.current;
    this.stateStack.push(I), this.current = I.clone();
  }
  restore() {
    this.stateStack.length === 0 && this.inSMaskMode && this.endSMaskMode(), this.stateStack.length !== 0 && (this.current = this.stateStack.pop(), this.inSMaskMode ? (this.suspendedCtx.restore(), xA(this.suspendedCtx, this.ctx)) : this.ctx.restore(), this.checkSMaskState(), this.pendingClip = null, this._cachedScaleForStroking[0] = -1, this._cachedGetSinglePixelWidth = null);
  }
  transform(I, g, C, A, d, Z) {
    this.ctx.transform(I, g, C, A, d, Z), this._cachedScaleForStroking[0] = -1, this._cachedGetSinglePixelWidth = null;
  }
  constructPath(I, g, C) {
    const A = this.ctx, d = this.current;
    let Z = d.x, i = d.y, B, F;
    const s = $I(A), c = s[0] === 0 && s[3] === 0 || s[1] === 0 && s[2] === 0, G = c ? C.slice(0) : null;
    for (let V = 0, W = 0, R = I.length; V < R; V++)
      switch (I[V] | 0) {
        case WC.rectangle:
          Z = g[W++], i = g[W++];
          const U = g[W++], n = g[W++], m = Z + U, e = i + n;
          A.moveTo(Z, i), U === 0 || n === 0 ? A.lineTo(m, e) : (A.lineTo(m, i), A.lineTo(m, e), A.lineTo(Z, e)), c || d.updateRectMinMax(s, [Z, i, m, e]), A.closePath();
          break;
        case WC.moveTo:
          Z = g[W++], i = g[W++], A.moveTo(Z, i), c || d.updatePathMinMax(s, Z, i);
          break;
        case WC.lineTo:
          Z = g[W++], i = g[W++], A.lineTo(Z, i), c || d.updatePathMinMax(s, Z, i);
          break;
        case WC.curveTo:
          B = Z, F = i, Z = g[W + 4], i = g[W + 5], A.bezierCurveTo(g[W], g[W + 1], g[W + 2], g[W + 3], Z, i), d.updateCurvePathMinMax(s, B, F, g[W], g[W + 1], g[W + 2], g[W + 3], Z, i, G), W += 6;
          break;
        case WC.curveTo2:
          B = Z, F = i, A.bezierCurveTo(Z, i, g[W], g[W + 1], g[W + 2], g[W + 3]), d.updateCurvePathMinMax(s, B, F, Z, i, g[W], g[W + 1], g[W + 2], g[W + 3], G), Z = g[W + 2], i = g[W + 3], W += 4;
          break;
        case WC.curveTo3:
          B = Z, F = i, Z = g[W + 2], i = g[W + 3], A.bezierCurveTo(g[W], g[W + 1], Z, i, Z, i), d.updateCurvePathMinMax(s, B, F, g[W], g[W + 1], Z, i, Z, i, G), W += 4;
          break;
        case WC.closePath:
          A.closePath();
          break;
      }
    c && d.updateScalingPathMinMax(s, G), d.setCurrentPoint(Z, i);
  }
  closePath() {
    this.ctx.closePath();
  }
  stroke(I = !0) {
    const g = this.ctx, C = this.current.strokeColor;
    g.globalAlpha = this.current.strokeAlpha, this.contentVisible && (typeof C == "object" && C?.getPattern ? (g.save(), g.strokeStyle = C.getPattern(g, this, aC(g), wg.STROKE), this.rescaleAndStroke(!1), g.restore()) : this.rescaleAndStroke(!0)), I && this.consumePath(this.current.getClippedPathBoundingBox()), g.globalAlpha = this.current.fillAlpha;
  }
  closeStroke() {
    this.closePath(), this.stroke();
  }
  fill(I = !0) {
    const g = this.ctx, C = this.current.fillColor, A = this.current.patternFill;
    let d = !1;
    A && (g.save(), g.fillStyle = C.getPattern(g, this, aC(g), wg.FILL), d = !0);
    const Z = this.current.getClippedPathBoundingBox();
    this.contentVisible && Z !== null && (this.pendingEOFill ? (g.fill("evenodd"), this.pendingEOFill = !1) : g.fill()), d && g.restore(), I && this.consumePath(Z);
  }
  eoFill() {
    this.pendingEOFill = !0, this.fill();
  }
  fillStroke() {
    this.fill(!1), this.stroke(!1), this.consumePath();
  }
  eoFillStroke() {
    this.pendingEOFill = !0, this.fillStroke();
  }
  closeFillStroke() {
    this.closePath(), this.fillStroke();
  }
  closeEOFillStroke() {
    this.pendingEOFill = !0, this.closePath(), this.fillStroke();
  }
  endPath() {
    this.consumePath();
  }
  clip() {
    this.pendingClip = cc;
  }
  eoClip() {
    this.pendingClip = si;
  }
  beginText() {
    this.current.textMatrix = VB, this.current.textMatrixScale = 1, this.current.x = this.current.lineX = 0, this.current.y = this.current.lineY = 0;
  }
  endText() {
    const I = this.pendingTextPaths, g = this.ctx;
    if (I === void 0) {
      g.beginPath();
      return;
    }
    const C = new Path2D(), A = g.getTransform().invertSelf();
    for (const {
      transform: d,
      x: Z,
      y: i,
      fontSize: B,
      path: F
    } of I)
      C.addPath(F, new DOMMatrix(d).preMultiplySelf(A).translate(Z, i).scale(B, -B));
    g.clip(C), g.beginPath(), delete this.pendingTextPaths;
  }
  setCharSpacing(I) {
    this.current.charSpacing = I;
  }
  setWordSpacing(I) {
    this.current.wordSpacing = I;
  }
  setHScale(I) {
    this.current.textHScale = I / 100;
  }
  setLeading(I) {
    this.current.leading = -I;
  }
  setFont(I, g) {
    const C = this.commonObjs.get(I), A = this.current;
    if (!C)
      throw new Error(`Can't find font for ${I}`);
    if (A.fontMatrix = C.fontMatrix || S0, (A.fontMatrix[0] === 0 || A.fontMatrix[3] === 0) && DI("Invalid font matrix for font " + I), g < 0 ? (g = -g, A.fontDirection = -1) : A.fontDirection = 1, this.current.font = C, this.current.fontSize = g, C.isType3Font)
      return;
    const d = C.loadedName || "sans-serif", Z = C.systemFontInfo?.css || `"${d}", ${C.fallbackName}`;
    let i = "normal";
    C.black ? i = "900" : C.bold && (i = "bold");
    const B = C.italic ? "italic" : "normal";
    let F = g;
    g < Ci ? F = Ci : g > Ai && (F = Ai), this.current.fontSizeScale = g / F, this.ctx.font = `${B} ${i} ${F}px ${Z}`;
  }
  setTextRenderingMode(I) {
    this.current.textRenderingMode = I;
  }
  setTextRise(I) {
    this.current.textRise = I;
  }
  moveText(I, g) {
    this.current.x = this.current.lineX += I, this.current.y = this.current.lineY += g;
  }
  setLeadingMoveText(I, g) {
    this.setLeading(-g), this.moveText(I, g);
  }
  setTextMatrix(I, g, C, A, d, Z) {
    this.current.textMatrix = [I, g, C, A, d, Z], this.current.textMatrixScale = Math.hypot(I, g), this.current.x = this.current.lineX = 0, this.current.y = this.current.lineY = 0;
  }
  nextLine() {
    this.moveText(0, this.current.leading);
  }
  #C(I, g, C) {
    const A = new Path2D();
    return A.addPath(I, new DOMMatrix(C).invertSelf().multiplySelf(g)), A;
  }
  paintChar(I, g, C, A, d) {
    const Z = this.ctx, i = this.current, B = i.font, F = i.textRenderingMode, s = i.fontSize / i.fontSizeScale, c = F & Ng.FILL_STROKE_MASK, G = !!(F & Ng.ADD_TO_PATH_FLAG), V = i.patternFill && !B.missingFile, W = i.patternStroke && !B.missingFile;
    let R;
    if ((B.disableFontFace || G || V || W) && (R = B.getPathGenerator(this.commonObjs, I)), B.disableFontFace || V || W) {
      if (Z.save(), Z.translate(g, C), Z.scale(s, -s), c === Ng.FILL || c === Ng.FILL_STROKE)
        if (A) {
          const U = Z.getTransform();
          Z.setTransform(...A), Z.fill(this.#C(R, U, A));
        } else
          Z.fill(R);
      if (c === Ng.STROKE || c === Ng.FILL_STROKE)
        if (d) {
          const U = Z.getTransform();
          Z.setTransform(...d), Z.stroke(this.#C(R, U, d));
        } else
          Z.lineWidth /= s, Z.stroke(R);
      Z.restore();
    } else
      (c === Ng.FILL || c === Ng.FILL_STROKE) && Z.fillText(I, g, C), (c === Ng.STROKE || c === Ng.FILL_STROKE) && Z.strokeText(I, g, C);
    G && (this.pendingTextPaths ||= []).push({
      transform: $I(Z),
      x: g,
      y: C,
      fontSize: s,
      path: R
    });
  }
  get isFontSubpixelAAEnabled() {
    const {
      context: I
    } = this.cachedCanvases.getCanvas("isFontSubpixelAAEnabled", 10, 10);
    I.scale(1.5, 1), I.fillText("I", 0, 10);
    const g = I.getImageData(0, 0, 10, 10).data;
    let C = !1;
    for (let A = 3; A < g.length; A += 4)
      if (g[A] > 0 && g[A] < 255) {
        C = !0;
        break;
      }
    return uI(this, "isFontSubpixelAAEnabled", C);
  }
  showText(I) {
    const g = this.current, C = g.font;
    if (C.isType3Font)
      return this.showType3Text(I);
    const A = g.fontSize;
    if (A === 0)
      return;
    const d = this.ctx, Z = g.fontSizeScale, i = g.charSpacing, B = g.wordSpacing, F = g.fontDirection, s = g.textHScale * F, c = I.length, G = C.vertical, V = G ? 1 : -1, W = C.defaultVMetrics, R = A * g.fontMatrix[0], U = g.textRenderingMode === Ng.FILL && !C.disableFontFace && !g.patternFill;
    d.save(), d.transform(...g.textMatrix), d.translate(g.x, g.y + g.textRise), F > 0 ? d.scale(s, -1) : d.scale(s, 1);
    let n, m;
    if (g.patternFill) {
      d.save();
      const Y = g.fillColor.getPattern(d, this, aC(d), wg.FILL);
      n = $I(d), d.restore(), d.fillStyle = Y;
    }
    if (g.patternStroke) {
      d.save();
      const Y = g.strokeColor.getPattern(d, this, aC(d), wg.STROKE);
      m = $I(d), d.restore(), d.strokeStyle = Y;
    }
    let e = g.lineWidth;
    const N = g.textMatrixScale;
    if (N === 0 || e === 0) {
      const Y = g.textRenderingMode & Ng.FILL_STROKE_MASK;
      (Y === Ng.STROKE || Y === Ng.FILL_STROKE) && (e = this.getSinglePixelWidth());
    } else
      e /= N;
    if (Z !== 1 && (d.scale(Z, Z), e /= Z), d.lineWidth = e, C.isInvalidPDFjsFont) {
      const Y = [];
      let M = 0;
      for (const y of I)
        Y.push(y.unicode), M += y.width;
      d.fillText(Y.join(""), 0, 0), g.x += M * R * s, d.restore(), this.compose();
      return;
    }
    let w = 0, S;
    for (S = 0; S < c; ++S) {
      const Y = I[S];
      if (typeof Y == "number") {
        w += V * Y * A / 1e3;
        continue;
      }
      let M = !1;
      const y = (Y.isSpace ? B : 0) + i, r = Y.fontChar, z = Y.accent;
      let E, X, O = Y.width;
      if (G) {
        const p = Y.vmetric || W, T = -(Y.vmetric ? p[1] : O * 0.5) * R, UI = p[2] * R;
        O = p ? -p[0] : O, E = T / Z, X = (w + UI) / Z;
      } else
        E = w / Z, X = 0;
      if (C.remeasure && O > 0) {
        const p = d.measureText(r).width * 1e3 / A * Z;
        if (O < p && this.isFontSubpixelAAEnabled) {
          const T = O / p;
          M = !0, d.save(), d.scale(T, 1), E /= T;
        } else O !== p && (E += (O - p) / 2e3 * A / Z);
      }
      if (this.contentVisible && (Y.isInFont || C.missingFile)) {
        if (U && !z)
          d.fillText(r, E, X);
        else if (this.paintChar(r, E, X, n, m), z) {
          const p = E + A * z.offset.x / Z, T = X - A * z.offset.y / Z;
          this.paintChar(z.fontChar, p, T, n, m);
        }
      }
      const _ = G ? O * R - y * F : O * R + y * F;
      w += _, M && d.restore();
    }
    G ? g.y -= w : g.x += w * s, d.restore(), this.compose();
  }
  showType3Text(I) {
    const g = this.ctx, C = this.current, A = C.font, d = C.fontSize, Z = C.fontDirection, i = A.vertical ? 1 : -1, B = C.charSpacing, F = C.wordSpacing, s = C.textHScale * Z, c = C.fontMatrix || S0, G = I.length, V = C.textRenderingMode === Ng.INVISIBLE;
    let W, R, U, n;
    if (!(V || d === 0)) {
      for (this._cachedScaleForStroking[0] = -1, this._cachedGetSinglePixelWidth = null, g.save(), g.transform(...C.textMatrix), g.translate(C.x, C.y), g.scale(s, Z), W = 0; W < G; ++W) {
        if (R = I[W], typeof R == "number") {
          n = i * R * d / 1e3, this.ctx.translate(n, 0), C.x += n * s;
          continue;
        }
        const m = (R.isSpace ? F : 0) + B, e = A.charProcOperatorList[R.operatorListId];
        if (!e) {
          DI(`Type3 character "${R.operatorListId}" is not available.`);
          continue;
        }
        this.contentVisible && (this.processingType3 = R, this.save(), g.scale(d, d), g.transform(...c), this.executeOperatorList(e), this.restore()), U = iI.applyTransform([R.width, 0], c)[0] * d + m, g.translate(U, 0), C.x += U * s;
      }
      g.restore(), this.processingType3 = null;
    }
  }
  setCharWidth(I, g) {
  }
  setCharWidthAndBounds(I, g, C, A, d, Z) {
    this.ctx.rect(C, A, d - C, Z - A), this.ctx.clip(), this.endPath();
  }
  getColorN_Pattern(I) {
    let g;
    if (I[0] === "TilingPattern") {
      const C = I[1], A = this.baseTransform || $I(this.ctx), d = {
        createCanvasGraphics: (Z) => new yA(Z, this.commonObjs, this.objs, this.canvasFactory, this.filterFactory, {
          optionalContentConfig: this.optionalContentConfig,
          markedContentStack: this.markedContentStack
        })
      };
      g = new FZ(I, C, this.ctx, d, A);
    } else
      g = this._getPattern(I[1], I[2]);
    return g;
  }
  setStrokeColorN() {
    this.current.strokeColor = this.getColorN_Pattern(arguments), this.current.patternStroke = !0;
  }
  setFillColorN() {
    this.current.fillColor = this.getColorN_Pattern(arguments), this.current.patternFill = !0;
  }
  setStrokeRGBColor(I, g, C) {
    this.ctx.strokeStyle = this.current.strokeColor = iI.makeHexColor(I, g, C), this.current.patternStroke = !1;
  }
  setStrokeTransparent() {
    this.ctx.strokeStyle = this.current.strokeColor = "transparent", this.current.patternStroke = !1;
  }
  setFillRGBColor(I, g, C) {
    this.ctx.fillStyle = this.current.fillColor = iI.makeHexColor(I, g, C), this.current.patternFill = !1;
  }
  setFillTransparent() {
    this.ctx.fillStyle = this.current.fillColor = "transparent", this.current.patternFill = !1;
  }
  _getPattern(I, g = null) {
    let C;
    return this.cachedPatterns.has(I) ? C = this.cachedPatterns.get(I) : (C = Ac(this.getObject(I)), this.cachedPatterns.set(I, C)), g && (C.matrix = g), C;
  }
  shadingFill(I) {
    if (!this.contentVisible)
      return;
    const g = this.ctx;
    this.save();
    const C = this._getPattern(I);
    g.fillStyle = C.getPattern(g, this, aC(g), wg.SHADING);
    const A = aC(g);
    {
      const {
        width: d,
        height: Z
      } = g.canvas, [i, B, F, s] = iI.getAxialAlignedBoundingBox([0, 0, d, Z], A);
      this.ctx.fillRect(i, B, F - i, s - B);
    }
    this.compose(this.current.getClippedPathBoundingBox()), this.restore();
  }
  beginInlineImage() {
    _I("Should not call beginInlineImage");
  }
  beginImageData() {
    _I("Should not call beginImageData");
  }
  paintFormXObjectBegin(I, g) {
    if (this.contentVisible && (this.save(), this.baseTransformStack.push(this.baseTransform), I && this.transform(...I), this.baseTransform = $I(this.ctx), g)) {
      const C = g[2] - g[0], A = g[3] - g[1];
      this.ctx.rect(g[0], g[1], C, A), this.current.updateRectMinMax($I(this.ctx), g), this.clip(), this.endPath();
    }
  }
  paintFormXObjectEnd() {
    this.contentVisible && (this.restore(), this.baseTransform = this.baseTransformStack.pop());
  }
  beginGroup(I) {
    if (!this.contentVisible)
      return;
    this.save(), this.inSMaskMode && (this.endSMaskMode(), this.current.activeSMask = null);
    const g = this.ctx;
    I.isolated || Xd("TODO: Support non-isolated groups."), I.knockout && DI("Knockout groups not supported.");
    const C = $I(g);
    if (I.matrix && g.transform(...I.matrix), !I.bbox)
      throw new Error("Bounding box is required.");
    let A = iI.getAxialAlignedBoundingBox(I.bbox, $I(g));
    const d = [0, 0, g.canvas.width, g.canvas.height];
    A = iI.intersect(A, d) || [0, 0, 0, 0];
    const Z = Math.floor(A[0]), i = Math.floor(A[1]), B = Math.max(Math.ceil(A[2]) - Z, 1), F = Math.max(Math.ceil(A[3]) - i, 1);
    this.current.startNewPathAndClipBox([0, 0, B, F]);
    let s = "groupAt" + this.groupLevel;
    I.smask && (s += "_smask_" + this.smaskCounter++ % 2);
    const c = this.cachedCanvases.getCanvas(s, B, F), G = c.context;
    G.translate(-Z, -i), G.transform(...C), I.smask ? this.smaskStack.push({
      canvas: c.canvas,
      context: G,
      offsetX: Z,
      offsetY: i,
      subtype: I.smask.subtype,
      backdrop: I.smask.backdrop,
      transferMap: I.smask.transferMap || null,
      startTransformInverse: null
    }) : (g.setTransform(1, 0, 0, 1, 0, 0), g.translate(Z, i), g.save()), xA(g, G), this.ctx = G, this.setGState([["BM", "source-over"], ["ca", 1], ["CA", 1]]), this.groupStack.push(g), this.groupLevel++;
  }
  endGroup(I) {
    if (!this.contentVisible)
      return;
    this.groupLevel--;
    const g = this.ctx, C = this.groupStack.pop();
    if (this.ctx = C, this.ctx.imageSmoothingEnabled = !1, I.smask)
      this.tempSMask = this.smaskStack.pop(), this.restore();
    else {
      this.ctx.restore();
      const A = $I(this.ctx);
      this.restore(), this.ctx.save(), this.ctx.setTransform(...A);
      const d = iI.getAxialAlignedBoundingBox([0, 0, g.canvas.width, g.canvas.height], A);
      this.ctx.drawImage(g.canvas, 0, 0), this.ctx.restore(), this.compose(d);
    }
  }
  beginAnnotation(I, g, C, A, d) {
    if (this.#I(), vl(this.ctx), this.ctx.save(), this.save(), this.baseTransform && this.ctx.setTransform(...this.baseTransform), g) {
      const Z = g[2] - g[0], i = g[3] - g[1];
      if (d && this.annotationCanvasMap) {
        C = C.slice(), C[4] -= g[0], C[5] -= g[1], g = g.slice(), g[0] = g[1] = 0, g[2] = Z, g[3] = i;
        const [B, F] = iI.singularValueDecompose2dScale($I(this.ctx)), {
          viewportScale: s
        } = this, c = Math.ceil(Z * this.outputScaleX * s), G = Math.ceil(i * this.outputScaleY * s);
        this.annotationCanvas = this.canvasFactory.create(c, G);
        const {
          canvas: V,
          context: W
        } = this.annotationCanvas;
        this.annotationCanvasMap.set(I, V), this.annotationCanvas.savedCtx = this.ctx, this.ctx = W, this.ctx.save(), this.ctx.setTransform(B, 0, 0, -F, 0, i * F), vl(this.ctx);
      } else
        vl(this.ctx), this.endPath(), this.ctx.rect(g[0], g[1], Z, i), this.ctx.clip(), this.ctx.beginPath();
    }
    this.current = new Zi(this.ctx.canvas.width, this.ctx.canvas.height), this.transform(...C), this.transform(...A);
  }
  endAnnotation() {
    this.annotationCanvas && (this.ctx.restore(), this.#g(), this.ctx = this.annotationCanvas.savedCtx, delete this.annotationCanvas.savedCtx, delete this.annotationCanvas);
  }
  paintImageMaskXObject(I) {
    if (!this.contentVisible)
      return;
    const g = I.count;
    I = this.getObject(I.data, I), I.count = g;
    const C = this.ctx, A = this.processingType3;
    if (A && (A.compiled === void 0 && (A.compiled = Bc(I)), A.compiled)) {
      A.compiled(C);
      return;
    }
    const d = this._createMaskCanvas(I), Z = d.canvas;
    C.save(), C.setTransform(1, 0, 0, 1, 0, 0), C.drawImage(Z, d.offsetX, d.offsetY), C.restore(), this.compose();
  }
  paintImageMaskXObjectRepeat(I, g, C = 0, A = 0, d, Z) {
    if (!this.contentVisible)
      return;
    I = this.getObject(I.data, I);
    const i = this.ctx;
    i.save();
    const B = $I(i);
    i.transform(g, C, A, d, 0, 0);
    const F = this._createMaskCanvas(I);
    i.setTransform(1, 0, 0, 1, F.offsetX - B[4], F.offsetY - B[5]);
    for (let s = 0, c = Z.length; s < c; s += 2) {
      const G = iI.transform(B, [g, C, A, d, Z[s], Z[s + 1]]), [V, W] = iI.applyTransform([0, 0], G);
      i.drawImage(F.canvas, V, W);
    }
    i.restore(), this.compose();
  }
  paintImageMaskXObjectGroup(I) {
    if (!this.contentVisible)
      return;
    const g = this.ctx, C = this.current.fillColor, A = this.current.patternFill;
    for (const d of I) {
      const {
        data: Z,
        width: i,
        height: B,
        transform: F
      } = d, s = this.cachedCanvases.getCanvas("maskCanvas", i, B), c = s.context;
      c.save();
      const G = this.getObject(Z, d);
      Bi(c, G), c.globalCompositeOperation = "source-in", c.fillStyle = A ? C.getPattern(c, this, aC(g), wg.FILL) : C, c.fillRect(0, 0, i, B), c.restore(), g.save(), g.transform(...F), g.scale(1, -1), jl(g, s.canvas, 0, 0, i, B, 0, -1, 1, 1), g.restore();
    }
    this.compose();
  }
  paintImageXObject(I) {
    if (!this.contentVisible)
      return;
    const g = this.getObject(I);
    if (!g) {
      DI("Dependent image isn't ready yet");
      return;
    }
    this.paintInlineImageXObject(g);
  }
  paintImageXObjectRepeat(I, g, C, A) {
    if (!this.contentVisible)
      return;
    const d = this.getObject(I);
    if (!d) {
      DI("Dependent image isn't ready yet");
      return;
    }
    const Z = d.width, i = d.height, B = [];
    for (let F = 0, s = A.length; F < s; F += 2)
      B.push({
        transform: [g, 0, 0, C, A[F], A[F + 1]],
        x: 0,
        y: 0,
        w: Z,
        h: i
      });
    this.paintInlineImageXObjectGroup(d, B);
  }
  applyTransferMapsToCanvas(I) {
    return this.current.transferMaps !== "none" && (I.filter = this.current.transferMaps, I.drawImage(I.canvas, 0, 0), I.filter = "none"), I.canvas;
  }
  applyTransferMapsToBitmap(I) {
    if (this.current.transferMaps === "none")
      return I.bitmap;
    const {
      bitmap: g,
      width: C,
      height: A
    } = I, d = this.cachedCanvases.getCanvas("inlineImage", C, A), Z = d.context;
    return Z.filter = this.current.transferMaps, Z.drawImage(g, 0, 0), Z.filter = "none", d.canvas;
  }
  paintInlineImageXObject(I) {
    if (!this.contentVisible)
      return;
    const g = I.width, C = I.height, A = this.ctx;
    if (this.save(), !Yg) {
      const {
        filter: i
      } = A;
      i !== "none" && i !== "" && (A.filter = "none");
    }
    A.scale(1 / g, -1 / C);
    let d;
    if (I.bitmap)
      d = this.applyTransferMapsToBitmap(I);
    else if (typeof HTMLElement == "function" && I instanceof HTMLElement || !I.data)
      d = I;
    else {
      const B = this.cachedCanvases.getCanvas("inlineImage", g, C).context;
      ii(B, I), d = this.applyTransferMapsToCanvas(B);
    }
    const Z = this._scaleImage(d, aC(A));
    A.imageSmoothingEnabled = Fi($I(A), I.interpolate), jl(A, Z.img, 0, 0, Z.paintWidth, Z.paintHeight, 0, -C, g, C), this.compose(), this.restore();
  }
  paintInlineImageXObjectGroup(I, g) {
    if (!this.contentVisible)
      return;
    const C = this.ctx;
    let A;
    if (I.bitmap)
      A = I.bitmap;
    else {
      const d = I.width, Z = I.height, B = this.cachedCanvases.getCanvas("inlineImage", d, Z).context;
      ii(B, I), A = this.applyTransferMapsToCanvas(B);
    }
    for (const d of g)
      C.save(), C.transform(...d.transform), C.scale(1, -1), jl(C, A, d.x, d.y, d.w, d.h, 0, -1, 1, 1), C.restore();
    this.compose();
  }
  paintSolidColorImageMask() {
    this.contentVisible && (this.ctx.fillRect(0, 0, 1, 1), this.compose());
  }
  markPoint(I) {
  }
  markPointProps(I, g) {
  }
  beginMarkedContent(I) {
    this.markedContentStack.push({
      visible: !0
    });
  }
  beginMarkedContentProps(I, g) {
    I === "OC" ? this.markedContentStack.push({
      visible: this.optionalContentConfig.isVisible(g)
    }) : this.markedContentStack.push({
      visible: !0
    }), this.contentVisible = this.isContentVisible();
  }
  endMarkedContent() {
    this.markedContentStack.pop(), this.contentVisible = this.isContentVisible();
  }
  beginCompat() {
  }
  endCompat() {
  }
  consumePath(I) {
    const g = this.current.isEmptyClip();
    this.pendingClip && this.current.updateClipFromPath(), this.pendingClip || this.compose(I);
    const C = this.ctx;
    this.pendingClip && (g || (this.pendingClip === si ? C.clip("evenodd") : C.clip()), this.pendingClip = null), this.current.startNewPathAndClipBox(this.current.clipBox), C.beginPath();
  }
  getSinglePixelWidth() {
    if (!this._cachedGetSinglePixelWidth) {
      const I = $I(this.ctx);
      if (I[1] === 0 && I[2] === 0)
        this._cachedGetSinglePixelWidth = 1 / Math.min(Math.abs(I[0]), Math.abs(I[3]));
      else {
        const g = Math.abs(I[0] * I[3] - I[2] * I[1]), C = Math.hypot(I[0], I[2]), A = Math.hypot(I[1], I[3]);
        this._cachedGetSinglePixelWidth = Math.max(C, A) / g;
      }
    }
    return this._cachedGetSinglePixelWidth;
  }
  getScaleForStroking() {
    if (this._cachedScaleForStroking[0] === -1) {
      const {
        lineWidth: I
      } = this.current, {
        a: g,
        b: C,
        c: A,
        d
      } = this.ctx.getTransform();
      let Z, i;
      if (C === 0 && A === 0) {
        const B = Math.abs(g), F = Math.abs(d);
        if (B === F)
          if (I === 0)
            Z = i = 1 / B;
          else {
            const s = B * I;
            Z = i = s < 1 ? 1 / s : 1;
          }
        else if (I === 0)
          Z = 1 / B, i = 1 / F;
        else {
          const s = B * I, c = F * I;
          Z = s < 1 ? 1 / s : 1, i = c < 1 ? 1 / c : 1;
        }
      } else {
        const B = Math.abs(g * d - C * A), F = Math.hypot(g, C), s = Math.hypot(A, d);
        if (I === 0)
          Z = s / B, i = F / B;
        else {
          const c = I * B;
          Z = s > c ? s / c : 1, i = F > c ? F / c : 1;
        }
      }
      this._cachedScaleForStroking[0] = Z, this._cachedScaleForStroking[1] = i;
    }
    return this._cachedScaleForStroking;
  }
  rescaleAndStroke(I) {
    const {
      ctx: g
    } = this, {
      lineWidth: C
    } = this.current, [A, d] = this.getScaleForStroking();
    if (g.lineWidth = C || 1, A === 1 && d === 1) {
      g.stroke();
      return;
    }
    const Z = g.getLineDash();
    if (I && g.save(), g.scale(A, d), Z.length > 0) {
      const i = Math.max(A, d);
      g.setLineDash(Z.map((B) => B / i)), g.lineDashOffset /= i;
    }
    g.stroke(), I && g.restore();
  }
  isContentVisible() {
    for (let I = this.markedContentStack.length - 1; I >= 0; I--)
      if (!this.markedContentStack[I].visible)
        return !1;
    return !0;
  }
}
for (const l in WC)
  yA.prototype[l] !== void 0 && (yA.prototype[WC[l]] = yA.prototype[l]);
class bl {
  static #I = null;
  static #g = "";
  static get workerPort() {
    return this.#I;
  }
  static set workerPort(I) {
    if (!(typeof Worker < "u" && I instanceof Worker) && I !== null)
      throw new Error("Invalid `workerPort` type.");
    this.#I = I;
  }
  static get workerSrc() {
    return this.#g;
  }
  static set workerSrc(I) {
    if (typeof I != "string")
      throw new Error("Invalid `workerSrc` type.");
    this.#g = I;
  }
}
class Gc {
  #I;
  #g;
  constructor({
    parsedData: I,
    rawData: g
  }) {
    this.#I = I, this.#g = g;
  }
  getRaw() {
    return this.#g;
  }
  get(I) {
    return this.#I.get(I) ?? null;
  }
  getAll() {
    return IZ(this.#I);
  }
  has(I) {
    return this.#I.has(I);
  }
}
const JA = Symbol("INTERNAL");
class Vc {
  #I = !1;
  #g = !1;
  #C = !1;
  #A = !0;
  constructor(I, {
    name: g,
    intent: C,
    usage: A,
    rbGroups: d
  }) {
    this.#I = !!(I & Tg.DISPLAY), this.#g = !!(I & Tg.PRINT), this.name = g, this.intent = C, this.usage = A, this.rbGroups = d;
  }
  get visible() {
    if (this.#C)
      return this.#A;
    if (!this.#A)
      return !1;
    const {
      print: I,
      view: g
    } = this.usage;
    return this.#I ? g?.viewState !== "OFF" : this.#g ? I?.printState !== "OFF" : !0;
  }
  _setVisible(I, g, C = !1) {
    I !== JA && _I("Internal method `_setVisible` called."), this.#C = C, this.#A = g;
  }
}
class Wc {
  #I = null;
  #g = /* @__PURE__ */ new Map();
  #C = null;
  #A = null;
  constructor(I, g = Tg.DISPLAY) {
    if (this.renderingIntent = g, this.name = null, this.creator = null, I !== null) {
      this.name = I.name, this.creator = I.creator, this.#A = I.order;
      for (const C of I.groups)
        this.#g.set(C.id, new Vc(g, C));
      if (I.baseState === "OFF")
        for (const C of this.#g.values())
          C._setVisible(JA, !1);
      for (const C of I.on)
        this.#g.get(C)._setVisible(JA, !0);
      for (const C of I.off)
        this.#g.get(C)._setVisible(JA, !1);
      this.#C = this.getHash();
    }
  }
  #d(I) {
    const g = I.length;
    if (g < 2)
      return !0;
    const C = I[0];
    for (let A = 1; A < g; A++) {
      const d = I[A];
      let Z;
      if (Array.isArray(d))
        Z = this.#d(d);
      else if (this.#g.has(d))
        Z = this.#g.get(d).visible;
      else
        return DI(`Optional content group not found: ${d}`), !0;
      switch (C) {
        case "And":
          if (!Z)
            return !1;
          break;
        case "Or":
          if (Z)
            return !0;
          break;
        case "Not":
          return !Z;
        default:
          return !0;
      }
    }
    return C === "And";
  }
  isVisible(I) {
    if (this.#g.size === 0)
      return !0;
    if (!I)
      return Xd("Optional content group not defined."), !0;
    if (I.type === "OCG")
      return this.#g.has(I.id) ? this.#g.get(I.id).visible : (DI(`Optional content group not found: ${I.id}`), !0);
    if (I.type === "OCMD") {
      if (I.expression)
        return this.#d(I.expression);
      if (!I.policy || I.policy === "AnyOn") {
        for (const g of I.ids) {
          if (!this.#g.has(g))
            return DI(`Optional content group not found: ${g}`), !0;
          if (this.#g.get(g).visible)
            return !0;
        }
        return !1;
      } else if (I.policy === "AllOn") {
        for (const g of I.ids) {
          if (!this.#g.has(g))
            return DI(`Optional content group not found: ${g}`), !0;
          if (!this.#g.get(g).visible)
            return !1;
        }
        return !0;
      } else if (I.policy === "AnyOff") {
        for (const g of I.ids) {
          if (!this.#g.has(g))
            return DI(`Optional content group not found: ${g}`), !0;
          if (!this.#g.get(g).visible)
            return !0;
        }
        return !1;
      } else if (I.policy === "AllOff") {
        for (const g of I.ids) {
          if (!this.#g.has(g))
            return DI(`Optional content group not found: ${g}`), !0;
          if (this.#g.get(g).visible)
            return !1;
        }
        return !0;
      }
      return DI(`Unknown optional content policy ${I.policy}.`), !0;
    }
    return DI(`Unknown group type ${I.type}.`), !0;
  }
  setVisibility(I, g = !0, C = !0) {
    const A = this.#g.get(I);
    if (!A) {
      DI(`Optional content group not found: ${I}`);
      return;
    }
    if (C && g && A.rbGroups.length)
      for (const d of A.rbGroups)
        for (const Z of d)
          Z !== I && this.#g.get(Z)?._setVisible(JA, !1, !0);
    A._setVisible(JA, !!g, !0), this.#I = null;
  }
  setOCGState({
    state: I,
    preserveRB: g
  }) {
    let C;
    for (const A of I) {
      switch (A) {
        case "ON":
        case "OFF":
        case "Toggle":
          C = A;
          continue;
      }
      const d = this.#g.get(A);
      if (d)
        switch (C) {
          case "ON":
            this.setVisibility(A, !0, g);
            break;
          case "OFF":
            this.setVisibility(A, !1, g);
            break;
          case "Toggle":
            this.setVisibility(A, !d.visible, g);
            break;
        }
    }
    this.#I = null;
  }
  get hasInitialVisibility() {
    return this.#C === null || this.getHash() === this.#C;
  }
  getOrder() {
    return this.#g.size ? this.#A ? this.#A.slice() : [...this.#g.keys()] : null;
  }
  getGroups() {
    return this.#g.size > 0 ? IZ(this.#g) : null;
  }
  getGroup(I) {
    return this.#g.get(I) || null;
  }
  getHash() {
    if (this.#I !== null)
      return this.#I;
    const I = new RB();
    for (const [g, C] of this.#g)
      I.update(`${g}:${C.visible}`);
    return this.#I = I.hexdigest();
  }
}
class bc {
  constructor(I, {
    disableRange: g = !1,
    disableStream: C = !1
  }) {
    Fg(I, 'PDFDataTransportStream - missing required "pdfDataRangeTransport" argument.');
    const {
      length: A,
      initialData: d,
      progressiveDone: Z,
      contentDispositionFilename: i
    } = I;
    if (this._queuedChunks = [], this._progressiveDone = Z, this._contentDispositionFilename = i, d?.length > 0) {
      const B = d instanceof Uint8Array && d.byteLength === d.buffer.byteLength ? d.buffer : new Uint8Array(d).buffer;
      this._queuedChunks.push(B);
    }
    this._pdfDataRangeTransport = I, this._isStreamingSupported = !C, this._isRangeSupported = !g, this._contentLength = A, this._fullRequestReader = null, this._rangeReaders = [], I.addRangeListener((B, F) => {
      this._onReceiveData({
        begin: B,
        chunk: F
      });
    }), I.addProgressListener((B, F) => {
      this._onProgress({
        loaded: B,
        total: F
      });
    }), I.addProgressiveReadListener((B) => {
      this._onReceiveData({
        chunk: B
      });
    }), I.addProgressiveDoneListener(() => {
      this._onProgressiveDone();
    }), I.transportReady();
  }
  _onReceiveData({
    begin: I,
    chunk: g
  }) {
    const C = g instanceof Uint8Array && g.byteLength === g.buffer.byteLength ? g.buffer : new Uint8Array(g).buffer;
    if (I === void 0)
      this._fullRequestReader ? this._fullRequestReader._enqueue(C) : this._queuedChunks.push(C);
    else {
      const A = this._rangeReaders.some(function(d) {
        return d._begin !== I ? !1 : (d._enqueue(C), !0);
      });
      Fg(A, "_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.");
    }
  }
  get _progressiveDataLength() {
    return this._fullRequestReader?._loaded ?? 0;
  }
  _onProgress(I) {
    I.total === void 0 ? this._rangeReaders[0]?.onProgress?.({
      loaded: I.loaded
    }) : this._fullRequestReader?.onProgress?.({
      loaded: I.loaded,
      total: I.total
    });
  }
  _onProgressiveDone() {
    this._fullRequestReader?.progressiveDone(), this._progressiveDone = !0;
  }
  _removeRangeReader(I) {
    const g = this._rangeReaders.indexOf(I);
    g >= 0 && this._rangeReaders.splice(g, 1);
  }
  getFullReader() {
    Fg(!this._fullRequestReader, "PDFDataTransportStream.getFullReader can only be called once.");
    const I = this._queuedChunks;
    return this._queuedChunks = null, new Rc(this, I, this._progressiveDone, this._contentDispositionFilename);
  }
  getRangeReader(I, g) {
    if (g <= this._progressiveDataLength)
      return null;
    const C = new nc(this, I, g);
    return this._pdfDataRangeTransport.requestDataRange(I, g), this._rangeReaders.push(C), C;
  }
  cancelAllRequests(I) {
    this._fullRequestReader?.cancel(I);
    for (const g of this._rangeReaders.slice(0))
      g.cancel(I);
    this._pdfDataRangeTransport.abort();
  }
}
class Rc {
  constructor(I, g, C = !1, A = null) {
    this._stream = I, this._done = C || !1, this._filename = AZ(A) ? A : null, this._queuedChunks = g || [], this._loaded = 0;
    for (const d of this._queuedChunks)
      this._loaded += d.byteLength;
    this._requests = [], this._headersReady = Promise.resolve(), I._fullRequestReader = this, this.onProgress = null;
  }
  _enqueue(I) {
    this._done || (this._requests.length > 0 ? this._requests.shift().resolve({
      value: I,
      done: !1
    }) : this._queuedChunks.push(I), this._loaded += I.byteLength);
  }
  get headersReady() {
    return this._headersReady;
  }
  get filename() {
    return this._filename;
  }
  get isRangeSupported() {
    return this._stream._isRangeSupported;
  }
  get isStreamingSupported() {
    return this._stream._isStreamingSupported;
  }
  get contentLength() {
    return this._stream._contentLength;
  }
  async read() {
    if (this._queuedChunks.length > 0)
      return {
        value: this._queuedChunks.shift(),
        done: !1
      };
    if (this._done)
      return {
        value: void 0,
        done: !0
      };
    const I = Promise.withResolvers();
    return this._requests.push(I), I.promise;
  }
  cancel(I) {
    this._done = !0;
    for (const g of this._requests)
      g.resolve({
        value: void 0,
        done: !0
      });
    this._requests.length = 0;
  }
  progressiveDone() {
    this._done || (this._done = !0);
  }
}
class nc {
  constructor(I, g, C) {
    this._stream = I, this._begin = g, this._end = C, this._queuedChunk = null, this._requests = [], this._done = !1, this.onProgress = null;
  }
  _enqueue(I) {
    if (!this._done) {
      if (this._requests.length === 0)
        this._queuedChunk = I;
      else {
        this._requests.shift().resolve({
          value: I,
          done: !1
        });
        for (const C of this._requests)
          C.resolve({
            value: void 0,
            done: !0
          });
        this._requests.length = 0;
      }
      this._done = !0, this._stream._removeRangeReader(this);
    }
  }
  get isStreamingSupported() {
    return !1;
  }
  async read() {
    if (this._queuedChunk) {
      const g = this._queuedChunk;
      return this._queuedChunk = null, {
        value: g,
        done: !1
      };
    }
    if (this._done)
      return {
        value: void 0,
        done: !0
      };
    const I = Promise.withResolvers();
    return this._requests.push(I), I.promise;
  }
  cancel(I) {
    this._done = !0;
    for (const g of this._requests)
      g.resolve({
        value: void 0,
        done: !0
      });
    this._requests.length = 0, this._stream._removeRangeReader(this);
  }
}
function Uc(l) {
  let I = !0, g = C("filename\\*", "i").exec(l);
  if (g) {
    g = g[1];
    let s = i(g);
    return s = unescape(s), s = B(s), s = F(s), d(s);
  }
  if (g = Z(l), g) {
    const s = F(g);
    return d(s);
  }
  if (g = C("filename", "i").exec(l), g) {
    g = g[1];
    let s = i(g);
    return s = F(s), d(s);
  }
  function C(s, c) {
    return new RegExp("(?:^|;)\\s*" + s + '\\s*=\\s*([^";\\s][^;\\s]*|"(?:[^"\\\\]|\\\\"?)+"?)', c);
  }
  function A(s, c) {
    if (s) {
      if (!/^[\x00-\xFF]+$/.test(c))
        return c;
      try {
        const G = new TextDecoder(s, {
          fatal: !0
        }), V = Hd(c);
        c = G.decode(V), I = !1;
      } catch {
      }
    }
    return c;
  }
  function d(s) {
    return I && /[\x80-\xff]/.test(s) && (s = A("utf-8", s), I && (s = A("iso-8859-1", s))), s;
  }
  function Z(s) {
    const c = [];
    let G;
    const V = C("filename\\*((?!0\\d)\\d+)(\\*?)", "ig");
    for (; (G = V.exec(s)) !== null; ) {
      let [, R, U, n] = G;
      if (R = parseInt(R, 10), R in c) {
        if (R === 0)
          break;
        continue;
      }
      c[R] = [U, n];
    }
    const W = [];
    for (let R = 0; R < c.length && R in c; ++R) {
      let [U, n] = c[R];
      n = i(n), U && (n = unescape(n), R === 0 && (n = B(n))), W.push(n);
    }
    return W.join("");
  }
  function i(s) {
    if (s.startsWith('"')) {
      const c = s.slice(1).split('\\"');
      for (let G = 0; G < c.length; ++G) {
        const V = c[G].indexOf('"');
        V !== -1 && (c[G] = c[G].slice(0, V), c.length = G + 1), c[G] = c[G].replaceAll(/\\(.)/g, "$1");
      }
      s = c.join('"');
    }
    return s;
  }
  function B(s) {
    const c = s.indexOf("'");
    if (c === -1)
      return s;
    const G = s.slice(0, c), W = s.slice(c + 1).replace(/^[^']*'/, "");
    return A(G, W);
  }
  function F(s) {
    return !s.startsWith("=?") || /[\x00-\x19\x80-\xff]/.test(s) ? s : s.replaceAll(/=\?([\w-]*)\?([QqBb])\?((?:[^?]|\?(?!=))*)\?=/g, function(c, G, V, W) {
      if (V === "q" || V === "Q")
        return W = W.replaceAll("_", " "), W = W.replaceAll(/=([0-9a-fA-F]{2})/g, function(R, U) {
          return String.fromCharCode(parseInt(U, 16));
        }), A(G, W);
      try {
        W = atob(W);
      } catch {
      }
      return A(G, W);
    });
  }
  return "";
}
function tB(l, I) {
  const g = new Headers();
  if (!l || !I || typeof I != "object")
    return g;
  for (const C in I) {
    const A = I[C];
    A !== void 0 && g.append(C, A);
  }
  return g;
}
function rd(l) {
  try {
    return new URL(l).origin;
  } catch {
  }
  return null;
}
function NB({
  responseHeaders: l,
  isHttp: I,
  rangeChunkSize: g,
  disableRange: C
}) {
  const A = {
    allowRangeRequests: !1,
    suggestedLength: void 0
  }, d = parseInt(l.get("Content-Length"), 10);
  return !Number.isInteger(d) || (A.suggestedLength = d, d <= 2 * g) || C || !I || l.get("Accept-Ranges") !== "bytes" || (l.get("Content-Encoding") || "identity") !== "identity" || (A.allowRangeRequests = !0), A;
}
function wB(l) {
  const I = l.get("Content-Disposition");
  if (I) {
    let g = Uc(I);
    if (g.includes("%"))
      try {
        g = decodeURIComponent(g);
      } catch {
      }
    if (AZ(g))
      return g;
  }
  return null;
}
function zd(l, I) {
  return l === 404 || l === 0 && I.startsWith("file:") ? new Ql('Missing PDF "' + I + '".') : new bd(`Unexpected server response (${l}) while retrieving PDF "${I}".`, l);
}
function YB(l) {
  return l === 200 || l === 206;
}
function SB(l, I, g) {
  return {
    method: "GET",
    headers: l,
    signal: g.signal,
    mode: "cors",
    credentials: I ? "include" : "same-origin",
    redirect: "follow"
  };
}
function JB(l) {
  return l instanceof Uint8Array ? l.buffer : l instanceof ArrayBuffer ? l : (DI(`getArrayBuffer - unexpected data format: ${l}`), new Uint8Array(l).buffer);
}
class ci {
  _responseOrigin = null;
  constructor(I) {
    this.source = I, this.isHttp = /^https?:/i.test(I.url), this.headers = tB(this.isHttp, I.httpHeaders), this._fullRequestReader = null, this._rangeRequestReaders = [];
  }
  get _progressiveDataLength() {
    return this._fullRequestReader?._loaded ?? 0;
  }
  getFullReader() {
    return Fg(!this._fullRequestReader, "PDFFetchStream.getFullReader can only be called once."), this._fullRequestReader = new ac(this), this._fullRequestReader;
  }
  getRangeReader(I, g) {
    if (g <= this._progressiveDataLength)
      return null;
    const C = new oc(this, I, g);
    return this._rangeRequestReaders.push(C), C;
  }
  cancelAllRequests(I) {
    this._fullRequestReader?.cancel(I);
    for (const g of this._rangeRequestReaders.slice(0))
      g.cancel(I);
  }
}
class ac {
  constructor(I) {
    this._stream = I, this._reader = null, this._loaded = 0, this._filename = null;
    const g = I.source;
    this._withCredentials = g.withCredentials || !1, this._contentLength = g.length, this._headersCapability = Promise.withResolvers(), this._disableRange = g.disableRange || !1, this._rangeChunkSize = g.rangeChunkSize, !this._rangeChunkSize && !this._disableRange && (this._disableRange = !0), this._abortController = new AbortController(), this._isStreamingSupported = !g.disableStream, this._isRangeSupported = !g.disableRange;
    const C = new Headers(I.headers), A = g.url;
    fetch(A, SB(C, this._withCredentials, this._abortController)).then((d) => {
      if (I._responseOrigin = rd(d.url), !YB(d.status))
        throw zd(d.status, A);
      this._reader = d.body.getReader(), this._headersCapability.resolve();
      const Z = d.headers, {
        allowRangeRequests: i,
        suggestedLength: B
      } = NB({
        responseHeaders: Z,
        isHttp: I.isHttp,
        rangeChunkSize: this._rangeChunkSize,
        disableRange: this._disableRange
      });
      this._isRangeSupported = i, this._contentLength = B || this._contentLength, this._filename = wB(Z), !this._isStreamingSupported && this._isRangeSupported && this.cancel(new xC("Streaming is disabled."));
    }).catch(this._headersCapability.reject), this.onProgress = null;
  }
  get headersReady() {
    return this._headersCapability.promise;
  }
  get filename() {
    return this._filename;
  }
  get contentLength() {
    return this._contentLength;
  }
  get isRangeSupported() {
    return this._isRangeSupported;
  }
  get isStreamingSupported() {
    return this._isStreamingSupported;
  }
  async read() {
    await this._headersCapability.promise;
    const {
      value: I,
      done: g
    } = await this._reader.read();
    return g ? {
      value: I,
      done: g
    } : (this._loaded += I.byteLength, this.onProgress?.({
      loaded: this._loaded,
      total: this._contentLength
    }), {
      value: JB(I),
      done: !1
    });
  }
  cancel(I) {
    this._reader?.cancel(I), this._abortController.abort();
  }
}
class oc {
  constructor(I, g, C) {
    this._stream = I, this._reader = null, this._loaded = 0;
    const A = I.source;
    this._withCredentials = A.withCredentials || !1, this._readCapability = Promise.withResolvers(), this._isStreamingSupported = !A.disableStream, this._abortController = new AbortController();
    const d = new Headers(I.headers);
    d.append("Range", `bytes=${g}-${C - 1}`);
    const Z = A.url;
    fetch(Z, SB(d, this._withCredentials, this._abortController)).then((i) => {
      const B = rd(i.url);
      if (B !== I._responseOrigin)
        throw new Error(`Expected range response-origin "${B}" to match "${I._responseOrigin}".`);
      if (!YB(i.status))
        throw zd(i.status, Z);
      this._readCapability.resolve(), this._reader = i.body.getReader();
    }).catch(this._readCapability.reject), this.onProgress = null;
  }
  get isStreamingSupported() {
    return this._isStreamingSupported;
  }
  async read() {
    await this._readCapability.promise;
    const {
      value: I,
      done: g
    } = await this._reader.read();
    return g ? {
      value: I,
      done: g
    } : (this._loaded += I.byteLength, this.onProgress?.({
      loaded: this._loaded
    }), {
      value: JB(I),
      done: !1
    });
  }
  cancel(I) {
    this._reader?.cancel(I), this._abortController.abort();
  }
}
const G0 = 200, V0 = 206;
function ec(l) {
  const I = l.response;
  return typeof I != "string" ? I : Hd(I).buffer;
}
class mc {
  _responseOrigin = null;
  constructor({
    url: I,
    httpHeaders: g,
    withCredentials: C
  }) {
    this.url = I, this.isHttp = /^https?:/i.test(I), this.headers = tB(this.isHttp, g), this.withCredentials = C || !1, this.currXhrId = 0, this.pendingRequests = /* @__PURE__ */ Object.create(null);
  }
  request(I) {
    const g = new XMLHttpRequest(), C = this.currXhrId++, A = this.pendingRequests[C] = {
      xhr: g
    };
    g.open("GET", this.url), g.withCredentials = this.withCredentials;
    for (const [d, Z] of this.headers)
      g.setRequestHeader(d, Z);
    return this.isHttp && "begin" in I && "end" in I ? (g.setRequestHeader("Range", `bytes=${I.begin}-${I.end - 1}`), A.expectedStatus = V0) : A.expectedStatus = G0, g.responseType = "arraybuffer", Fg(I.onError, "Expected `onError` callback to be provided."), g.onerror = () => {
      I.onError(g.status);
    }, g.onreadystatechange = this.onStateChange.bind(this, C), g.onprogress = this.onProgress.bind(this, C), A.onHeadersReceived = I.onHeadersReceived, A.onDone = I.onDone, A.onError = I.onError, A.onProgress = I.onProgress, g.send(null), C;
  }
  onProgress(I, g) {
    const C = this.pendingRequests[I];
    C && C.onProgress?.(g);
  }
  onStateChange(I, g) {
    const C = this.pendingRequests[I];
    if (!C)
      return;
    const A = C.xhr;
    if (A.readyState >= 2 && C.onHeadersReceived && (C.onHeadersReceived(), delete C.onHeadersReceived), A.readyState !== 4 || !(I in this.pendingRequests))
      return;
    if (delete this.pendingRequests[I], A.status === 0 && this.isHttp) {
      C.onError(A.status);
      return;
    }
    const d = A.status || G0;
    if (!(d === G0 && C.expectedStatus === V0) && d !== C.expectedStatus) {
      C.onError(A.status);
      return;
    }
    const i = ec(A);
    if (d === V0) {
      const B = A.getResponseHeader("Content-Range"), F = /bytes (\d+)-(\d+)\/(\d+)/.exec(B);
      F ? C.onDone({
        begin: parseInt(F[1], 10),
        chunk: i
      }) : (DI('Missing or invalid "Content-Range" header.'), C.onError(0));
    } else i ? C.onDone({
      begin: 0,
      chunk: i
    }) : C.onError(A.status);
  }
  getRequestXhr(I) {
    return this.pendingRequests[I].xhr;
  }
  isPendingRequest(I) {
    return I in this.pendingRequests;
  }
  abortRequest(I) {
    const g = this.pendingRequests[I].xhr;
    delete this.pendingRequests[I], g.abort();
  }
}
class hc {
  constructor(I) {
    this._source = I, this._manager = new mc(I), this._rangeChunkSize = I.rangeChunkSize, this._fullRequestReader = null, this._rangeRequestReaders = [];
  }
  _onRangeRequestReaderClosed(I) {
    const g = this._rangeRequestReaders.indexOf(I);
    g >= 0 && this._rangeRequestReaders.splice(g, 1);
  }
  getFullReader() {
    return Fg(!this._fullRequestReader, "PDFNetworkStream.getFullReader can only be called once."), this._fullRequestReader = new Qc(this._manager, this._source), this._fullRequestReader;
  }
  getRangeReader(I, g) {
    const C = new tc(this._manager, I, g);
    return C.onClosed = this._onRangeRequestReaderClosed.bind(this), this._rangeRequestReaders.push(C), C;
  }
  cancelAllRequests(I) {
    this._fullRequestReader?.cancel(I);
    for (const g of this._rangeRequestReaders.slice(0))
      g.cancel(I);
  }
}
class Qc {
  constructor(I, g) {
    this._manager = I, this._url = g.url, this._fullRequestId = I.request({
      onHeadersReceived: this._onHeadersReceived.bind(this),
      onDone: this._onDone.bind(this),
      onError: this._onError.bind(this),
      onProgress: this._onProgress.bind(this)
    }), this._headersCapability = Promise.withResolvers(), this._disableRange = g.disableRange || !1, this._contentLength = g.length, this._rangeChunkSize = g.rangeChunkSize, !this._rangeChunkSize && !this._disableRange && (this._disableRange = !0), this._isStreamingSupported = !1, this._isRangeSupported = !1, this._cachedChunks = [], this._requests = [], this._done = !1, this._storedError = void 0, this._filename = null, this.onProgress = null;
  }
  _onHeadersReceived() {
    const I = this._fullRequestId, g = this._manager.getRequestXhr(I);
    this._manager._responseOrigin = rd(g.responseURL);
    const C = g.getAllResponseHeaders(), A = new Headers(C ? C.trimStart().replace(/[^\S ]+$/, "").split(/[\r\n]+/).map((i) => {
      const [B, ...F] = i.split(": ");
      return [B, F.join(": ")];
    }) : []), {
      allowRangeRequests: d,
      suggestedLength: Z
    } = NB({
      responseHeaders: A,
      isHttp: this._manager.isHttp,
      rangeChunkSize: this._rangeChunkSize,
      disableRange: this._disableRange
    });
    d && (this._isRangeSupported = !0), this._contentLength = Z || this._contentLength, this._filename = wB(A), this._isRangeSupported && this._manager.abortRequest(I), this._headersCapability.resolve();
  }
  _onDone(I) {
    if (I && (this._requests.length > 0 ? this._requests.shift().resolve({
      value: I.chunk,
      done: !1
    }) : this._cachedChunks.push(I.chunk)), this._done = !0, !(this._cachedChunks.length > 0)) {
      for (const g of this._requests)
        g.resolve({
          value: void 0,
          done: !0
        });
      this._requests.length = 0;
    }
  }
  _onError(I) {
    this._storedError = zd(I, this._url), this._headersCapability.reject(this._storedError);
    for (const g of this._requests)
      g.reject(this._storedError);
    this._requests.length = 0, this._cachedChunks.length = 0;
  }
  _onProgress(I) {
    this.onProgress?.({
      loaded: I.loaded,
      total: I.lengthComputable ? I.total : this._contentLength
    });
  }
  get filename() {
    return this._filename;
  }
  get isRangeSupported() {
    return this._isRangeSupported;
  }
  get isStreamingSupported() {
    return this._isStreamingSupported;
  }
  get contentLength() {
    return this._contentLength;
  }
  get headersReady() {
    return this._headersCapability.promise;
  }
  async read() {
    if (await this._headersCapability.promise, this._storedError)
      throw this._storedError;
    if (this._cachedChunks.length > 0)
      return {
        value: this._cachedChunks.shift(),
        done: !1
      };
    if (this._done)
      return {
        value: void 0,
        done: !0
      };
    const I = Promise.withResolvers();
    return this._requests.push(I), I.promise;
  }
  cancel(I) {
    this._done = !0, this._headersCapability.reject(I);
    for (const g of this._requests)
      g.resolve({
        value: void 0,
        done: !0
      });
    this._requests.length = 0, this._manager.isPendingRequest(this._fullRequestId) && this._manager.abortRequest(this._fullRequestId), this._fullRequestReader = null;
  }
}
class tc {
  constructor(I, g, C) {
    this._manager = I, this._url = I.url, this._requestId = I.request({
      begin: g,
      end: C,
      onHeadersReceived: this._onHeadersReceived.bind(this),
      onDone: this._onDone.bind(this),
      onError: this._onError.bind(this),
      onProgress: this._onProgress.bind(this)
    }), this._requests = [], this._queuedChunk = null, this._done = !1, this._storedError = void 0, this.onProgress = null, this.onClosed = null;
  }
  _onHeadersReceived() {
    const I = rd(this._manager.getRequestXhr(this._requestId)?.responseURL);
    I !== this._manager._responseOrigin && (this._storedError = new Error(`Expected range response-origin "${I}" to match "${this._manager._responseOrigin}".`), this._onError(0));
  }
  _close() {
    this.onClosed?.(this);
  }
  _onDone(I) {
    const g = I.chunk;
    this._requests.length > 0 ? this._requests.shift().resolve({
      value: g,
      done: !1
    }) : this._queuedChunk = g, this._done = !0;
    for (const C of this._requests)
      C.resolve({
        value: void 0,
        done: !0
      });
    this._requests.length = 0, this._close();
  }
  _onError(I) {
    this._storedError ??= zd(I, this._url);
    for (const g of this._requests)
      g.reject(this._storedError);
    this._requests.length = 0, this._queuedChunk = null;
  }
  _onProgress(I) {
    this.isStreamingSupported || this.onProgress?.({
      loaded: I.loaded
    });
  }
  get isStreamingSupported() {
    return !1;
  }
  async read() {
    if (this._storedError)
      throw this._storedError;
    if (this._queuedChunk !== null) {
      const g = this._queuedChunk;
      return this._queuedChunk = null, {
        value: g,
        done: !1
      };
    }
    if (this._done)
      return {
        value: void 0,
        done: !0
      };
    const I = Promise.withResolvers();
    return this._requests.push(I), I.promise;
  }
  cancel(I) {
    this._done = !0;
    for (const g of this._requests)
      g.resolve({
        value: void 0,
        done: !0
      });
    this._requests.length = 0, this._manager.isPendingRequest(this._requestId) && this._manager.abortRequest(this._requestId), this._close();
  }
}
const Nc = /^[a-z][a-z0-9\-+.]+:/i;
function wc(l) {
  if (Nc.test(l))
    return new URL(l);
  const I = process.getBuiltinModule("url");
  return new URL(I.pathToFileURL(l));
}
class Yc {
  constructor(I) {
    this.source = I, this.url = wc(I.url), Fg(this.url.protocol === "file:", "PDFNodeStream only supports file:// URLs."), this._fullRequestReader = null, this._rangeRequestReaders = [];
  }
  get _progressiveDataLength() {
    return this._fullRequestReader?._loaded ?? 0;
  }
  getFullReader() {
    return Fg(!this._fullRequestReader, "PDFNodeStream.getFullReader can only be called once."), this._fullRequestReader = new Sc(this), this._fullRequestReader;
  }
  getRangeReader(I, g) {
    if (g <= this._progressiveDataLength)
      return null;
    const C = new Jc(this, I, g);
    return this._rangeRequestReaders.push(C), C;
  }
  cancelAllRequests(I) {
    this._fullRequestReader?.cancel(I);
    for (const g of this._rangeRequestReaders.slice(0))
      g.cancel(I);
  }
}
class Sc {
  constructor(I) {
    this._url = I.url, this._done = !1, this._storedError = null, this.onProgress = null;
    const g = I.source;
    this._contentLength = g.length, this._loaded = 0, this._filename = null, this._disableRange = g.disableRange || !1, this._rangeChunkSize = g.rangeChunkSize, !this._rangeChunkSize && !this._disableRange && (this._disableRange = !0), this._isStreamingSupported = !g.disableStream, this._isRangeSupported = !g.disableRange, this._readableStream = null, this._readCapability = Promise.withResolvers(), this._headersCapability = Promise.withResolvers();
    const C = process.getBuiltinModule("fs");
    C.promises.lstat(this._url).then((A) => {
      this._contentLength = A.size, this._setReadableStream(C.createReadStream(this._url)), this._headersCapability.resolve();
    }, (A) => {
      A.code === "ENOENT" && (A = new Ql(`Missing PDF "${this._url}".`)), this._storedError = A, this._headersCapability.reject(A);
    });
  }
  get headersReady() {
    return this._headersCapability.promise;
  }
  get filename() {
    return this._filename;
  }
  get contentLength() {
    return this._contentLength;
  }
  get isRangeSupported() {
    return this._isRangeSupported;
  }
  get isStreamingSupported() {
    return this._isStreamingSupported;
  }
  async read() {
    if (await this._readCapability.promise, this._done)
      return {
        value: void 0,
        done: !0
      };
    if (this._storedError)
      throw this._storedError;
    const I = this._readableStream.read();
    return I === null ? (this._readCapability = Promise.withResolvers(), this.read()) : (this._loaded += I.length, this.onProgress?.({
      loaded: this._loaded,
      total: this._contentLength
    }), {
      value: new Uint8Array(I).buffer,
      done: !1
    });
  }
  cancel(I) {
    if (!this._readableStream) {
      this._error(I);
      return;
    }
    this._readableStream.destroy(I);
  }
  _error(I) {
    this._storedError = I, this._readCapability.resolve();
  }
  _setReadableStream(I) {
    this._readableStream = I, I.on("readable", () => {
      this._readCapability.resolve();
    }), I.on("end", () => {
      I.destroy(), this._done = !0, this._readCapability.resolve();
    }), I.on("error", (g) => {
      this._error(g);
    }), !this._isStreamingSupported && this._isRangeSupported && this._error(new xC("streaming is disabled")), this._storedError && this._readableStream.destroy(this._storedError);
  }
}
class Jc {
  constructor(I, g, C) {
    this._url = I.url, this._done = !1, this._storedError = null, this.onProgress = null, this._loaded = 0, this._readableStream = null, this._readCapability = Promise.withResolvers();
    const A = I.source;
    this._isStreamingSupported = !A.disableStream;
    const d = process.getBuiltinModule("fs");
    this._setReadableStream(d.createReadStream(this._url, {
      start: g,
      end: C - 1
    }));
  }
  get isStreamingSupported() {
    return this._isStreamingSupported;
  }
  async read() {
    if (await this._readCapability.promise, this._done)
      return {
        value: void 0,
        done: !0
      };
    if (this._storedError)
      throw this._storedError;
    const I = this._readableStream.read();
    return I === null ? (this._readCapability = Promise.withResolvers(), this.read()) : (this._loaded += I.length, this.onProgress?.({
      loaded: this._loaded
    }), {
      value: new Uint8Array(I).buffer,
      done: !1
    });
  }
  cancel(I) {
    if (!this._readableStream) {
      this._error(I);
      return;
    }
    this._readableStream.destroy(I);
  }
  _error(I) {
    this._storedError = I, this._readCapability.resolve();
  }
  _setReadableStream(I) {
    this._readableStream = I, I.on("readable", () => {
      this._readCapability.resolve();
    }), I.on("end", () => {
      I.destroy(), this._done = !0, this._readCapability.resolve();
    }), I.on("error", (g) => {
      this._error(g);
    }), this._storedError && this._readableStream.destroy(this._storedError);
  }
}
const Dc = 1e5, pg = 30, uc = 0.8;
class Dg {
  #I = Promise.withResolvers();
  #g = null;
  #C = !1;
  #A = !!globalThis.FontInspector?.enabled;
  #d = null;
  #l = null;
  #B = 0;
  #i = 0;
  #s = null;
  #F = null;
  #G = 0;
  #c = 0;
  #V = /* @__PURE__ */ Object.create(null);
  #Z = [];
  #W = null;
  #R = [];
  #b = /* @__PURE__ */ new WeakMap();
  #n = null;
  static #o = /* @__PURE__ */ new Map();
  static #U = /* @__PURE__ */ new Map();
  static #e = /* @__PURE__ */ new WeakMap();
  static #h = null;
  static #t = /* @__PURE__ */ new Set();
  constructor({
    textContentSource: I,
    container: g,
    viewport: C
  }) {
    if (I instanceof ReadableStream)
      this.#W = I;
    else if (typeof I == "object")
      this.#W = new ReadableStream({
        start(B) {
          B.enqueue(I), B.close();
        }
      });
    else
      throw new Error('No "textContentSource" parameter specified.');
    this.#g = this.#F = g, this.#c = C.scale * (globalThis.devicePixelRatio || 1), this.#G = C.rotation, this.#l = {
      div: null,
      properties: null,
      ctx: null
    };
    const {
      pageWidth: A,
      pageHeight: d,
      pageX: Z,
      pageY: i
    } = C.rawDims;
    this.#n = [1, 0, 0, -1, -Z, i + d], this.#i = A, this.#B = d, Dg.#D(), cA(g, C), this.#I.promise.finally(() => {
      Dg.#t.delete(this), this.#l = null, this.#V = null;
    }).catch(() => {
    });
  }
  static get fontFamilyMap() {
    const {
      isWindows: I,
      isFirefox: g
    } = ug.platform;
    return uI(this, "fontFamilyMap", /* @__PURE__ */ new Map([["sans-serif", `${I && g ? "Calibri, " : ""}sans-serif`], ["monospace", `${I && g ? "Lucida Console, " : ""}monospace`]]));
  }
  render() {
    const I = () => {
      this.#s.read().then(({
        value: g,
        done: C
      }) => {
        if (C) {
          this.#I.resolve();
          return;
        }
        this.#d ??= g.lang, Object.assign(this.#V, g.styles), this.#w(g.items), I();
      }, this.#I.reject);
    };
    return this.#s = this.#W.getReader(), Dg.#t.add(this), I(), this.#I.promise;
  }
  update({
    viewport: I,
    onBefore: g = null
  }) {
    const C = I.scale * (globalThis.devicePixelRatio || 1), A = I.rotation;
    if (A !== this.#G && (g?.(), this.#G = A, cA(this.#F, {
      rotation: A
    })), C !== this.#c) {
      g?.(), this.#c = C;
      const d = {
        div: null,
        properties: null,
        ctx: Dg.#Y(this.#d)
      };
      for (const Z of this.#R)
        d.properties = this.#b.get(Z), d.div = Z, this.#m(d);
    }
  }
  cancel() {
    const I = new xC("TextLayer task cancelled.");
    this.#s?.cancel(I).catch(() => {
    }), this.#s = null, this.#I.reject(I);
  }
  get textDivs() {
    return this.#R;
  }
  get textContentItemsStr() {
    return this.#Z;
  }
  #w(I) {
    if (this.#C)
      return;
    this.#l.ctx ??= Dg.#Y(this.#d);
    const g = this.#R, C = this.#Z;
    for (const A of I) {
      if (g.length > Dc) {
        DI("Ignoring additional textDivs for performance reasons."), this.#C = !0;
        return;
      }
      if (A.str === void 0) {
        if (A.type === "beginMarkedContentProps" || A.type === "beginMarkedContent") {
          const d = this.#g;
          this.#g = document.createElement("span"), this.#g.classList.add("markedContent"), A.id !== null && this.#g.setAttribute("id", `${A.id}`), d.append(this.#g);
        } else A.type === "endMarkedContent" && (this.#g = this.#g.parentNode);
        continue;
      }
      C.push(A.str), this.#S(A);
    }
  }
  #S(I) {
    const g = document.createElement("span"), C = {
      angle: 0,
      canvasWidth: 0,
      hasText: I.str !== "",
      hasEOL: I.hasEOL,
      fontSize: 0
    };
    this.#R.push(g);
    const A = iI.transform(this.#n, I.transform);
    let d = Math.atan2(A[1], A[0]);
    const Z = this.#V[I.fontName];
    Z.vertical && (d += Math.PI / 2);
    let i = this.#A && Z.fontSubstitution || Z.fontFamily;
    i = Dg.fontFamilyMap.get(i) || i;
    const B = Math.hypot(A[2], A[3]), F = B * Dg.#y(i, this.#d);
    let s, c;
    d === 0 ? (s = A[4], c = A[5] - F) : (s = A[4] + F * Math.sin(d), c = A[5] - F * Math.cos(d));
    const G = "calc(var(--scale-factor)*", V = g.style;
    this.#g === this.#F ? (V.left = `${(100 * s / this.#i).toFixed(2)}%`, V.top = `${(100 * c / this.#B).toFixed(2)}%`) : (V.left = `${G}${s.toFixed(2)}px)`, V.top = `${G}${c.toFixed(2)}px)`), V.fontSize = `${G}${(Dg.#h * B).toFixed(2)}px)`, V.fontFamily = i, C.fontSize = B, g.setAttribute("role", "presentation"), g.textContent = I.str, g.dir = I.dir, this.#A && (g.dataset.fontName = Z.fontSubstitutionLoadedName || I.fontName), d !== 0 && (C.angle = d * (180 / Math.PI));
    let W = !1;
    if (I.str.length > 1)
      W = !0;
    else if (I.str !== " " && I.transform[0] !== I.transform[3]) {
      const R = Math.abs(I.transform[0]), U = Math.abs(I.transform[3]);
      R !== U && Math.max(R, U) / Math.min(R, U) > 1.5 && (W = !0);
    }
    if (W && (C.canvasWidth = Z.vertical ? I.height : I.width), this.#b.set(g, C), this.#l.div = g, this.#l.properties = C, this.#m(this.#l), C.hasText && this.#g.append(g), C.hasEOL) {
      const R = document.createElement("br");
      R.setAttribute("role", "presentation"), this.#g.append(R);
    }
  }
  #m(I) {
    const {
      div: g,
      properties: C,
      ctx: A
    } = I, {
      style: d
    } = g;
    let Z = "";
    if (Dg.#h > 1 && (Z = `scale(${1 / Dg.#h})`), C.canvasWidth !== 0 && C.hasText) {
      const {
        fontFamily: i
      } = d, {
        canvasWidth: B,
        fontSize: F
      } = C;
      Dg.#N(A, F * this.#c, i);
      const {
        width: s
      } = A.measureText(g.textContent);
      s > 0 && (Z = `scaleX(${B * this.#c / s}) ${Z}`);
    }
    C.angle !== 0 && (Z = `rotate(${C.angle}deg) ${Z}`), Z.length > 0 && (d.transform = Z);
  }
  static cleanup() {
    if (!(this.#t.size > 0)) {
      this.#o.clear();
      for (const {
        canvas: I
      } of this.#U.values())
        I.remove();
      this.#U.clear();
    }
  }
  static #Y(I = null) {
    let g = this.#U.get(I ||= "");
    if (!g) {
      const C = document.createElement("canvas");
      C.className = "hiddenCanvasElement", C.lang = I, document.body.append(C), g = C.getContext("2d", {
        alpha: !1,
        willReadFrequently: !0
      }), this.#U.set(I, g), this.#e.set(g, {
        size: 0,
        family: ""
      });
    }
    return g;
  }
  static #N(I, g, C) {
    const A = this.#e.get(I);
    g === A.size && C === A.family || (I.font = `${g}px ${C}`, A.size = g, A.family = C);
  }
  static #D() {
    if (this.#h !== null)
      return;
    const I = document.createElement("div");
    I.style.opacity = 0, I.style.lineHeight = 1, I.style.fontSize = "1px", I.style.position = "absolute", I.textContent = "X", document.body.append(I), this.#h = I.getBoundingClientRect().height, I.remove();
  }
  static #y(I, g) {
    const C = this.#o.get(I);
    if (C)
      return C;
    const A = this.#Y(g);
    A.canvas.width = A.canvas.height = pg, this.#N(A, pg, I);
    const d = A.measureText("");
    let Z = d.fontBoundingBoxAscent, i = Math.abs(d.fontBoundingBoxDescent);
    if (Z) {
      const s = Z / (Z + i);
      return this.#o.set(I, s), A.canvas.width = A.canvas.height = 0, s;
    }
    A.strokeStyle = "red", A.clearRect(0, 0, pg, pg), A.strokeText("g", 0, 0);
    let B = A.getImageData(0, 0, pg, pg).data;
    i = 0;
    for (let s = B.length - 1 - 3; s >= 0; s -= 4)
      if (B[s] > 0) {
        i = Math.ceil(s / 4 / pg);
        break;
      }
    A.clearRect(0, 0, pg, pg), A.strokeText("A", 0, pg), B = A.getImageData(0, 0, pg, pg).data, Z = 0;
    for (let s = 0, c = B.length; s < c; s += 4)
      if (B[s] > 0) {
        Z = pg - Math.floor(s / 4 / pg);
        break;
      }
    A.canvas.width = A.canvas.height = 0;
    const F = Z ? Z / (Z + i) : uc;
    return this.#o.set(I, F), F;
  }
}
class tl {
  static textContent(I) {
    const g = [], C = {
      items: g,
      styles: /* @__PURE__ */ Object.create(null)
    };
    function A(d) {
      if (!d)
        return;
      let Z = null;
      const i = d.name;
      if (i === "#text")
        Z = d.value;
      else if (tl.shouldBuildText(i))
        d?.attributes?.textContent ? Z = d.attributes.textContent : d.value && (Z = d.value);
      else return;
      if (Z !== null && g.push({
        str: Z
      }), !!d.children)
        for (const B of d.children)
          A(B);
    }
    return A(I), C;
  }
  static shouldBuildText(I) {
    return !(I === "textarea" || I === "input" || I === "option" || I === "select");
  }
}
const Mc = 65536, yc = 100, Xc = 5e3, Hc = Yg ? Ps : xs, pc = Yg ? qs : oB, kc = Yg ? fs : Os, Kc = Yg ? _s : hB;
function rc(l = {}) {
  typeof l == "string" || l instanceof URL ? l = {
    url: l
  } : (l instanceof ArrayBuffer || ArrayBuffer.isView(l)) && (l = {
    data: l
  });
  const I = new sZ(), {
    docId: g
  } = I, C = l.url ? zc(l.url) : null, A = l.data ? Tc(l.data) : null, d = l.httpHeaders || null, Z = l.withCredentials === !0, i = l.password ?? null, B = l.range instanceof DB ? l.range : null, F = Number.isInteger(l.rangeChunkSize) && l.rangeChunkSize > 0 ? l.rangeChunkSize : Mc;
  let s = l.worker instanceof Ug ? l.worker : null;
  const c = l.verbosity, G = typeof l.docBaseUrl == "string" && !kd(l.docBaseUrl) ? l.docBaseUrl : null, V = typeof l.cMapUrl == "string" ? l.cMapUrl : null, W = l.cMapPacked !== !1, R = l.CMapReaderFactory || pc, U = typeof l.standardFontDataUrl == "string" ? l.standardFontDataUrl : null, n = l.StandardFontDataFactory || Kc, m = l.stopAtErrors !== !0, e = Number.isInteger(l.maxImageSize) && l.maxImageSize > -1 ? l.maxImageSize : -1, N = l.isEvalSupported !== !1, w = typeof l.isOffscreenCanvasSupported == "boolean" ? l.isOffscreenCanvasSupported : !Yg, S = typeof l.isImageDecoderSupported == "boolean" ? l.isImageDecoderSupported : !Yg && (ug.platform.isFirefox || !globalThis.chrome), Y = Number.isInteger(l.canvasMaxAreaInBytes) ? l.canvasMaxAreaInBytes : -1, M = typeof l.disableFontFace == "boolean" ? l.disableFontFace : Yg, y = l.fontExtraProperties === !0, r = l.enableXfa === !0, z = l.ownerDocument || globalThis.document, E = l.disableRange === !0, X = l.disableStream === !0, O = l.disableAutoFetch === !0, _ = l.pdfBug === !0, p = l.CanvasFactory || Hc, T = l.FilterFactory || kc, UI = l.enableHWA === !0, sI = B ? B.length : l.length ?? NaN, jI = typeof l.useSystemFonts == "boolean" ? l.useSystemFonts : !Yg && !M, SI = typeof l.useWorkerFetch == "boolean" ? l.useWorkerFetch : R === oB && n === hB && V && U && Al(V, document.baseURI) && Al(U, document.baseURI), aI = null;
  ts(c);
  const eI = {
    canvasFactory: new p({
      ownerDocument: z,
      enableHWA: UI
    }),
    filterFactory: new T({
      docId: g,
      ownerDocument: z
    }),
    cMapReaderFactory: SI ? null : new R({
      baseUrl: V,
      isCompressed: W
    }),
    standardFontDataFactory: SI ? null : new n({
      baseUrl: U
    })
  };
  if (!s) {
    const bI = {
      verbosity: c,
      port: bl.workerPort
    };
    s = bI.port ? Ug.fromPort(bI) : new Ug(bI), I._worker = s;
  }
  const zI = {
    docId: g,
    apiVersion: "4.10.38",
    data: A,
    password: i,
    disableAutoFetch: O,
    rangeChunkSize: F,
    length: sI,
    docBaseUrl: G,
    enableXfa: r,
    evaluatorOptions: {
      maxImageSize: e,
      disableFontFace: M,
      ignoreErrors: m,
      isEvalSupported: N,
      isOffscreenCanvasSupported: w,
      isImageDecoderSupported: S,
      canvasMaxAreaInBytes: Y,
      fontExtraProperties: y,
      useSystemFonts: jI,
      cMapUrl: SI ? V : null,
      standardFontDataUrl: SI ? U : null
    }
  }, fI = {
    disableFontFace: M,
    fontExtraProperties: y,
    ownerDocument: z,
    pdfBug: _,
    styleElement: aI,
    loadingParams: {
      disableAutoFetch: O,
      enableXfa: r
    }
  };
  return s.promise.then(function() {
    if (I.destroyed)
      throw new Error("Loading aborted");
    if (s.destroyed)
      throw new Error("Worker was destroyed");
    const bI = s.messageHandler.sendWithPromise("GetDocRequest", zI, A ? [A.buffer] : null);
    let BI;
    if (B)
      BI = new bc(B, {
        disableRange: E,
        disableStream: X
      });
    else if (!A) {
      if (!C)
        throw new Error("getDocument - no `url` parameter provided.");
      let AI;
      if (Yg)
        if (Al(C)) {
          if (typeof fetch > "u" || typeof Response > "u" || !("body" in Response.prototype))
            throw new Error("getDocument - the Fetch API was disabled in Node.js, see `--no-experimental-fetch`.");
          AI = ci;
        } else
          AI = Yc;
      else
        AI = Al(C) ? ci : hc;
      BI = new AI({
        url: C,
        length: sI,
        httpHeaders: d,
        withCredentials: Z,
        rangeChunkSize: F,
        disableRange: E,
        disableStream: X
      });
    }
    return bI.then((AI) => {
      if (I.destroyed)
        throw new Error("Loading aborted");
      if (s.destroyed)
        throw new Error("Worker was destroyed");
      const Ag = new ll(g, AI, s.port), ng = new vc(Ag, I, BI, fI, eI);
      I._transport = ng, Ag.send("Ready", null);
    });
  }).catch(I._capability.reject), I;
}
function zc(l) {
  if (l instanceof URL)
    return l.href;
  try {
    return new URL(l, window.location).href;
  } catch {
    if (Yg && typeof l == "string")
      return l;
  }
  throw new Error("Invalid PDF url data: either string or URL-object is expected in the url property.");
}
function Tc(l) {
  if (Yg && typeof Buffer < "u" && l instanceof Buffer)
    throw new Error("Please provide binary data as `Uint8Array`, rather than `Buffer`.");
  if (l instanceof Uint8Array && l.byteLength === l.buffer.byteLength)
    return l;
  if (typeof l == "string")
    return Hd(l);
  if (l instanceof ArrayBuffer || ArrayBuffer.isView(l) || typeof l == "object" && !isNaN(l?.length))
    return new Uint8Array(l);
  throw new Error("Invalid PDF binary data: either TypedArray, string, or array-like object is expected in the data property.");
}
function Gi(l) {
  return typeof l == "object" && Number.isInteger(l?.num) && l.num >= 0 && Number.isInteger(l?.gen) && l.gen >= 0;
}
class sZ {
  static #I = 0;
  constructor() {
    this._capability = Promise.withResolvers(), this._transport = null, this._worker = null, this.docId = `d${sZ.#I++}`, this.destroyed = !1, this.onPassword = null, this.onProgress = null;
  }
  get promise() {
    return this._capability.promise;
  }
  async destroy() {
    this.destroyed = !0;
    try {
      this._worker?.port && (this._worker._pendingDestroy = !0), await this._transport?.destroy();
    } catch (I) {
      throw this._worker?.port && delete this._worker._pendingDestroy, I;
    }
    this._transport = null, this._worker?.destroy(), this._worker = null;
  }
}
class DB {
  constructor(I, g, C = !1, A = null) {
    this.length = I, this.initialData = g, this.progressiveDone = C, this.contentDispositionFilename = A, this._rangeListeners = [], this._progressListeners = [], this._progressiveReadListeners = [], this._progressiveDoneListeners = [], this._readyCapability = Promise.withResolvers();
  }
  addRangeListener(I) {
    this._rangeListeners.push(I);
  }
  addProgressListener(I) {
    this._progressListeners.push(I);
  }
  addProgressiveReadListener(I) {
    this._progressiveReadListeners.push(I);
  }
  addProgressiveDoneListener(I) {
    this._progressiveDoneListeners.push(I);
  }
  onDataRange(I, g) {
    for (const C of this._rangeListeners)
      C(I, g);
  }
  onDataProgress(I, g) {
    this._readyCapability.promise.then(() => {
      for (const C of this._progressListeners)
        C(I, g);
    });
  }
  onDataProgressiveRead(I) {
    this._readyCapability.promise.then(() => {
      for (const g of this._progressiveReadListeners)
        g(I);
    });
  }
  onDataProgressiveDone() {
    this._readyCapability.promise.then(() => {
      for (const I of this._progressiveDoneListeners)
        I();
    });
  }
  transportReady() {
    this._readyCapability.resolve();
  }
  requestDataRange(I, g) {
    _I("Abstract method PDFDataRangeTransport.requestDataRange");
  }
  abort() {
  }
}
class Lc {
  constructor(I, g) {
    this._pdfInfo = I, this._transport = g;
  }
  get annotationStorage() {
    return this._transport.annotationStorage;
  }
  get canvasFactory() {
    return this._transport.canvasFactory;
  }
  get filterFactory() {
    return this._transport.filterFactory;
  }
  get numPages() {
    return this._pdfInfo.numPages;
  }
  get fingerprints() {
    return this._pdfInfo.fingerprints;
  }
  get isPureXfa() {
    return uI(this, "isPureXfa", !!this._transport._htmlForXfa);
  }
  get allXfaHtml() {
    return this._transport._htmlForXfa;
  }
  getPage(I) {
    return this._transport.getPage(I);
  }
  getPageIndex(I) {
    return this._transport.getPageIndex(I);
  }
  getDestinations() {
    return this._transport.getDestinations();
  }
  getDestination(I) {
    return this._transport.getDestination(I);
  }
  getPageLabels() {
    return this._transport.getPageLabels();
  }
  getPageLayout() {
    return this._transport.getPageLayout();
  }
  getPageMode() {
    return this._transport.getPageMode();
  }
  getViewerPreferences() {
    return this._transport.getViewerPreferences();
  }
  getOpenAction() {
    return this._transport.getOpenAction();
  }
  getAttachments() {
    return this._transport.getAttachments();
  }
  getJSActions() {
    return this._transport.getDocJSActions();
  }
  getOutline() {
    return this._transport.getOutline();
  }
  getOptionalContentConfig({
    intent: I = "display"
  } = {}) {
    const {
      renderingIntent: g
    } = this._transport.getRenderingIntent(I);
    return this._transport.getOptionalContentConfig(g);
  }
  getPermissions() {
    return this._transport.getPermissions();
  }
  getMetadata() {
    return this._transport.getMetadata();
  }
  getMarkInfo() {
    return this._transport.getMarkInfo();
  }
  getData() {
    return this._transport.getData();
  }
  saveDocument() {
    return this._transport.saveDocument();
  }
  getDownloadInfo() {
    return this._transport.downloadInfoCapability.promise;
  }
  cleanup(I = !1) {
    return this._transport.startCleanup(I || this.isPureXfa);
  }
  destroy() {
    return this.loadingTask.destroy();
  }
  cachedPageNumber(I) {
    return this._transport.cachedPageNumber(I);
  }
  get loadingParams() {
    return this._transport.loadingParams;
  }
  get loadingTask() {
    return this._transport.loadingTask;
  }
  getFieldObjects() {
    return this._transport.getFieldObjects();
  }
  hasJSActions() {
    return this._transport.hasJSActions();
  }
  getCalculationOrderIds() {
    return this._transport.getCalculationOrderIds();
  }
}
class Ec {
  #I = null;
  #g = !1;
  constructor(I, g, C, A = !1) {
    this._pageIndex = I, this._pageInfo = g, this._transport = C, this._stats = A ? new _Z() : null, this._pdfBug = A, this.commonObjs = C.commonObjs, this.objs = new uB(), this._maybeCleanupAfterRender = !1, this._intentStates = /* @__PURE__ */ new Map(), this.destroyed = !1;
  }
  get pageNumber() {
    return this._pageIndex + 1;
  }
  get rotate() {
    return this._pageInfo.rotate;
  }
  get ref() {
    return this._pageInfo.ref;
  }
  get userUnit() {
    return this._pageInfo.userUnit;
  }
  get view() {
    return this._pageInfo.view;
  }
  getViewport({
    scale: I,
    rotation: g = this.rotate,
    offsetX: C = 0,
    offsetY: A = 0,
    dontFlip: d = !1
  } = {}) {
    return new ul({
      viewBox: this.view,
      userUnit: this.userUnit,
      scale: I,
      rotation: g,
      offsetX: C,
      offsetY: A,
      dontFlip: d
    });
  }
  getAnnotations({
    intent: I = "display"
  } = {}) {
    const {
      renderingIntent: g
    } = this._transport.getRenderingIntent(I);
    return this._transport.getAnnotations(this._pageIndex, g);
  }
  getJSActions() {
    return this._transport.getPageJSActions(this._pageIndex);
  }
  get filterFactory() {
    return this._transport.filterFactory;
  }
  get isPureXfa() {
    return uI(this, "isPureXfa", !!this._transport._htmlForXfa);
  }
  async getXfa() {
    return this._transport._htmlForXfa?.children[this._pageIndex] || null;
  }
  render({
    canvasContext: I,
    viewport: g,
    intent: C = "display",
    annotationMode: A = TC.ENABLE,
    transform: d = null,
    background: Z = null,
    optionalContentConfigPromise: i = null,
    annotationCanvasMap: B = null,
    pageColors: F = null,
    printAnnotationStorage: s = null,
    isEditing: c = !1
  }) {
    this._stats?.time("Overall");
    const G = this._transport.getRenderingIntent(C, A, s, c), {
      renderingIntent: V,
      cacheKey: W
    } = G;
    this.#g = !1, this.#A(), i ||= this._transport.getOptionalContentConfig(V);
    let R = this._intentStates.get(W);
    R || (R = /* @__PURE__ */ Object.create(null), this._intentStates.set(W, R)), R.streamReaderCancelTimeout && (clearTimeout(R.streamReaderCancelTimeout), R.streamReaderCancelTimeout = null);
    const U = !!(V & Tg.PRINT);
    R.displayReadyCapability || (R.displayReadyCapability = Promise.withResolvers(), R.operatorList = {
      fnArray: [],
      argsArray: [],
      lastChunk: !1,
      separateAnnots: null
    }, this._stats?.time("Page Request"), this._pumpOperatorList(G));
    const n = (N) => {
      R.renderTasks.delete(m), (this._maybeCleanupAfterRender || U) && (this.#g = !0), this.#C(!U), N ? (m.capability.reject(N), this._abortOperatorList({
        intentState: R,
        reason: N instanceof Error ? N : new Error(N)
      })) : m.capability.resolve(), this._stats && (this._stats.timeEnd("Rendering"), this._stats.timeEnd("Overall"), globalThis.Stats?.enabled && globalThis.Stats.add(this.pageNumber, this._stats));
    }, m = new DA({
      callback: n,
      params: {
        canvasContext: I,
        viewport: g,
        transform: d,
        background: Z
      },
      objs: this.objs,
      commonObjs: this.commonObjs,
      annotationCanvasMap: B,
      operatorList: R.operatorList,
      pageIndex: this._pageIndex,
      canvasFactory: this._transport.canvasFactory,
      filterFactory: this._transport.filterFactory,
      useRequestAnimationFrame: !U,
      pdfBug: this._pdfBug,
      pageColors: F
    });
    (R.renderTasks ||= /* @__PURE__ */ new Set()).add(m);
    const e = m.task;
    return Promise.all([R.displayReadyCapability.promise, i]).then(([N, w]) => {
      if (this.destroyed) {
        n();
        return;
      }
      if (this._stats?.time("Rendering"), !(w.renderingIntent & V))
        throw new Error("Must use the same `intent`-argument when calling the `PDFPageProxy.render` and `PDFDocumentProxy.getOptionalContentConfig` methods.");
      m.initializeGraphics({
        transparency: N,
        optionalContentConfig: w
      }), m.operatorListChanged();
    }).catch(n), e;
  }
  getOperatorList({
    intent: I = "display",
    annotationMode: g = TC.ENABLE,
    printAnnotationStorage: C = null,
    isEditing: A = !1
  } = {}) {
    function d() {
      i.operatorList.lastChunk && (i.opListReadCapability.resolve(i.operatorList), i.renderTasks.delete(B));
    }
    const Z = this._transport.getRenderingIntent(I, g, C, A, !0);
    let i = this._intentStates.get(Z.cacheKey);
    i || (i = /* @__PURE__ */ Object.create(null), this._intentStates.set(Z.cacheKey, i));
    let B;
    return i.opListReadCapability || (B = /* @__PURE__ */ Object.create(null), B.operatorListChanged = d, i.opListReadCapability = Promise.withResolvers(), (i.renderTasks ||= /* @__PURE__ */ new Set()).add(B), i.operatorList = {
      fnArray: [],
      argsArray: [],
      lastChunk: !1,
      separateAnnots: null
    }, this._stats?.time("Page Request"), this._pumpOperatorList(Z)), i.opListReadCapability.promise;
  }
  streamTextContent({
    includeMarkedContent: I = !1,
    disableNormalization: g = !1
  } = {}) {
    return this._transport.messageHandler.sendWithStream("GetTextContent", {
      pageIndex: this._pageIndex,
      includeMarkedContent: I === !0,
      disableNormalization: g === !0
    }, {
      highWaterMark: 100,
      size(A) {
        return A.items.length;
      }
    });
  }
  getTextContent(I = {}) {
    if (this._transport._htmlForXfa)
      return this.getXfa().then((C) => tl.textContent(C));
    const g = this.streamTextContent(I);
    return new Promise(function(C, A) {
      function d() {
        Z.read().then(function({
          value: B,
          done: F
        }) {
          if (F) {
            C(i);
            return;
          }
          i.lang ??= B.lang, Object.assign(i.styles, B.styles), i.items.push(...B.items), d();
        }, A);
      }
      const Z = g.getReader(), i = {
        items: [],
        styles: /* @__PURE__ */ Object.create(null),
        lang: null
      };
      d();
    });
  }
  getStructTree() {
    return this._transport.getStructTree(this._pageIndex);
  }
  _destroy() {
    this.destroyed = !0;
    const I = [];
    for (const g of this._intentStates.values())
      if (this._abortOperatorList({
        intentState: g,
        reason: new Error("Page was destroyed."),
        force: !0
      }), !g.opListReadCapability)
        for (const C of g.renderTasks)
          I.push(C.completed), C.cancel();
    return this.objs.clear(), this.#g = !1, this.#A(), Promise.all(I);
  }
  cleanup(I = !1) {
    this.#g = !0;
    const g = this.#C(!1);
    return I && g && (this._stats &&= new _Z()), g;
  }
  #C(I = !1) {
    if (this.#A(), !this.#g || this.destroyed)
      return !1;
    if (I)
      return this.#I = setTimeout(() => {
        this.#I = null, this.#C(!1);
      }, Xc), !1;
    for (const {
      renderTasks: g,
      operatorList: C
    } of this._intentStates.values())
      if (g.size > 0 || !C.lastChunk)
        return !1;
    return this._intentStates.clear(), this.objs.clear(), this.#g = !1, !0;
  }
  #A() {
    this.#I && (clearTimeout(this.#I), this.#I = null);
  }
  _startRenderPage(I, g) {
    const C = this._intentStates.get(g);
    C && (this._stats?.timeEnd("Page Request"), C.displayReadyCapability?.resolve(I));
  }
  _renderPageChunk(I, g) {
    for (let C = 0, A = I.length; C < A; C++)
      g.operatorList.fnArray.push(I.fnArray[C]), g.operatorList.argsArray.push(I.argsArray[C]);
    g.operatorList.lastChunk = I.lastChunk, g.operatorList.separateAnnots = I.separateAnnots;
    for (const C of g.renderTasks)
      C.operatorListChanged();
    I.lastChunk && this.#C(!0);
  }
  _pumpOperatorList({
    renderingIntent: I,
    cacheKey: g,
    annotationStorageSerializable: C,
    modifiedIds: A
  }) {
    const {
      map: d,
      transfer: Z
    } = C, B = this._transport.messageHandler.sendWithStream("GetOperatorList", {
      pageIndex: this._pageIndex,
      intent: I,
      cacheKey: g,
      annotationStorage: d,
      modifiedIds: A
    }, Z).getReader(), F = this._intentStates.get(g);
    F.streamReader = B;
    const s = () => {
      B.read().then(({
        value: c,
        done: G
      }) => {
        if (G) {
          F.streamReader = null;
          return;
        }
        this._transport.destroyed || (this._renderPageChunk(c, F), s());
      }, (c) => {
        if (F.streamReader = null, !this._transport.destroyed) {
          if (F.operatorList) {
            F.operatorList.lastChunk = !0;
            for (const G of F.renderTasks)
              G.operatorListChanged();
            this.#C(!0);
          }
          if (F.displayReadyCapability)
            F.displayReadyCapability.reject(c);
          else if (F.opListReadCapability)
            F.opListReadCapability.reject(c);
          else
            throw c;
        }
      });
    };
    s();
  }
  _abortOperatorList({
    intentState: I,
    reason: g,
    force: C = !1
  }) {
    if (I.streamReader) {
      if (I.streamReaderCancelTimeout && (clearTimeout(I.streamReaderCancelTimeout), I.streamReaderCancelTimeout = null), !C) {
        if (I.renderTasks.size > 0)
          return;
        if (g instanceof CZ) {
          let A = yc;
          g.extraDelay > 0 && g.extraDelay < 1e3 && (A += g.extraDelay), I.streamReaderCancelTimeout = setTimeout(() => {
            I.streamReaderCancelTimeout = null, this._abortOperatorList({
              intentState: I,
              reason: g,
              force: !0
            });
          }, A);
          return;
        }
      }
      if (I.streamReader.cancel(new xC(g.message)).catch(() => {
      }), I.streamReader = null, !this._transport.destroyed) {
        for (const [A, d] of this._intentStates)
          if (d === I) {
            this._intentStates.delete(A);
            break;
          }
        this.cleanup();
      }
    }
  }
  get stats() {
    return this._stats;
  }
}
class jc {
  #I = /* @__PURE__ */ new Map();
  #g = Promise.resolve();
  postMessage(I, g) {
    const C = {
      data: structuredClone(I, g ? {
        transfer: g
      } : null)
    };
    this.#g.then(() => {
      for (const [A] of this.#I)
        A.call(this, C);
    });
  }
  addEventListener(I, g, C = null) {
    let A = null;
    if (C?.signal instanceof AbortSignal) {
      const {
        signal: d
      } = C;
      if (d.aborted) {
        DI("LoopbackPort - cannot use an `aborted` signal.");
        return;
      }
      const Z = () => this.removeEventListener(I, g);
      A = () => d.removeEventListener("abort", Z), d.addEventListener("abort", Z);
    }
    this.#I.set(g, A);
  }
  removeEventListener(I, g) {
    this.#I.get(g)?.(), this.#I.delete(g);
  }
  terminate() {
    for (const [, I] of this.#I)
      I?.();
    this.#I.clear();
  }
}
class Ug {
  static #I = 0;
  static #g = !1;
  static #C;
  static {
    Yg && (this.#g = !0, bl.workerSrc ||= "./pdf.worker.mjs"), this._isSameOrigin = (I, g) => {
      let C;
      try {
        if (C = new URL(I), !C.origin || C.origin === "null")
          return !1;
      } catch {
        return !1;
      }
      const A = new URL(g, C);
      return C.origin === A.origin;
    }, this._createCDNWrapper = (I) => {
      const g = `await import("${I}");`;
      return URL.createObjectURL(new Blob([g], {
        type: "text/javascript"
      }));
    };
  }
  constructor({
    name: I = null,
    port: g = null,
    verbosity: C = Ns()
  } = {}) {
    if (this.name = I, this.destroyed = !1, this.verbosity = C, this._readyCapability = Promise.withResolvers(), this._port = null, this._webWorker = null, this._messageHandler = null, g) {
      if (Ug.#C?.has(g))
        throw new Error("Cannot use more than one PDFWorker per port.");
      (Ug.#C ||= /* @__PURE__ */ new WeakMap()).set(g, this), this._initializeFromPort(g);
      return;
    }
    this._initialize();
  }
  get promise() {
    return this._readyCapability.promise;
  }
  #A() {
    this._readyCapability.resolve(), this._messageHandler.send("configure", {
      verbosity: this.verbosity
    });
  }
  get port() {
    return this._port;
  }
  get messageHandler() {
    return this._messageHandler;
  }
  _initializeFromPort(I) {
    this._port = I, this._messageHandler = new ll("main", "worker", I), this._messageHandler.on("ready", function() {
    }), this.#A();
  }
  _initialize() {
    if (Ug.#g || Ug.#d) {
      this._setupFakeWorker();
      return;
    }
    let {
      workerSrc: I
    } = Ug;
    try {
      Ug._isSameOrigin(window.location.href, I) || (I = Ug._createCDNWrapper(new URL(I, window.location).href));
      const g = new Worker(I, {
        type: "module"
      }), C = new ll("main", "worker", g), A = () => {
        d.abort(), C.destroy(), g.terminate(), this.destroyed ? this._readyCapability.reject(new Error("Worker was destroyed")) : this._setupFakeWorker();
      }, d = new AbortController();
      g.addEventListener("error", () => {
        this._webWorker || A();
      }, {
        signal: d.signal
      }), C.on("test", (i) => {
        if (d.abort(), this.destroyed || !i) {
          A();
          return;
        }
        this._messageHandler = C, this._port = g, this._webWorker = g, this.#A();
      }), C.on("ready", (i) => {
        if (d.abort(), this.destroyed) {
          A();
          return;
        }
        try {
          Z();
        } catch {
          this._setupFakeWorker();
        }
      });
      const Z = () => {
        const i = new Uint8Array();
        C.send("test", i, [i.buffer]);
      };
      Z();
      return;
    } catch {
      Xd("The worker has been disabled.");
    }
    this._setupFakeWorker();
  }
  _setupFakeWorker() {
    Ug.#g || (DI("Setting up fake worker."), Ug.#g = !0), Ug._setupFakeWorkerGlobal.then((I) => {
      if (this.destroyed) {
        this._readyCapability.reject(new Error("Worker was destroyed"));
        return;
      }
      const g = new jc();
      this._port = g;
      const C = `fake${Ug.#I++}`, A = new ll(C + "_worker", C, g);
      I.setup(A, g), this._messageHandler = new ll(C, C + "_worker", g), this.#A();
    }).catch((I) => {
      this._readyCapability.reject(new Error(`Setting up fake worker failed: "${I.message}".`));
    });
  }
  destroy() {
    this.destroyed = !0, this._webWorker?.terminate(), this._webWorker = null, Ug.#C?.delete(this._port), this._port = null, this._messageHandler?.destroy(), this._messageHandler = null;
  }
  static fromPort(I) {
    if (!I?.port)
      throw new Error("PDFWorker.fromPort - invalid method signature.");
    const g = this.#C?.get(I.port);
    if (g) {
      if (g._pendingDestroy)
        throw new Error("PDFWorker.fromPort - the worker is being destroyed.\nPlease remember to await `PDFDocumentLoadingTask.destroy()`-calls.");
      return g;
    }
    return new Ug(I);
  }
  static get workerSrc() {
    if (bl.workerSrc)
      return bl.workerSrc;
    throw new Error('No "GlobalWorkerOptions.workerSrc" specified.');
  }
  static get #d() {
    try {
      return globalThis.pdfjsWorker?.WorkerMessageHandler || null;
    } catch {
      return null;
    }
  }
  static get _setupFakeWorkerGlobal() {
    return uI(this, "_setupFakeWorkerGlobal", (async () => this.#d ? this.#d : (await import(
      /*webpackIgnore: true*/
      this.workerSrc
    )).WorkerMessageHandler)());
  }
}
class vc {
  #I = /* @__PURE__ */ new Map();
  #g = /* @__PURE__ */ new Map();
  #C = /* @__PURE__ */ new Map();
  #A = /* @__PURE__ */ new Map();
  #d = null;
  constructor(I, g, C, A, d) {
    this.messageHandler = I, this.loadingTask = g, this.commonObjs = new uB(), this.fontLoader = new js({
      ownerDocument: A.ownerDocument,
      styleElement: A.styleElement
    }), this.loadingParams = A.loadingParams, this._params = A, this.canvasFactory = d.canvasFactory, this.filterFactory = d.filterFactory, this.cMapReaderFactory = d.cMapReaderFactory, this.standardFontDataFactory = d.standardFontDataFactory, this.destroyed = !1, this.destroyCapability = null, this._networkStream = C, this._fullReader = null, this._lastProgress = null, this.downloadInfoCapability = Promise.withResolvers(), this.setupMessageHandler();
  }
  #l(I, g = null) {
    const C = this.#I.get(I);
    if (C)
      return C;
    const A = this.messageHandler.sendWithPromise(I, g);
    return this.#I.set(I, A), A;
  }
  get annotationStorage() {
    return uI(this, "annotationStorage", new iZ());
  }
  getRenderingIntent(I, g = TC.ENABLE, C = null, A = !1, d = !1) {
    let Z = Tg.DISPLAY, i = u0;
    switch (I) {
      case "any":
        Z = Tg.ANY;
        break;
      case "display":
        break;
      case "print":
        Z = Tg.PRINT;
        break;
      default:
        DI(`getRenderingIntent - invalid intent: ${I}`);
    }
    const B = Z & Tg.PRINT && C instanceof nB ? C : this.annotationStorage;
    switch (g) {
      case TC.DISABLE:
        Z += Tg.ANNOTATIONS_DISABLE;
        break;
      case TC.ENABLE:
        break;
      case TC.ENABLE_FORMS:
        Z += Tg.ANNOTATIONS_FORMS;
        break;
      case TC.ENABLE_STORAGE:
        Z += Tg.ANNOTATIONS_STORAGE, i = B.serializable;
        break;
      default:
        DI(`getRenderingIntent - invalid annotationMode: ${g}`);
    }
    A && (Z += Tg.IS_EDITING), d && (Z += Tg.OPLIST);
    const {
      ids: F,
      hash: s
    } = B.modifiedIds, c = [Z, i.hash, s];
    return {
      renderingIntent: Z,
      cacheKey: c.join("_"),
      annotationStorageSerializable: i,
      modifiedIds: F
    };
  }
  destroy() {
    if (this.destroyCapability)
      return this.destroyCapability.promise;
    this.destroyed = !0, this.destroyCapability = Promise.withResolvers(), this.#d?.reject(new Error("Worker was destroyed during onPassword callback"));
    const I = [];
    for (const C of this.#g.values())
      I.push(C._destroy());
    this.#g.clear(), this.#C.clear(), this.#A.clear(), this.hasOwnProperty("annotationStorage") && this.annotationStorage.resetModified();
    const g = this.messageHandler.sendWithPromise("Terminate", null);
    return I.push(g), Promise.all(I).then(() => {
      this.commonObjs.clear(), this.fontLoader.clear(), this.#I.clear(), this.filterFactory.destroy(), Dg.cleanup(), this._networkStream?.cancelAllRequests(new xC("Worker was terminated.")), this.messageHandler?.destroy(), this.messageHandler = null, this.destroyCapability.resolve();
    }, this.destroyCapability.reject), this.destroyCapability.promise;
  }
  setupMessageHandler() {
    const {
      messageHandler: I,
      loadingTask: g
    } = this;
    I.on("GetReader", (C, A) => {
      Fg(this._networkStream, "GetReader - no `IPDFStream` instance available."), this._fullReader = this._networkStream.getFullReader(), this._fullReader.onProgress = (d) => {
        this._lastProgress = {
          loaded: d.loaded,
          total: d.total
        };
      }, A.onPull = () => {
        this._fullReader.read().then(function({
          value: d,
          done: Z
        }) {
          if (Z) {
            A.close();
            return;
          }
          Fg(d instanceof ArrayBuffer, "GetReader - expected an ArrayBuffer."), A.enqueue(new Uint8Array(d), 1, [d]);
        }).catch((d) => {
          A.error(d);
        });
      }, A.onCancel = (d) => {
        this._fullReader.cancel(d), A.ready.catch((Z) => {
          if (!this.destroyed)
            throw Z;
        });
      };
    }), I.on("ReaderHeadersReady", async (C) => {
      await this._fullReader.headersReady;
      const {
        isStreamingSupported: A,
        isRangeSupported: d,
        contentLength: Z
      } = this._fullReader;
      return (!A || !d) && (this._lastProgress && g.onProgress?.(this._lastProgress), this._fullReader.onProgress = (i) => {
        g.onProgress?.({
          loaded: i.loaded,
          total: i.total
        });
      }), {
        isStreamingSupported: A,
        isRangeSupported: d,
        contentLength: Z
      };
    }), I.on("GetRangeReader", (C, A) => {
      Fg(this._networkStream, "GetRangeReader - no `IPDFStream` instance available.");
      const d = this._networkStream.getRangeReader(C.begin, C.end);
      if (!d) {
        A.close();
        return;
      }
      A.onPull = () => {
        d.read().then(function({
          value: Z,
          done: i
        }) {
          if (i) {
            A.close();
            return;
          }
          Fg(Z instanceof ArrayBuffer, "GetRangeReader - expected an ArrayBuffer."), A.enqueue(new Uint8Array(Z), 1, [Z]);
        }).catch((Z) => {
          A.error(Z);
        });
      }, A.onCancel = (Z) => {
        d.cancel(Z), A.ready.catch((i) => {
          if (!this.destroyed)
            throw i;
        });
      };
    }), I.on("GetDoc", ({
      pdfInfo: C
    }) => {
      this._numPages = C.numPages, this._htmlForXfa = C.htmlForXfa, delete C.htmlForXfa, g._capability.resolve(new Lc(C, this));
    }), I.on("DocException", (C) => {
      g._capability.reject(kg(C));
    }), I.on("PasswordRequest", (C) => {
      this.#d = Promise.withResolvers();
      try {
        if (!g.onPassword)
          throw kg(C);
        const A = (d) => {
          d instanceof Error ? this.#d.reject(d) : this.#d.resolve({
            password: d
          });
        };
        g.onPassword(A, C.code);
      } catch (A) {
        this.#d.reject(A);
      }
      return this.#d.promise;
    }), I.on("DataLoaded", (C) => {
      g.onProgress?.({
        loaded: C.length,
        total: C.length
      }), this.downloadInfoCapability.resolve(C);
    }), I.on("StartRenderPage", (C) => {
      if (this.destroyed)
        return;
      this.#g.get(C.pageIndex)._startRenderPage(C.transparency, C.cacheKey);
    }), I.on("commonobj", ([C, A, d]) => {
      if (this.destroyed || this.commonObjs.has(C))
        return null;
      switch (A) {
        case "Font":
          const {
            disableFontFace: Z,
            fontExtraProperties: i,
            pdfBug: B
          } = this._params;
          if ("error" in d) {
            const G = d.error;
            DI(`Error during font loading: ${G}`), this.commonObjs.resolve(C, G);
            break;
          }
          const F = B && globalThis.FontInspector?.enabled ? (G, V) => globalThis.FontInspector.fontAdded(G, V) : null, s = new vs(d, {
            disableFontFace: Z,
            fontExtraProperties: i,
            inspectFont: F
          });
          this.fontLoader.bind(s).catch(() => I.sendWithPromise("FontFallback", {
            id: C
          })).finally(() => {
            !i && s.data && (s.data = null), this.commonObjs.resolve(C, s);
          });
          break;
        case "CopyLocalImage":
          const {
            imageRef: c
          } = d;
          Fg(c, "The imageRef must be defined.");
          for (const G of this.#g.values())
            for (const [, V] of G.objs)
              if (V?.ref === c)
                return V.dataLen ? (this.commonObjs.resolve(C, structuredClone(V)), V.dataLen) : null;
          break;
        case "FontPath":
        case "Image":
        case "Pattern":
          this.commonObjs.resolve(C, d);
          break;
        default:
          throw new Error(`Got unknown common object type ${A}`);
      }
      return null;
    }), I.on("obj", ([C, A, d, Z]) => {
      if (this.destroyed)
        return;
      const i = this.#g.get(A);
      if (!i.objs.has(C)) {
        if (i._intentStates.size === 0) {
          Z?.bitmap?.close();
          return;
        }
        switch (d) {
          case "Image":
            i.objs.resolve(C, Z), Z?.dataLen > es && (i._maybeCleanupAfterRender = !0);
            break;
          case "Pattern":
            i.objs.resolve(C, Z);
            break;
          default:
            throw new Error(`Got unknown object type ${d}`);
        }
      }
    }), I.on("DocProgress", (C) => {
      this.destroyed || g.onProgress?.({
        loaded: C.loaded,
        total: C.total
      });
    }), I.on("FetchBuiltInCMap", async (C) => {
      if (this.destroyed)
        throw new Error("Worker was destroyed.");
      if (!this.cMapReaderFactory)
        throw new Error("CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.");
      return this.cMapReaderFactory.fetch(C);
    }), I.on("FetchStandardFontData", async (C) => {
      if (this.destroyed)
        throw new Error("Worker was destroyed.");
      if (!this.standardFontDataFactory)
        throw new Error("StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.");
      return this.standardFontDataFactory.fetch(C);
    });
  }
  getData() {
    return this.messageHandler.sendWithPromise("GetData", null);
  }
  saveDocument() {
    this.annotationStorage.size <= 0 && DI("saveDocument called while `annotationStorage` is empty, please use the getData-method instead.");
    const {
      map: I,
      transfer: g
    } = this.annotationStorage.serializable;
    return this.messageHandler.sendWithPromise("SaveDocument", {
      isPureXfa: !!this._htmlForXfa,
      numPages: this._numPages,
      annotationStorage: I,
      filename: this._fullReader?.filename ?? null
    }, g).finally(() => {
      this.annotationStorage.resetModified();
    });
  }
  getPage(I) {
    if (!Number.isInteger(I) || I <= 0 || I > this._numPages)
      return Promise.reject(new Error("Invalid page request."));
    const g = I - 1, C = this.#C.get(g);
    if (C)
      return C;
    const A = this.messageHandler.sendWithPromise("GetPage", {
      pageIndex: g
    }).then((d) => {
      if (this.destroyed)
        throw new Error("Transport destroyed");
      d.refStr && this.#A.set(d.refStr, I);
      const Z = new Ec(g, d, this, this._params.pdfBug);
      return this.#g.set(g, Z), Z;
    });
    return this.#C.set(g, A), A;
  }
  getPageIndex(I) {
    return Gi(I) ? this.messageHandler.sendWithPromise("GetPageIndex", {
      num: I.num,
      gen: I.gen
    }) : Promise.reject(new Error("Invalid pageIndex request."));
  }
  getAnnotations(I, g) {
    return this.messageHandler.sendWithPromise("GetAnnotations", {
      pageIndex: I,
      intent: g
    });
  }
  getFieldObjects() {
    return this.#l("GetFieldObjects");
  }
  hasJSActions() {
    return this.#l("HasJSActions");
  }
  getCalculationOrderIds() {
    return this.messageHandler.sendWithPromise("GetCalculationOrderIds", null);
  }
  getDestinations() {
    return this.messageHandler.sendWithPromise("GetDestinations", null);
  }
  getDestination(I) {
    return typeof I != "string" ? Promise.reject(new Error("Invalid destination request.")) : this.messageHandler.sendWithPromise("GetDestination", {
      id: I
    });
  }
  getPageLabels() {
    return this.messageHandler.sendWithPromise("GetPageLabels", null);
  }
  getPageLayout() {
    return this.messageHandler.sendWithPromise("GetPageLayout", null);
  }
  getPageMode() {
    return this.messageHandler.sendWithPromise("GetPageMode", null);
  }
  getViewerPreferences() {
    return this.messageHandler.sendWithPromise("GetViewerPreferences", null);
  }
  getOpenAction() {
    return this.messageHandler.sendWithPromise("GetOpenAction", null);
  }
  getAttachments() {
    return this.messageHandler.sendWithPromise("GetAttachments", null);
  }
  getDocJSActions() {
    return this.#l("GetDocJSActions");
  }
  getPageJSActions(I) {
    return this.messageHandler.sendWithPromise("GetPageJSActions", {
      pageIndex: I
    });
  }
  getStructTree(I) {
    return this.messageHandler.sendWithPromise("GetStructTree", {
      pageIndex: I
    });
  }
  getOutline() {
    return this.messageHandler.sendWithPromise("GetOutline", null);
  }
  getOptionalContentConfig(I) {
    return this.#l("GetOptionalContentConfig").then((g) => new Wc(g, I));
  }
  getPermissions() {
    return this.messageHandler.sendWithPromise("GetPermissions", null);
  }
  getMetadata() {
    const I = "GetMetadata", g = this.#I.get(I);
    if (g)
      return g;
    const C = this.messageHandler.sendWithPromise(I, null).then((A) => ({
      info: A[0],
      metadata: A[1] ? new Gc(A[1]) : null,
      contentDispositionFilename: this._fullReader?.filename ?? null,
      contentLength: this._fullReader?.contentLength ?? null
    }));
    return this.#I.set(I, C), C;
  }
  getMarkInfo() {
    return this.messageHandler.sendWithPromise("GetMarkInfo", null);
  }
  async startCleanup(I = !1) {
    if (!this.destroyed) {
      await this.messageHandler.sendWithPromise("Cleanup", null);
      for (const g of this.#g.values())
        if (!g.cleanup())
          throw new Error(`startCleanup: Page ${g.pageNumber} is currently rendering.`);
      this.commonObjs.clear(), I || this.fontLoader.clear(), this.#I.clear(), this.filterFactory.destroy(!0), Dg.cleanup();
    }
  }
  cachedPageNumber(I) {
    if (!Gi(I))
      return null;
    const g = I.gen === 0 ? `${I.num}R` : `${I.num}R${I.gen}`;
    return this.#A.get(g) ?? null;
  }
}
const OA = Symbol("INITIAL_DATA");
class uB {
  #I = /* @__PURE__ */ Object.create(null);
  #g(I) {
    return this.#I[I] ||= {
      ...Promise.withResolvers(),
      data: OA
    };
  }
  get(I, g = null) {
    if (g) {
      const A = this.#g(I);
      return A.promise.then(() => g(A.data)), null;
    }
    const C = this.#I[I];
    if (!C || C.data === OA)
      throw new Error(`Requesting object that isn't resolved yet ${I}.`);
    return C.data;
  }
  has(I) {
    const g = this.#I[I];
    return !!g && g.data !== OA;
  }
  delete(I) {
    const g = this.#I[I];
    return !g || g.data === OA ? !1 : (delete this.#I[I], !0);
  }
  resolve(I, g = null) {
    const C = this.#g(I);
    C.data = g, C.resolve();
  }
  clear() {
    for (const I in this.#I) {
      const {
        data: g
      } = this.#I[I];
      g?.bitmap?.close();
    }
    this.#I = /* @__PURE__ */ Object.create(null);
  }
  *[Symbol.iterator]() {
    for (const I in this.#I) {
      const {
        data: g
      } = this.#I[I];
      g !== OA && (yield [I, g]);
    }
  }
}
class xc {
  #I = null;
  constructor(I) {
    this.#I = I, this.onContinue = null;
  }
  get promise() {
    return this.#I.capability.promise;
  }
  cancel(I = 0) {
    this.#I.cancel(null, I);
  }
  get separateAnnots() {
    const {
      separateAnnots: I
    } = this.#I.operatorList;
    if (!I)
      return !1;
    const {
      annotationCanvasMap: g
    } = this.#I;
    return I.form || I.canvas && g?.size > 0;
  }
}
class DA {
  #I = null;
  static #g = /* @__PURE__ */ new WeakSet();
  constructor({
    callback: I,
    params: g,
    objs: C,
    commonObjs: A,
    annotationCanvasMap: d,
    operatorList: Z,
    pageIndex: i,
    canvasFactory: B,
    filterFactory: F,
    useRequestAnimationFrame: s = !1,
    pdfBug: c = !1,
    pageColors: G = null
  }) {
    this.callback = I, this.params = g, this.objs = C, this.commonObjs = A, this.annotationCanvasMap = d, this.operatorListIdx = null, this.operatorList = Z, this._pageIndex = i, this.canvasFactory = B, this.filterFactory = F, this._pdfBug = c, this.pageColors = G, this.running = !1, this.graphicsReadyCallback = null, this.graphicsReady = !1, this._useRequestAnimationFrame = s === !0 && typeof window < "u", this.cancelled = !1, this.capability = Promise.withResolvers(), this.task = new xc(this), this._cancelBound = this.cancel.bind(this), this._continueBound = this._continue.bind(this), this._scheduleNextBound = this._scheduleNext.bind(this), this._nextBound = this._next.bind(this), this._canvas = g.canvasContext.canvas;
  }
  get completed() {
    return this.capability.promise.catch(function() {
    });
  }
  initializeGraphics({
    transparency: I = !1,
    optionalContentConfig: g
  }) {
    if (this.cancelled)
      return;
    if (this._canvas) {
      if (DA.#g.has(this._canvas))
        throw new Error("Cannot use the same canvas during multiple render() operations. Use different canvas or ensure previous operations were cancelled or completed.");
      DA.#g.add(this._canvas);
    }
    this._pdfBug && globalThis.StepperManager?.enabled && (this.stepper = globalThis.StepperManager.create(this._pageIndex), this.stepper.init(this.operatorList), this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint());
    const {
      canvasContext: C,
      viewport: A,
      transform: d,
      background: Z
    } = this.params;
    this.gfx = new yA(C, this.commonObjs, this.objs, this.canvasFactory, this.filterFactory, {
      optionalContentConfig: g
    }, this.annotationCanvasMap, this.pageColors), this.gfx.beginDrawing({
      transform: d,
      viewport: A,
      transparency: I,
      background: Z
    }), this.operatorListIdx = 0, this.graphicsReady = !0, this.graphicsReadyCallback?.();
  }
  cancel(I = null, g = 0) {
    this.running = !1, this.cancelled = !0, this.gfx?.endDrawing(), this.#I && (window.cancelAnimationFrame(this.#I), this.#I = null), DA.#g.delete(this._canvas), this.callback(I || new CZ(`Rendering cancelled, page ${this._pageIndex + 1}`, g));
  }
  operatorListChanged() {
    if (!this.graphicsReady) {
      this.graphicsReadyCallback ||= this._continueBound;
      return;
    }
    this.stepper?.updateOperatorList(this.operatorList), !this.running && this._continue();
  }
  _continue() {
    this.running = !0, !this.cancelled && (this.task.onContinue ? this.task.onContinue(this._scheduleNextBound) : this._scheduleNext());
  }
  _scheduleNext() {
    this._useRequestAnimationFrame ? this.#I = window.requestAnimationFrame(() => {
      this.#I = null, this._nextBound().catch(this._cancelBound);
    }) : Promise.resolve().then(this._nextBound).catch(this._cancelBound);
  }
  async _next() {
    this.cancelled || (this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continueBound, this.stepper), this.operatorListIdx === this.operatorList.argsArray.length && (this.running = !1, this.operatorList.lastChunk && (this.gfx.endDrawing(), DA.#g.delete(this._canvas), this.callback())));
  }
}
const Oc = "4.10.38", fc = "f9bea397f";
function Vi(l) {
  return Math.floor(Math.max(0, Math.min(1, l)) * 255).toString(16).padStart(2, "0");
}
function fA(l) {
  return Math.max(0, Math.min(255, 255 * l));
}
class Wi {
  static CMYK_G([I, g, C, A]) {
    return ["G", 1 - Math.min(1, 0.3 * I + 0.59 * C + 0.11 * g + A)];
  }
  static G_CMYK([I]) {
    return ["CMYK", 0, 0, 0, 1 - I];
  }
  static G_RGB([I]) {
    return ["RGB", I, I, I];
  }
  static G_rgb([I]) {
    return I = fA(I), [I, I, I];
  }
  static G_HTML([I]) {
    const g = Vi(I);
    return `#${g}${g}${g}`;
  }
  static RGB_G([I, g, C]) {
    return ["G", 0.3 * I + 0.59 * g + 0.11 * C];
  }
  static RGB_rgb(I) {
    return I.map(fA);
  }
  static RGB_HTML(I) {
    return `#${I.map(Vi).join("")}`;
  }
  static T_HTML() {
    return "#00000000";
  }
  static T_rgb() {
    return [null];
  }
  static CMYK_RGB([I, g, C, A]) {
    return ["RGB", 1 - Math.min(1, I + A), 1 - Math.min(1, C + A), 1 - Math.min(1, g + A)];
  }
  static CMYK_rgb([I, g, C, A]) {
    return [fA(1 - Math.min(1, I + A)), fA(1 - Math.min(1, C + A)), fA(1 - Math.min(1, g + A))];
  }
  static CMYK_HTML(I) {
    const g = this.CMYK_RGB(I).slice(1);
    return this.RGB_HTML(g);
  }
  static RGB_CMYK([I, g, C]) {
    const A = 1 - I, d = 1 - g, Z = 1 - C, i = Math.min(A, d, Z);
    return ["CMYK", A, d, Z, i];
  }
}
class Pc {
  create(I, g, C = !1) {
    if (I <= 0 || g <= 0)
      throw new Error("Invalid SVG dimensions");
    const A = this._createSVG("svg:svg");
    return A.setAttribute("version", "1.1"), C || (A.setAttribute("width", `${I}px`), A.setAttribute("height", `${g}px`)), A.setAttribute("preserveAspectRatio", "none"), A.setAttribute("viewBox", `0 0 ${I} ${g}`), A;
  }
  createElement(I) {
    if (typeof I != "string")
      throw new Error("Invalid SVG element type");
    return this._createSVG(I);
  }
  _createSVG(I) {
    _I("Abstract method `_createSVG` called.");
  }
}
class cZ extends Pc {
  _createSVG(I) {
    return document.createElementNS(wC, I);
  }
}
class MB {
  static setupStorage(I, g, C, A, d) {
    const Z = A.getValue(g, {
      value: null
    });
    switch (C.name) {
      case "textarea":
        if (Z.value !== null && (I.textContent = Z.value), d === "print")
          break;
        I.addEventListener("input", (i) => {
          A.setValue(g, {
            value: i.target.value
          });
        });
        break;
      case "input":
        if (C.attributes.type === "radio" || C.attributes.type === "checkbox") {
          if (Z.value === C.attributes.xfaOn ? I.setAttribute("checked", !0) : Z.value === C.attributes.xfaOff && I.removeAttribute("checked"), d === "print")
            break;
          I.addEventListener("change", (i) => {
            A.setValue(g, {
              value: i.target.checked ? i.target.getAttribute("xfaOn") : i.target.getAttribute("xfaOff")
            });
          });
        } else {
          if (Z.value !== null && I.setAttribute("value", Z.value), d === "print")
            break;
          I.addEventListener("input", (i) => {
            A.setValue(g, {
              value: i.target.value
            });
          });
        }
        break;
      case "select":
        if (Z.value !== null) {
          I.setAttribute("value", Z.value);
          for (const i of C.children)
            i.attributes.value === Z.value ? i.attributes.selected = !0 : i.attributes.hasOwnProperty("selected") && delete i.attributes.selected;
        }
        I.addEventListener("input", (i) => {
          const B = i.target.options, F = B.selectedIndex === -1 ? "" : B[B.selectedIndex].value;
          A.setValue(g, {
            value: F
          });
        });
        break;
    }
  }
  static setAttributes({
    html: I,
    element: g,
    storage: C = null,
    intent: A,
    linkService: d
  }) {
    const {
      attributes: Z
    } = g, i = I instanceof HTMLAnchorElement;
    Z.type === "radio" && (Z.name = `${Z.name}-${A}`);
    for (const [B, F] of Object.entries(Z))
      if (F != null)
        switch (B) {
          case "class":
            F.length && I.setAttribute(B, F.join(" "));
            break;
          case "dataId":
            break;
          case "id":
            I.setAttribute("data-element-id", F);
            break;
          case "style":
            Object.assign(I.style, F);
            break;
          case "textContent":
            I.textContent = F;
            break;
          default:
            (!i || B !== "href" && B !== "newWindow") && I.setAttribute(B, F);
        }
    i && d.addLinkAttributes(I, Z.href, Z.newWindow), C && Z.dataId && this.setupStorage(I, Z.dataId, g, C);
  }
  static render(I) {
    const g = I.annotationStorage, C = I.linkService, A = I.xfaHtml, d = I.intent || "display", Z = document.createElement(A.name);
    A.attributes && this.setAttributes({
      html: Z,
      element: A,
      intent: d,
      linkService: C
    });
    const i = d !== "richText", B = I.div;
    if (B.append(Z), I.viewport) {
      const c = `matrix(${I.viewport.transform.join(",")})`;
      B.style.transform = c;
    }
    i && B.setAttribute("class", "xfaLayer xfaFont");
    const F = [];
    if (A.children.length === 0) {
      if (A.value) {
        const c = document.createTextNode(A.value);
        Z.append(c), i && tl.shouldBuildText(A.name) && F.push(c);
      }
      return {
        textDivs: F
      };
    }
    const s = [[A, -1, Z]];
    for (; s.length > 0; ) {
      const [c, G, V] = s.at(-1);
      if (G + 1 === c.children.length) {
        s.pop();
        continue;
      }
      const W = c.children[++s.at(-1)[1]];
      if (W === null)
        continue;
      const {
        name: R
      } = W;
      if (R === "#text") {
        const n = document.createTextNode(W.value);
        F.push(n), V.append(n);
        continue;
      }
      const U = W?.attributes?.xmlns ? document.createElementNS(W.attributes.xmlns, R) : document.createElement(R);
      if (V.append(U), W.attributes && this.setAttributes({
        html: U,
        element: W,
        storage: g,
        intent: d,
        linkService: C
      }), W.children?.length > 0)
        s.push([W, -1, U]);
      else if (W.value) {
        const n = document.createTextNode(W.value);
        i && tl.shouldBuildText(R) && F.push(n), U.append(n);
      }
    }
    for (const c of B.querySelectorAll(".xfaNonInteractive input, .xfaNonInteractive textarea"))
      c.setAttribute("readOnly", !0);
    return {
      textDivs: F
    };
  }
  static update(I) {
    const g = `matrix(${I.viewport.transform.join(",")})`;
    I.div.style.transform = g, I.div.hidden = !1;
  }
}
const yl = 1e3, qc = 9, GA = /* @__PURE__ */ new WeakSet();
function EC(l) {
  return {
    width: l[2] - l[0],
    height: l[3] - l[1]
  };
}
class _c {
  static create(I) {
    switch (I.data.annotationType) {
      case cg.LINK:
        return new yB(I);
      case cg.TEXT:
        return new $c(I);
      case cg.WIDGET:
        switch (I.data.fieldType) {
          case "Tx":
            return new IG(I);
          case "Btn":
            return I.data.radioButton ? new XB(I) : I.data.checkBox ? new CG(I) : new AG(I);
          case "Ch":
            return new lG(I);
          case "Sig":
            return new gG(I);
        }
        return new VA(I);
      case cg.POPUP:
        return new y0(I);
      case cg.FREETEXT:
        return new HB(I);
      case cg.LINE:
        return new ZG(I);
      case cg.SQUARE:
        return new iG(I);
      case cg.CIRCLE:
        return new BG(I);
      case cg.POLYLINE:
        return new pB(I);
      case cg.CARET:
        return new sG(I);
      case cg.INK:
        return new GZ(I);
      case cg.POLYGON:
        return new FG(I);
      case cg.HIGHLIGHT:
        return new kB(I);
      case cg.UNDERLINE:
        return new cG(I);
      case cg.SQUIGGLY:
        return new GG(I);
      case cg.STRIKEOUT:
        return new VG(I);
      case cg.STAMP:
        return new KB(I);
      case cg.FILEATTACHMENT:
        return new WG(I);
      default:
        return new dg(I);
    }
  }
}
class dg {
  #I = null;
  #g = !1;
  #C = null;
  constructor(I, {
    isRenderable: g = !1,
    ignoreBorder: C = !1,
    createQuadrilaterals: A = !1
  } = {}) {
    this.isRenderable = g, this.data = I.data, this.layer = I.layer, this.linkService = I.linkService, this.downloadManager = I.downloadManager, this.imageResourcesPath = I.imageResourcesPath, this.renderForms = I.renderForms, this.svgFactory = I.svgFactory, this.annotationStorage = I.annotationStorage, this.enableScripting = I.enableScripting, this.hasJSActions = I.hasJSActions, this._fieldObjects = I.fieldObjects, this.parent = I.parent, g && (this.container = this._createContainer(C)), A && this._createQuadrilaterals();
  }
  static _hasPopupData({
    titleObj: I,
    contentsObj: g,
    richText: C
  }) {
    return !!(I?.str || g?.str || C?.str);
  }
  get _isEditable() {
    return this.data.isEditable;
  }
  get hasPopupData() {
    return dg._hasPopupData(this.data);
  }
  updateEdited(I) {
    if (!this.container)
      return;
    this.#I ||= {
      rect: this.data.rect.slice(0)
    };
    const {
      rect: g
    } = I;
    g && this.#A(g), this.#C?.popup.updateEdited(I);
  }
  resetEdited() {
    this.#I && (this.#A(this.#I.rect), this.#C?.popup.resetEdited(), this.#I = null);
  }
  #A(I) {
    const {
      container: {
        style: g
      },
      data: {
        rect: C,
        rotation: A
      },
      parent: {
        viewport: {
          rawDims: {
            pageWidth: d,
            pageHeight: Z,
            pageX: i,
            pageY: B
          }
        }
      }
    } = this;
    C?.splice(0, 4, ...I);
    const {
      width: F,
      height: s
    } = EC(I);
    g.left = `${100 * (I[0] - i) / d}%`, g.top = `${100 * (Z - I[3] + B) / Z}%`, A === 0 ? (g.width = `${100 * F / d}%`, g.height = `${100 * s / Z}%`) : this.setRotation(A);
  }
  _createContainer(I) {
    const {
      data: g,
      parent: {
        page: C,
        viewport: A
      }
    } = this, d = document.createElement("section");
    d.setAttribute("data-annotation-id", g.id), this instanceof VA || (d.tabIndex = yl);
    const {
      style: Z
    } = d;
    if (Z.zIndex = this.parent.zIndex++, g.alternativeText && (d.title = g.alternativeText), g.noRotate && d.classList.add("norotate"), !g.rect || this instanceof y0) {
      const {
        rotation: R
      } = g;
      return !g.hasOwnCanvas && R !== 0 && this.setRotation(R, d), d;
    }
    const {
      width: i,
      height: B
    } = EC(g.rect);
    if (!I && g.borderStyle.width > 0) {
      Z.borderWidth = `${g.borderStyle.width}px`;
      const R = g.borderStyle.horizontalCornerRadius, U = g.borderStyle.verticalCornerRadius;
      if (R > 0 || U > 0) {
        const m = `calc(${R}px * var(--scale-factor)) / calc(${U}px * var(--scale-factor))`;
        Z.borderRadius = m;
      } else if (this instanceof XB) {
        const m = `calc(${i}px * var(--scale-factor)) / calc(${B}px * var(--scale-factor))`;
        Z.borderRadius = m;
      }
      switch (g.borderStyle.style) {
        case vA.SOLID:
          Z.borderStyle = "solid";
          break;
        case vA.DASHED:
          Z.borderStyle = "dashed";
          break;
        case vA.BEVELED:
          DI("Unimplemented border style: beveled");
          break;
        case vA.INSET:
          DI("Unimplemented border style: inset");
          break;
        case vA.UNDERLINE:
          Z.borderBottomStyle = "solid";
          break;
      }
      const n = g.borderColor || null;
      n ? (this.#g = !0, Z.borderColor = iI.makeHexColor(n[0] | 0, n[1] | 0, n[2] | 0)) : Z.borderWidth = 0;
    }
    const F = iI.normalizeRect([g.rect[0], C.view[3] - g.rect[1] + C.view[1], g.rect[2], C.view[3] - g.rect[3] + C.view[1]]), {
      pageWidth: s,
      pageHeight: c,
      pageX: G,
      pageY: V
    } = A.rawDims;
    Z.left = `${100 * (F[0] - G) / s}%`, Z.top = `${100 * (F[1] - V) / c}%`;
    const {
      rotation: W
    } = g;
    return g.hasOwnCanvas || W === 0 ? (Z.width = `${100 * i / s}%`, Z.height = `${100 * B / c}%`) : this.setRotation(W, d), d;
  }
  setRotation(I, g = this.container) {
    if (!this.data.rect)
      return;
    const {
      pageWidth: C,
      pageHeight: A
    } = this.parent.viewport.rawDims, {
      width: d,
      height: Z
    } = EC(this.data.rect);
    let i, B;
    I % 180 === 0 ? (i = 100 * d / C, B = 100 * Z / A) : (i = 100 * Z / C, B = 100 * d / A), g.style.width = `${i}%`, g.style.height = `${B}%`, g.setAttribute("data-main-rotation", (360 - I) % 360);
  }
  get _commonActions() {
    const I = (g, C, A) => {
      const d = A.detail[g], Z = d[0], i = d.slice(1);
      A.target.style[C] = Wi[`${Z}_HTML`](i), this.annotationStorage.setValue(this.data.id, {
        [C]: Wi[`${Z}_rgb`](i)
      });
    };
    return uI(this, "_commonActions", {
      display: (g) => {
        const {
          display: C
        } = g.detail, A = C % 2 === 1;
        this.container.style.visibility = A ? "hidden" : "visible", this.annotationStorage.setValue(this.data.id, {
          noView: A,
          noPrint: C === 1 || C === 2
        });
      },
      print: (g) => {
        this.annotationStorage.setValue(this.data.id, {
          noPrint: !g.detail.print
        });
      },
      hidden: (g) => {
        const {
          hidden: C
        } = g.detail;
        this.container.style.visibility = C ? "hidden" : "visible", this.annotationStorage.setValue(this.data.id, {
          noPrint: C,
          noView: C
        });
      },
      focus: (g) => {
        setTimeout(() => g.target.focus({
          preventScroll: !1
        }), 0);
      },
      userName: (g) => {
        g.target.title = g.detail.userName;
      },
      readonly: (g) => {
        g.target.disabled = g.detail.readonly;
      },
      required: (g) => {
        this._setRequired(g.target, g.detail.required);
      },
      bgColor: (g) => {
        I("bgColor", "backgroundColor", g);
      },
      fillColor: (g) => {
        I("fillColor", "backgroundColor", g);
      },
      fgColor: (g) => {
        I("fgColor", "color", g);
      },
      textColor: (g) => {
        I("textColor", "color", g);
      },
      borderColor: (g) => {
        I("borderColor", "borderColor", g);
      },
      strokeColor: (g) => {
        I("strokeColor", "borderColor", g);
      },
      rotation: (g) => {
        const C = g.detail.rotation;
        this.setRotation(C), this.annotationStorage.setValue(this.data.id, {
          rotation: C
        });
      }
    });
  }
  _dispatchEventFromSandbox(I, g) {
    const C = this._commonActions;
    for (const A of Object.keys(g.detail))
      (I[A] || C[A])?.(g);
  }
  _setDefaultPropertiesFromJS(I) {
    if (!this.enableScripting)
      return;
    const g = this.annotationStorage.getRawValue(this.data.id);
    if (!g)
      return;
    const C = this._commonActions;
    for (const [A, d] of Object.entries(g)) {
      const Z = C[A];
      if (Z) {
        const i = {
          detail: {
            [A]: d
          },
          target: I
        };
        Z(i), delete g[A];
      }
    }
  }
  _createQuadrilaterals() {
    if (!this.container)
      return;
    const {
      quadPoints: I
    } = this.data;
    if (!I)
      return;
    const [g, C, A, d] = this.data.rect.map((R) => Math.fround(R));
    if (I.length === 8) {
      const [R, U, n, m] = I.subarray(2, 6);
      if (A === R && d === U && g === n && C === m)
        return;
    }
    const {
      style: Z
    } = this.container;
    let i;
    if (this.#g) {
      const {
        borderColor: R,
        borderWidth: U
      } = Z;
      Z.borderWidth = 0, i = ["url('data:image/svg+xml;utf8,", '<svg xmlns="http://www.w3.org/2000/svg"', ' preserveAspectRatio="none" viewBox="0 0 1 1">', `<g fill="transparent" stroke="${R}" stroke-width="${U}">`], this.container.classList.add("hasBorder");
    }
    const B = A - g, F = d - C, {
      svgFactory: s
    } = this, c = s.createElement("svg");
    c.classList.add("quadrilateralsContainer"), c.setAttribute("width", 0), c.setAttribute("height", 0);
    const G = s.createElement("defs");
    c.append(G);
    const V = s.createElement("clipPath"), W = `clippath_${this.data.id}`;
    V.setAttribute("id", W), V.setAttribute("clipPathUnits", "objectBoundingBox"), G.append(V);
    for (let R = 2, U = I.length; R < U; R += 8) {
      const n = I[R], m = I[R + 1], e = I[R + 2], N = I[R + 3], w = s.createElement("rect"), S = (e - g) / B, Y = (d - m) / F, M = (n - e) / B, y = (m - N) / F;
      w.setAttribute("x", S), w.setAttribute("y", Y), w.setAttribute("width", M), w.setAttribute("height", y), V.append(w), i?.push(`<rect vector-effect="non-scaling-stroke" x="${S}" y="${Y}" width="${M}" height="${y}"/>`);
    }
    this.#g && (i.push("</g></svg>')"), Z.backgroundImage = i.join("")), this.container.append(c), this.container.style.clipPath = `url(#${W})`;
  }
  _createPopup() {
    const {
      data: I
    } = this, g = this.#C = new y0({
      data: {
        color: I.color,
        titleObj: I.titleObj,
        modificationDate: I.modificationDate,
        contentsObj: I.contentsObj,
        richText: I.richText,
        parentRect: I.rect,
        borderStyle: 0,
        id: `popup_${I.id}`,
        rotation: I.rotation
      },
      parent: this.parent,
      elements: [this]
    });
    this.parent.div.append(g.render());
  }
  render() {
    _I("Abstract method `AnnotationElement.render` called");
  }
  _getElementsByName(I, g = null) {
    const C = [];
    if (this._fieldObjects) {
      const A = this._fieldObjects[I];
      if (A)
        for (const {
          page: d,
          id: Z,
          exportValues: i
        } of A) {
          if (d === -1 || Z === g)
            continue;
          const B = typeof i == "string" ? i : null, F = document.querySelector(`[data-element-id="${Z}"]`);
          if (F && !GA.has(F)) {
            DI(`_getElementsByName - element not allowed: ${Z}`);
            continue;
          }
          C.push({
            id: Z,
            exportValue: B,
            domElement: F
          });
        }
      return C;
    }
    for (const A of document.getElementsByName(I)) {
      const {
        exportValue: d
      } = A, Z = A.getAttribute("data-element-id");
      Z !== g && GA.has(A) && C.push({
        id: Z,
        exportValue: d,
        domElement: A
      });
    }
    return C;
  }
  show() {
    this.container && (this.container.hidden = !1), this.popup?.maybeShow();
  }
  hide() {
    this.container && (this.container.hidden = !0), this.popup?.forceHide();
  }
  getElementsToTriggerPopup() {
    return this.container;
  }
  addHighlightArea() {
    const I = this.getElementsToTriggerPopup();
    if (Array.isArray(I))
      for (const g of I)
        g.classList.add("highlightArea");
    else
      I.classList.add("highlightArea");
  }
  _editOnDoubleClick() {
    if (!this._isEditable)
      return;
    const {
      annotationEditorType: I,
      data: {
        id: g
      }
    } = this;
    this.container.addEventListener("dblclick", () => {
      this.linkService.eventBus?.dispatch("switchannotationeditormode", {
        source: this,
        mode: I,
        editId: g
      });
    });
  }
}
class yB extends dg {
  constructor(I, g = null) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !!g?.ignoreBorder,
      createQuadrilaterals: !0
    }), this.isTooltipOnly = I.data.isTooltipOnly;
  }
  render() {
    const {
      data: I,
      linkService: g
    } = this, C = document.createElement("a");
    C.setAttribute("data-element-id", I.id);
    let A = !1;
    return I.url ? (g.addLinkAttributes(C, I.url, I.newWindow), A = !0) : I.action ? (this._bindNamedAction(C, I.action), A = !0) : I.attachment ? (this.#g(C, I.attachment, I.attachmentDest), A = !0) : I.setOCGState ? (this.#C(C, I.setOCGState), A = !0) : I.dest ? (this._bindLink(C, I.dest), A = !0) : (I.actions && (I.actions.Action || I.actions["Mouse Up"] || I.actions["Mouse Down"]) && this.enableScripting && this.hasJSActions && (this._bindJSAction(C, I), A = !0), I.resetForm ? (this._bindResetFormAction(C, I.resetForm), A = !0) : this.isTooltipOnly && !A && (this._bindLink(C, ""), A = !0)), this.container.classList.add("linkAnnotation"), A && this.container.append(C), this.container;
  }
  #I() {
    this.container.setAttribute("data-internal-link", "");
  }
  _bindLink(I, g) {
    I.href = this.linkService.getDestinationHash(g), I.onclick = () => (g && this.linkService.goToDestination(g), !1), (g || g === "") && this.#I();
  }
  _bindNamedAction(I, g) {
    I.href = this.linkService.getAnchorUrl(""), I.onclick = () => (this.linkService.executeNamedAction(g), !1), this.#I();
  }
  #g(I, g, C = null) {
    I.href = this.linkService.getAnchorUrl(""), g.description && (I.title = g.description), I.onclick = () => (this.downloadManager?.openOrDownloadData(g.content, g.filename, C), !1), this.#I();
  }
  #C(I, g) {
    I.href = this.linkService.getAnchorUrl(""), I.onclick = () => (this.linkService.executeSetOCGState(g), !1), this.#I();
  }
  _bindJSAction(I, g) {
    I.href = this.linkService.getAnchorUrl("");
    const C = /* @__PURE__ */ new Map([["Action", "onclick"], ["Mouse Up", "onmouseup"], ["Mouse Down", "onmousedown"]]);
    for (const A of Object.keys(g.actions)) {
      const d = C.get(A);
      d && (I[d] = () => (this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
        source: this,
        detail: {
          id: g.id,
          name: A
        }
      }), !1));
    }
    I.onclick || (I.onclick = () => !1), this.#I();
  }
  _bindResetFormAction(I, g) {
    const C = I.onclick;
    if (C || (I.href = this.linkService.getAnchorUrl("")), this.#I(), !this._fieldObjects) {
      DI('_bindResetFormAction - "resetForm" action not supported, ensure that the `fieldObjects` parameter is provided.'), C || (I.onclick = () => !1);
      return;
    }
    I.onclick = () => {
      C?.();
      const {
        fields: A,
        refs: d,
        include: Z
      } = g, i = [];
      if (A.length !== 0 || d.length !== 0) {
        const s = new Set(d);
        for (const c of A) {
          const G = this._fieldObjects[c] || [];
          for (const {
            id: V
          } of G)
            s.add(V);
        }
        for (const c of Object.values(this._fieldObjects))
          for (const G of c)
            s.has(G.id) === Z && i.push(G);
      } else
        for (const s of Object.values(this._fieldObjects))
          i.push(...s);
      const B = this.annotationStorage, F = [];
      for (const s of i) {
        const {
          id: c
        } = s;
        switch (F.push(c), s.type) {
          case "text": {
            const V = s.defaultValue || "";
            B.setValue(c, {
              value: V
            });
            break;
          }
          case "checkbox":
          case "radiobutton": {
            const V = s.defaultValue === s.exportValues;
            B.setValue(c, {
              value: V
            });
            break;
          }
          case "combobox":
          case "listbox": {
            const V = s.defaultValue || "";
            B.setValue(c, {
              value: V
            });
            break;
          }
          default:
            continue;
        }
        const G = document.querySelector(`[data-element-id="${c}"]`);
        if (G) {
          if (!GA.has(G)) {
            DI(`_bindResetFormAction - element not allowed: ${c}`);
            continue;
          }
        } else continue;
        G.dispatchEvent(new Event("resetform"));
      }
      return this.enableScripting && this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
        source: this,
        detail: {
          id: "app",
          ids: F,
          name: "ResetForm"
        }
      }), !1;
    };
  }
}
class $c extends dg {
  constructor(I) {
    super(I, {
      isRenderable: !0
    });
  }
  render() {
    this.container.classList.add("textAnnotation");
    const I = document.createElement("img");
    return I.src = this.imageResourcesPath + "annotation-" + this.data.name.toLowerCase() + ".svg", I.setAttribute("data-l10n-id", "pdfjs-text-annotation-type"), I.setAttribute("data-l10n-args", JSON.stringify({
      type: this.data.name
    })), !this.data.popupRef && this.hasPopupData && this._createPopup(), this.container.append(I), this.container;
  }
}
class VA extends dg {
  render() {
    return this.container;
  }
  showElementAndHideCanvas(I) {
    this.data.hasOwnCanvas && (I.previousSibling?.nodeName === "CANVAS" && (I.previousSibling.hidden = !0), I.hidden = !1);
  }
  _getKeyModifier(I) {
    return ug.platform.isMac ? I.metaKey : I.ctrlKey;
  }
  _setEventListener(I, g, C, A, d) {
    C.includes("mouse") ? I.addEventListener(C, (Z) => {
      this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
        source: this,
        detail: {
          id: this.data.id,
          name: A,
          value: d(Z),
          shift: Z.shiftKey,
          modifier: this._getKeyModifier(Z)
        }
      });
    }) : I.addEventListener(C, (Z) => {
      if (C === "blur") {
        if (!g.focused || !Z.relatedTarget)
          return;
        g.focused = !1;
      } else if (C === "focus") {
        if (g.focused)
          return;
        g.focused = !0;
      }
      d && this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
        source: this,
        detail: {
          id: this.data.id,
          name: A,
          value: d(Z)
        }
      });
    });
  }
  _setEventListeners(I, g, C, A) {
    for (const [d, Z] of C)
      (Z === "Action" || this.data.actions?.[Z]) && ((Z === "Focus" || Z === "Blur") && (g ||= {
        focused: !1
      }), this._setEventListener(I, g, d, Z, A), Z === "Focus" && !this.data.actions?.Blur ? this._setEventListener(I, g, "blur", "Blur", null) : Z === "Blur" && !this.data.actions?.Focus && this._setEventListener(I, g, "focus", "Focus", null));
  }
  _setBackgroundColor(I) {
    const g = this.data.backgroundColor || null;
    I.style.backgroundColor = g === null ? "transparent" : iI.makeHexColor(g[0], g[1], g[2]);
  }
  _setTextStyle(I) {
    const g = ["left", "center", "right"], {
      fontColor: C
    } = this.data.defaultAppearanceData, A = this.data.defaultAppearanceData.fontSize || qc, d = I.style;
    let Z;
    const i = 2, B = (F) => Math.round(10 * F) / 10;
    if (this.data.multiLine) {
      const F = Math.abs(this.data.rect[3] - this.data.rect[1] - i), s = Math.round(F / (i0 * A)) || 1, c = F / s;
      Z = Math.min(A, B(c / i0));
    } else {
      const F = Math.abs(this.data.rect[3] - this.data.rect[1] - i);
      Z = Math.min(A, B(F / i0));
    }
    d.fontSize = `calc(${Z}px * var(--scale-factor))`, d.color = iI.makeHexColor(C[0], C[1], C[2]), this.data.textAlignment !== null && (d.textAlign = g[this.data.textAlignment]);
  }
  _setRequired(I, g) {
    g ? I.setAttribute("required", !0) : I.removeAttribute("required"), I.setAttribute("aria-required", g);
  }
}
class IG extends VA {
  constructor(I) {
    const g = I.renderForms || I.data.hasOwnCanvas || !I.data.hasAppearance && !!I.data.fieldValue;
    super(I, {
      isRenderable: g
    });
  }
  setPropertyOnSiblings(I, g, C, A) {
    const d = this.annotationStorage;
    for (const Z of this._getElementsByName(I.name, I.id))
      Z.domElement && (Z.domElement[g] = C), d.setValue(Z.id, {
        [A]: C
      });
  }
  render() {
    const I = this.annotationStorage, g = this.data.id;
    this.container.classList.add("textWidgetAnnotation");
    let C = null;
    if (this.renderForms) {
      const A = I.getValue(g, {
        value: this.data.fieldValue
      });
      let d = A.value || "";
      const Z = I.getValue(g, {
        charLimit: this.data.maxLen
      }).charLimit;
      Z && d.length > Z && (d = d.slice(0, Z));
      let i = A.formattedValue || this.data.textContent?.join(`
`) || null;
      i && this.data.comb && (i = i.replaceAll(/\s+/g, ""));
      const B = {
        userValue: d,
        formattedValue: i,
        lastCommittedValue: null,
        commitKey: 1,
        focused: !1
      };
      this.data.multiLine ? (C = document.createElement("textarea"), C.textContent = i ?? d, this.data.doNotScroll && (C.style.overflowY = "hidden")) : (C = document.createElement("input"), C.type = "text", C.setAttribute("value", i ?? d), this.data.doNotScroll && (C.style.overflowX = "hidden")), this.data.hasOwnCanvas && (C.hidden = !0), GA.add(C), C.setAttribute("data-element-id", g), C.disabled = this.data.readOnly, C.name = this.data.fieldName, C.tabIndex = yl, this._setRequired(C, this.data.required), Z && (C.maxLength = Z), C.addEventListener("input", (s) => {
        I.setValue(g, {
          value: s.target.value
        }), this.setPropertyOnSiblings(C, "value", s.target.value, "value"), B.formattedValue = null;
      }), C.addEventListener("resetform", (s) => {
        const c = this.data.defaultFieldValue ?? "";
        C.value = B.userValue = c, B.formattedValue = null;
      });
      let F = (s) => {
        const {
          formattedValue: c
        } = B;
        c != null && (s.target.value = c), s.target.scrollLeft = 0;
      };
      if (this.enableScripting && this.hasJSActions) {
        C.addEventListener("focus", (c) => {
          if (B.focused)
            return;
          const {
            target: G
          } = c;
          B.userValue && (G.value = B.userValue), B.lastCommittedValue = G.value, B.commitKey = 1, this.data.actions?.Focus || (B.focused = !0);
        }), C.addEventListener("updatefromsandbox", (c) => {
          this.showElementAndHideCanvas(c.target);
          const G = {
            value(V) {
              B.userValue = V.detail.value ?? "", I.setValue(g, {
                value: B.userValue.toString()
              }), V.target.value = B.userValue;
            },
            formattedValue(V) {
              const {
                formattedValue: W
              } = V.detail;
              B.formattedValue = W, W != null && V.target !== document.activeElement && (V.target.value = W), I.setValue(g, {
                formattedValue: W
              });
            },
            selRange(V) {
              V.target.setSelectionRange(...V.detail.selRange);
            },
            charLimit: (V) => {
              const {
                charLimit: W
              } = V.detail, {
                target: R
              } = V;
              if (W === 0) {
                R.removeAttribute("maxLength");
                return;
              }
              R.setAttribute("maxLength", W);
              let U = B.userValue;
              !U || U.length <= W || (U = U.slice(0, W), R.value = B.userValue = U, I.setValue(g, {
                value: U
              }), this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
                source: this,
                detail: {
                  id: g,
                  name: "Keystroke",
                  value: U,
                  willCommit: !0,
                  commitKey: 1,
                  selStart: R.selectionStart,
                  selEnd: R.selectionEnd
                }
              }));
            }
          };
          this._dispatchEventFromSandbox(G, c);
        }), C.addEventListener("keydown", (c) => {
          B.commitKey = 1;
          let G = -1;
          if (c.key === "Escape" ? G = 0 : c.key === "Enter" && !this.data.multiLine ? G = 2 : c.key === "Tab" && (B.commitKey = 3), G === -1)
            return;
          const {
            value: V
          } = c.target;
          B.lastCommittedValue !== V && (B.lastCommittedValue = V, B.userValue = V, this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
            source: this,
            detail: {
              id: g,
              name: "Keystroke",
              value: V,
              willCommit: !0,
              commitKey: G,
              selStart: c.target.selectionStart,
              selEnd: c.target.selectionEnd
            }
          }));
        });
        const s = F;
        F = null, C.addEventListener("blur", (c) => {
          if (!B.focused || !c.relatedTarget)
            return;
          this.data.actions?.Blur || (B.focused = !1);
          const {
            value: G
          } = c.target;
          B.userValue = G, B.lastCommittedValue !== G && this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
            source: this,
            detail: {
              id: g,
              name: "Keystroke",
              value: G,
              willCommit: !0,
              commitKey: B.commitKey,
              selStart: c.target.selectionStart,
              selEnd: c.target.selectionEnd
            }
          }), s(c);
        }), this.data.actions?.Keystroke && C.addEventListener("beforeinput", (c) => {
          B.lastCommittedValue = null;
          const {
            data: G,
            target: V
          } = c, {
            value: W,
            selectionStart: R,
            selectionEnd: U
          } = V;
          let n = R, m = U;
          switch (c.inputType) {
            case "deleteWordBackward": {
              const e = W.substring(0, R).match(/\w*[^\w]*$/);
              e && (n -= e[0].length);
              break;
            }
            case "deleteWordForward": {
              const e = W.substring(R).match(/^[^\w]*\w*/);
              e && (m += e[0].length);
              break;
            }
            case "deleteContentBackward":
              R === U && (n -= 1);
              break;
            case "deleteContentForward":
              R === U && (m += 1);
              break;
          }
          c.preventDefault(), this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
            source: this,
            detail: {
              id: g,
              name: "Keystroke",
              value: W,
              change: G || "",
              willCommit: !1,
              selStart: n,
              selEnd: m
            }
          });
        }), this._setEventListeners(C, B, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], (c) => c.target.value);
      }
      if (F && C.addEventListener("blur", F), this.data.comb) {
        const c = (this.data.rect[2] - this.data.rect[0]) / Z;
        C.classList.add("comb"), C.style.letterSpacing = `calc(${c}px * var(--scale-factor) - 1ch)`;
      }
    } else
      C = document.createElement("div"), C.textContent = this.data.fieldValue, C.style.verticalAlign = "middle", C.style.display = "table-cell", this.data.hasOwnCanvas && (C.hidden = !0);
    return this._setTextStyle(C), this._setBackgroundColor(C), this._setDefaultPropertiesFromJS(C), this.container.append(C), this.container;
  }
}
class gG extends VA {
  constructor(I) {
    super(I, {
      isRenderable: !!I.data.hasOwnCanvas
    });
  }
}
class CG extends VA {
  constructor(I) {
    super(I, {
      isRenderable: I.renderForms
    });
  }
  render() {
    const I = this.annotationStorage, g = this.data, C = g.id;
    let A = I.getValue(C, {
      value: g.exportValue === g.fieldValue
    }).value;
    typeof A == "string" && (A = A !== "Off", I.setValue(C, {
      value: A
    })), this.container.classList.add("buttonWidgetAnnotation", "checkBox");
    const d = document.createElement("input");
    return GA.add(d), d.setAttribute("data-element-id", C), d.disabled = g.readOnly, this._setRequired(d, this.data.required), d.type = "checkbox", d.name = g.fieldName, A && d.setAttribute("checked", !0), d.setAttribute("exportValue", g.exportValue), d.tabIndex = yl, d.addEventListener("change", (Z) => {
      const {
        name: i,
        checked: B
      } = Z.target;
      for (const F of this._getElementsByName(i, C)) {
        const s = B && F.exportValue === g.exportValue;
        F.domElement && (F.domElement.checked = s), I.setValue(F.id, {
          value: s
        });
      }
      I.setValue(C, {
        value: B
      });
    }), d.addEventListener("resetform", (Z) => {
      const i = g.defaultFieldValue || "Off";
      Z.target.checked = i === g.exportValue;
    }), this.enableScripting && this.hasJSActions && (d.addEventListener("updatefromsandbox", (Z) => {
      const i = {
        value(B) {
          B.target.checked = B.detail.value !== "Off", I.setValue(C, {
            value: B.target.checked
          });
        }
      };
      this._dispatchEventFromSandbox(i, Z);
    }), this._setEventListeners(d, null, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], (Z) => Z.target.checked)), this._setBackgroundColor(d), this._setDefaultPropertiesFromJS(d), this.container.append(d), this.container;
  }
}
class XB extends VA {
  constructor(I) {
    super(I, {
      isRenderable: I.renderForms
    });
  }
  render() {
    this.container.classList.add("buttonWidgetAnnotation", "radioButton");
    const I = this.annotationStorage, g = this.data, C = g.id;
    let A = I.getValue(C, {
      value: g.fieldValue === g.buttonValue
    }).value;
    if (typeof A == "string" && (A = A !== g.buttonValue, I.setValue(C, {
      value: A
    })), A)
      for (const Z of this._getElementsByName(g.fieldName, C))
        I.setValue(Z.id, {
          value: !1
        });
    const d = document.createElement("input");
    if (GA.add(d), d.setAttribute("data-element-id", C), d.disabled = g.readOnly, this._setRequired(d, this.data.required), d.type = "radio", d.name = g.fieldName, A && d.setAttribute("checked", !0), d.tabIndex = yl, d.addEventListener("change", (Z) => {
      const {
        name: i,
        checked: B
      } = Z.target;
      for (const F of this._getElementsByName(i, C))
        I.setValue(F.id, {
          value: !1
        });
      I.setValue(C, {
        value: B
      });
    }), d.addEventListener("resetform", (Z) => {
      const i = g.defaultFieldValue;
      Z.target.checked = i != null && i === g.buttonValue;
    }), this.enableScripting && this.hasJSActions) {
      const Z = g.buttonValue;
      d.addEventListener("updatefromsandbox", (i) => {
        const B = {
          value: (F) => {
            const s = Z === F.detail.value;
            for (const c of this._getElementsByName(F.target.name)) {
              const G = s && c.id === C;
              c.domElement && (c.domElement.checked = G), I.setValue(c.id, {
                value: G
              });
            }
          }
        };
        this._dispatchEventFromSandbox(B, i);
      }), this._setEventListeners(d, null, [["change", "Validate"], ["change", "Action"], ["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"]], (i) => i.target.checked);
    }
    return this._setBackgroundColor(d), this._setDefaultPropertiesFromJS(d), this.container.append(d), this.container;
  }
}
class AG extends yB {
  constructor(I) {
    super(I, {
      ignoreBorder: I.data.hasAppearance
    });
  }
  render() {
    const I = super.render();
    I.classList.add("buttonWidgetAnnotation", "pushButton");
    const g = I.lastChild;
    return this.enableScripting && this.hasJSActions && g && (this._setDefaultPropertiesFromJS(g), g.addEventListener("updatefromsandbox", (C) => {
      this._dispatchEventFromSandbox({}, C);
    })), I;
  }
}
class lG extends VA {
  constructor(I) {
    super(I, {
      isRenderable: I.renderForms
    });
  }
  render() {
    this.container.classList.add("choiceWidgetAnnotation");
    const I = this.annotationStorage, g = this.data.id, C = I.getValue(g, {
      value: this.data.fieldValue
    }), A = document.createElement("select");
    GA.add(A), A.setAttribute("data-element-id", g), A.disabled = this.data.readOnly, this._setRequired(A, this.data.required), A.name = this.data.fieldName, A.tabIndex = yl;
    let d = this.data.combo && this.data.options.length > 0;
    this.data.combo || (A.size = this.data.options.length, this.data.multiSelect && (A.multiple = !0)), A.addEventListener("resetform", (s) => {
      const c = this.data.defaultFieldValue;
      for (const G of A.options)
        G.selected = G.value === c;
    });
    for (const s of this.data.options) {
      const c = document.createElement("option");
      c.textContent = s.displayValue, c.value = s.exportValue, C.value.includes(s.exportValue) && (c.setAttribute("selected", !0), d = !1), A.append(c);
    }
    let Z = null;
    if (d) {
      const s = document.createElement("option");
      s.value = " ", s.setAttribute("hidden", !0), s.setAttribute("selected", !0), A.prepend(s), Z = () => {
        s.remove(), A.removeEventListener("input", Z), Z = null;
      }, A.addEventListener("input", Z);
    }
    const i = (s) => {
      const c = s ? "value" : "textContent", {
        options: G,
        multiple: V
      } = A;
      return V ? Array.prototype.filter.call(G, (W) => W.selected).map((W) => W[c]) : G.selectedIndex === -1 ? null : G[G.selectedIndex][c];
    };
    let B = i(!1);
    const F = (s) => {
      const c = s.target.options;
      return Array.prototype.map.call(c, (G) => ({
        displayValue: G.textContent,
        exportValue: G.value
      }));
    };
    return this.enableScripting && this.hasJSActions ? (A.addEventListener("updatefromsandbox", (s) => {
      const c = {
        value(G) {
          Z?.();
          const V = G.detail.value, W = new Set(Array.isArray(V) ? V : [V]);
          for (const R of A.options)
            R.selected = W.has(R.value);
          I.setValue(g, {
            value: i(!0)
          }), B = i(!1);
        },
        multipleSelection(G) {
          A.multiple = !0;
        },
        remove(G) {
          const V = A.options, W = G.detail.remove;
          V[W].selected = !1, A.remove(W), V.length > 0 && Array.prototype.findIndex.call(V, (U) => U.selected) === -1 && (V[0].selected = !0), I.setValue(g, {
            value: i(!0),
            items: F(G)
          }), B = i(!1);
        },
        clear(G) {
          for (; A.length !== 0; )
            A.remove(0);
          I.setValue(g, {
            value: null,
            items: []
          }), B = i(!1);
        },
        insert(G) {
          const {
            index: V,
            displayValue: W,
            exportValue: R
          } = G.detail.insert, U = A.children[V], n = document.createElement("option");
          n.textContent = W, n.value = R, U ? U.before(n) : A.append(n), I.setValue(g, {
            value: i(!0),
            items: F(G)
          }), B = i(!1);
        },
        items(G) {
          const {
            items: V
          } = G.detail;
          for (; A.length !== 0; )
            A.remove(0);
          for (const W of V) {
            const {
              displayValue: R,
              exportValue: U
            } = W, n = document.createElement("option");
            n.textContent = R, n.value = U, A.append(n);
          }
          A.options.length > 0 && (A.options[0].selected = !0), I.setValue(g, {
            value: i(!0),
            items: F(G)
          }), B = i(!1);
        },
        indices(G) {
          const V = new Set(G.detail.indices);
          for (const W of G.target.options)
            W.selected = V.has(W.index);
          I.setValue(g, {
            value: i(!0)
          }), B = i(!1);
        },
        editable(G) {
          G.target.disabled = !G.detail.editable;
        }
      };
      this._dispatchEventFromSandbox(c, s);
    }), A.addEventListener("input", (s) => {
      const c = i(!0), G = i(!1);
      I.setValue(g, {
        value: c
      }), s.preventDefault(), this.linkService.eventBus?.dispatch("dispatcheventinsandbox", {
        source: this,
        detail: {
          id: g,
          name: "Keystroke",
          value: B,
          change: G,
          changeEx: c,
          willCommit: !1,
          commitKey: 1,
          keyDown: !1
        }
      });
    }), this._setEventListeners(A, null, [["focus", "Focus"], ["blur", "Blur"], ["mousedown", "Mouse Down"], ["mouseenter", "Mouse Enter"], ["mouseleave", "Mouse Exit"], ["mouseup", "Mouse Up"], ["input", "Action"], ["input", "Validate"]], (s) => s.target.value)) : A.addEventListener("input", function(s) {
      I.setValue(g, {
        value: i(!0)
      });
    }), this.data.combo && this._setTextStyle(A), this._setBackgroundColor(A), this._setDefaultPropertiesFromJS(A), this.container.append(A), this.container;
  }
}
class y0 extends dg {
  constructor(I) {
    const {
      data: g,
      elements: C
    } = I;
    super(I, {
      isRenderable: dg._hasPopupData(g)
    }), this.elements = C, this.popup = null;
  }
  render() {
    this.container.classList.add("popupAnnotation");
    const I = this.popup = new dG({
      container: this.container,
      color: this.data.color,
      titleObj: this.data.titleObj,
      modificationDate: this.data.modificationDate,
      contentsObj: this.data.contentsObj,
      richText: this.data.richText,
      rect: this.data.rect,
      parentRect: this.data.parentRect || null,
      parent: this.parent,
      elements: this.elements,
      open: this.data.open
    }), g = [];
    for (const C of this.elements)
      C.popup = I, C.container.ariaHasPopup = "dialog", g.push(C.data.id), C.addHighlightArea();
    return this.container.setAttribute("aria-controls", g.map((C) => `${gZ}${C}`).join(",")), this.container;
  }
}
class dG {
  #I = this.#w.bind(this);
  #g = this.#N.bind(this);
  #C = this.#Y.bind(this);
  #A = this.#m.bind(this);
  #d = null;
  #l = null;
  #B = null;
  #i = null;
  #s = null;
  #F = null;
  #G = null;
  #c = !1;
  #V = null;
  #Z = null;
  #W = null;
  #R = null;
  #b = null;
  #n = null;
  #o = !1;
  constructor({
    container: I,
    color: g,
    elements: C,
    titleObj: A,
    modificationDate: d,
    contentsObj: Z,
    richText: i,
    parent: B,
    rect: F,
    parentRect: s,
    open: c
  }) {
    this.#l = I, this.#b = A, this.#B = Z, this.#R = i, this.#F = B, this.#d = g, this.#W = F, this.#G = s, this.#s = C, this.#i = bB.toDateObject(d), this.trigger = C.flatMap((G) => G.getElementsToTriggerPopup());
    for (const G of this.trigger)
      G.addEventListener("click", this.#A), G.addEventListener("mouseenter", this.#C), G.addEventListener("mouseleave", this.#g), G.classList.add("popupTriggerArea");
    for (const G of C)
      G.container?.addEventListener("keydown", this.#I);
    this.#l.hidden = !0, c && this.#m();
  }
  render() {
    if (this.#V)
      return;
    const I = this.#V = document.createElement("div");
    if (I.className = "popup", this.#d) {
      const d = I.style.outlineColor = iI.makeHexColor(...this.#d);
      CSS.supports("background-color", "color-mix(in srgb, red 30%, white)") ? I.style.backgroundColor = `color-mix(in srgb, ${d} 30%, white)` : I.style.backgroundColor = iI.makeHexColor(...this.#d.map((i) => Math.floor(0.7 * (255 - i) + i)));
    }
    const g = document.createElement("span");
    g.className = "header";
    const C = document.createElement("h1");
    if (g.append(C), {
      dir: C.dir,
      str: C.textContent
    } = this.#b, I.append(g), this.#i) {
      const d = document.createElement("span");
      d.classList.add("popupDate"), d.setAttribute("data-l10n-id", "pdfjs-annotation-date-time-string"), d.setAttribute("data-l10n-args", JSON.stringify({
        dateObj: this.#i.valueOf()
      })), g.append(d);
    }
    const A = this.#U;
    if (A)
      MB.render({
        xfaHtml: A,
        intent: "richText",
        div: I
      }), I.lastChild.classList.add("richText", "popupContent");
    else {
      const d = this._formatContents(this.#B);
      I.append(d);
    }
    this.#l.append(I);
  }
  get #U() {
    const I = this.#R, g = this.#B;
    return I?.str && (!g?.str || g.str === I.str) && this.#R.html || null;
  }
  get #e() {
    return this.#U?.attributes?.style?.fontSize || 0;
  }
  get #h() {
    return this.#U?.attributes?.style?.color || null;
  }
  #t(I) {
    const g = [], C = {
      str: I,
      html: {
        name: "div",
        attributes: {
          dir: "auto"
        },
        children: [{
          name: "p",
          children: g
        }]
      }
    }, A = {
      style: {
        color: this.#h,
        fontSize: this.#e ? `calc(${this.#e}px * var(--scale-factor))` : ""
      }
    };
    for (const d of I.split(`
`))
      g.push({
        name: "span",
        value: d,
        attributes: A
      });
    return C;
  }
  _formatContents({
    str: I,
    dir: g
  }) {
    const C = document.createElement("p");
    C.classList.add("popupContent"), C.dir = g;
    const A = I.split(/(?:\r\n?|\n)/);
    for (let d = 0, Z = A.length; d < Z; ++d) {
      const i = A[d];
      C.append(document.createTextNode(i)), d < Z - 1 && C.append(document.createElement("br"));
    }
    return C;
  }
  #w(I) {
    I.altKey || I.shiftKey || I.ctrlKey || I.metaKey || (I.key === "Enter" || I.key === "Escape" && this.#c) && this.#m();
  }
  updateEdited({
    rect: I,
    popupContent: g
  }) {
    this.#n ||= {
      contentsObj: this.#B,
      richText: this.#R
    }, I && (this.#Z = null), g && (this.#R = this.#t(g), this.#B = null), this.#V?.remove(), this.#V = null;
  }
  resetEdited() {
    this.#n && ({
      contentsObj: this.#B,
      richText: this.#R
    } = this.#n, this.#n = null, this.#V?.remove(), this.#V = null, this.#Z = null);
  }
  #S() {
    if (this.#Z !== null)
      return;
    const {
      page: {
        view: I
      },
      viewport: {
        rawDims: {
          pageWidth: g,
          pageHeight: C,
          pageX: A,
          pageY: d
        }
      }
    } = this.#F;
    let Z = !!this.#G, i = Z ? this.#G : this.#W;
    for (const W of this.#s)
      if (!i || iI.intersect(W.data.rect, i) !== null) {
        i = W.data.rect, Z = !0;
        break;
      }
    const B = iI.normalizeRect([i[0], I[3] - i[1] + I[1], i[2], I[3] - i[3] + I[1]]), s = Z ? i[2] - i[0] + 5 : 0, c = B[0] + s, G = B[1];
    this.#Z = [100 * (c - A) / g, 100 * (G - d) / C];
    const {
      style: V
    } = this.#l;
    V.left = `${this.#Z[0]}%`, V.top = `${this.#Z[1]}%`;
  }
  #m() {
    this.#c = !this.#c, this.#c ? (this.#Y(), this.#l.addEventListener("click", this.#A), this.#l.addEventListener("keydown", this.#I)) : (this.#N(), this.#l.removeEventListener("click", this.#A), this.#l.removeEventListener("keydown", this.#I));
  }
  #Y() {
    this.#V || this.render(), this.isVisible ? this.#c && this.#l.classList.add("focused") : (this.#S(), this.#l.hidden = !1, this.#l.style.zIndex = parseInt(this.#l.style.zIndex) + 1e3);
  }
  #N() {
    this.#l.classList.remove("focused"), !(this.#c || !this.isVisible) && (this.#l.hidden = !0, this.#l.style.zIndex = parseInt(this.#l.style.zIndex) - 1e3);
  }
  forceHide() {
    this.#o = this.isVisible, this.#o && (this.#l.hidden = !0);
  }
  maybeShow() {
    this.#o && (this.#V || this.#Y(), this.#o = !1, this.#l.hidden = !1);
  }
  get isVisible() {
    return this.#l.hidden === !1;
  }
}
class HB extends dg {
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    }), this.textContent = I.data.textContent, this.textPosition = I.data.textPosition, this.annotationEditorType = JI.FREETEXT;
  }
  render() {
    if (this.container.classList.add("freeTextAnnotation"), this.textContent) {
      const I = document.createElement("div");
      I.classList.add("annotationTextContent"), I.setAttribute("role", "comment");
      for (const g of this.textContent) {
        const C = document.createElement("span");
        C.textContent = g, I.append(C);
      }
      this.container.append(I);
    }
    return !this.data.popupRef && this.hasPopupData && this._createPopup(), this._editOnDoubleClick(), this.container;
  }
}
class ZG extends dg {
  #I = null;
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    });
  }
  render() {
    this.container.classList.add("lineAnnotation");
    const I = this.data, {
      width: g,
      height: C
    } = EC(I.rect), A = this.svgFactory.create(g, C, !0), d = this.#I = this.svgFactory.createElement("svg:line");
    return d.setAttribute("x1", I.rect[2] - I.lineCoordinates[0]), d.setAttribute("y1", I.rect[3] - I.lineCoordinates[1]), d.setAttribute("x2", I.rect[2] - I.lineCoordinates[2]), d.setAttribute("y2", I.rect[3] - I.lineCoordinates[3]), d.setAttribute("stroke-width", I.borderStyle.width || 1), d.setAttribute("stroke", "transparent"), d.setAttribute("fill", "transparent"), A.append(d), this.container.append(A), !I.popupRef && this.hasPopupData && this._createPopup(), this.container;
  }
  getElementsToTriggerPopup() {
    return this.#I;
  }
  addHighlightArea() {
    this.container.classList.add("highlightArea");
  }
}
class iG extends dg {
  #I = null;
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    });
  }
  render() {
    this.container.classList.add("squareAnnotation");
    const I = this.data, {
      width: g,
      height: C
    } = EC(I.rect), A = this.svgFactory.create(g, C, !0), d = I.borderStyle.width, Z = this.#I = this.svgFactory.createElement("svg:rect");
    return Z.setAttribute("x", d / 2), Z.setAttribute("y", d / 2), Z.setAttribute("width", g - d), Z.setAttribute("height", C - d), Z.setAttribute("stroke-width", d || 1), Z.setAttribute("stroke", "transparent"), Z.setAttribute("fill", "transparent"), A.append(Z), this.container.append(A), !I.popupRef && this.hasPopupData && this._createPopup(), this.container;
  }
  getElementsToTriggerPopup() {
    return this.#I;
  }
  addHighlightArea() {
    this.container.classList.add("highlightArea");
  }
}
class BG extends dg {
  #I = null;
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    });
  }
  render() {
    this.container.classList.add("circleAnnotation");
    const I = this.data, {
      width: g,
      height: C
    } = EC(I.rect), A = this.svgFactory.create(g, C, !0), d = I.borderStyle.width, Z = this.#I = this.svgFactory.createElement("svg:ellipse");
    return Z.setAttribute("cx", g / 2), Z.setAttribute("cy", C / 2), Z.setAttribute("rx", g / 2 - d / 2), Z.setAttribute("ry", C / 2 - d / 2), Z.setAttribute("stroke-width", d || 1), Z.setAttribute("stroke", "transparent"), Z.setAttribute("fill", "transparent"), A.append(Z), this.container.append(A), !I.popupRef && this.hasPopupData && this._createPopup(), this.container;
  }
  getElementsToTriggerPopup() {
    return this.#I;
  }
  addHighlightArea() {
    this.container.classList.add("highlightArea");
  }
}
class pB extends dg {
  #I = null;
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    }), this.containerClassName = "polylineAnnotation", this.svgElementName = "svg:polyline";
  }
  render() {
    this.container.classList.add(this.containerClassName);
    const {
      data: {
        rect: I,
        vertices: g,
        borderStyle: C,
        popupRef: A
      }
    } = this;
    if (!g)
      return this.container;
    const {
      width: d,
      height: Z
    } = EC(I), i = this.svgFactory.create(d, Z, !0);
    let B = [];
    for (let s = 0, c = g.length; s < c; s += 2) {
      const G = g[s] - I[0], V = I[3] - g[s + 1];
      B.push(`${G},${V}`);
    }
    B = B.join(" ");
    const F = this.#I = this.svgFactory.createElement(this.svgElementName);
    return F.setAttribute("points", B), F.setAttribute("stroke-width", C.width || 1), F.setAttribute("stroke", "transparent"), F.setAttribute("fill", "transparent"), i.append(F), this.container.append(i), !A && this.hasPopupData && this._createPopup(), this.container;
  }
  getElementsToTriggerPopup() {
    return this.#I;
  }
  addHighlightArea() {
    this.container.classList.add("highlightArea");
  }
}
class FG extends pB {
  constructor(I) {
    super(I), this.containerClassName = "polygonAnnotation", this.svgElementName = "svg:polygon";
  }
}
class sG extends dg {
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    });
  }
  render() {
    return this.container.classList.add("caretAnnotation"), !this.data.popupRef && this.hasPopupData && this._createPopup(), this.container;
  }
}
class GZ extends dg {
  #I = null;
  #g = [];
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    }), this.containerClassName = "inkAnnotation", this.svgElementName = "svg:polyline", this.annotationEditorType = this.data.it === "InkHighlight" ? JI.HIGHLIGHT : JI.INK;
  }
  #C(I, g) {
    switch (I) {
      case 90:
        return {
          transform: `rotate(90) translate(${-g[0]},${g[1]}) scale(1,-1)`,
          width: g[3] - g[1],
          height: g[2] - g[0]
        };
      case 180:
        return {
          transform: `rotate(180) translate(${-g[2]},${g[1]}) scale(1,-1)`,
          width: g[2] - g[0],
          height: g[3] - g[1]
        };
      case 270:
        return {
          transform: `rotate(270) translate(${-g[2]},${g[3]}) scale(1,-1)`,
          width: g[3] - g[1],
          height: g[2] - g[0]
        };
      default:
        return {
          transform: `translate(${-g[0]},${g[3]}) scale(1,-1)`,
          width: g[2] - g[0],
          height: g[3] - g[1]
        };
    }
  }
  render() {
    this.container.classList.add(this.containerClassName);
    const {
      data: {
        rect: I,
        rotation: g,
        inkLists: C,
        borderStyle: A,
        popupRef: d
      }
    } = this, {
      transform: Z,
      width: i,
      height: B
    } = this.#C(g, I), F = this.svgFactory.create(i, B, !0), s = this.#I = this.svgFactory.createElement("svg:g");
    F.append(s), s.setAttribute("stroke-width", A.width || 1), s.setAttribute("stroke-linecap", "round"), s.setAttribute("stroke-linejoin", "round"), s.setAttribute("stroke-miterlimit", 10), s.setAttribute("stroke", "transparent"), s.setAttribute("fill", "transparent"), s.setAttribute("transform", Z);
    for (let c = 0, G = C.length; c < G; c++) {
      const V = this.svgFactory.createElement(this.svgElementName);
      this.#g.push(V), V.setAttribute("points", C[c].join(",")), s.append(V);
    }
    return !d && this.hasPopupData && this._createPopup(), this.container.append(F), this._editOnDoubleClick(), this.container;
  }
  updateEdited(I) {
    super.updateEdited(I);
    const {
      thickness: g,
      points: C,
      rect: A
    } = I, d = this.#I;
    if (g >= 0 && d.setAttribute("stroke-width", g || 1), C)
      for (let Z = 0, i = this.#g.length; Z < i; Z++)
        this.#g[Z].setAttribute("points", C[Z].join(","));
    if (A) {
      const {
        transform: Z,
        width: i,
        height: B
      } = this.#C(this.data.rotation, A);
      d.parentElement.setAttribute("viewBox", `0 0 ${i} ${B}`), d.setAttribute("transform", Z);
    }
  }
  getElementsToTriggerPopup() {
    return this.#g;
  }
  addHighlightArea() {
    this.container.classList.add("highlightArea");
  }
}
class kB extends dg {
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0,
      createQuadrilaterals: !0
    }), this.annotationEditorType = JI.HIGHLIGHT;
  }
  render() {
    return !this.data.popupRef && this.hasPopupData && this._createPopup(), this.container.classList.add("highlightAnnotation"), this._editOnDoubleClick(), this.container;
  }
}
class cG extends dg {
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0,
      createQuadrilaterals: !0
    });
  }
  render() {
    return !this.data.popupRef && this.hasPopupData && this._createPopup(), this.container.classList.add("underlineAnnotation"), this.container;
  }
}
class GG extends dg {
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0,
      createQuadrilaterals: !0
    });
  }
  render() {
    return !this.data.popupRef && this.hasPopupData && this._createPopup(), this.container.classList.add("squigglyAnnotation"), this.container;
  }
}
class VG extends dg {
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0,
      createQuadrilaterals: !0
    });
  }
  render() {
    return !this.data.popupRef && this.hasPopupData && this._createPopup(), this.container.classList.add("strikeoutAnnotation"), this.container;
  }
}
class KB extends dg {
  constructor(I) {
    super(I, {
      isRenderable: !0,
      ignoreBorder: !0
    }), this.annotationEditorType = JI.STAMP;
  }
  render() {
    return this.container.classList.add("stampAnnotation"), this.container.setAttribute("role", "img"), !this.data.popupRef && this.hasPopupData && this._createPopup(), this._editOnDoubleClick(), this.container;
  }
}
class WG extends dg {
  #I = null;
  constructor(I) {
    super(I, {
      isRenderable: !0
    });
    const {
      file: g
    } = this.data;
    this.filename = g.filename, this.content = g.content, this.linkService.eventBus?.dispatch("fileattachmentannotation", {
      source: this,
      ...g
    });
  }
  render() {
    this.container.classList.add("fileAttachmentAnnotation");
    const {
      container: I,
      data: g
    } = this;
    let C;
    g.hasAppearance || g.fillAlpha === 0 ? C = document.createElement("div") : (C = document.createElement("img"), C.src = `${this.imageResourcesPath}annotation-${/paperclip/i.test(g.name) ? "paperclip" : "pushpin"}.svg`, g.fillAlpha && g.fillAlpha < 1 && (C.style = `filter: opacity(${Math.round(g.fillAlpha * 100)}%);`)), C.addEventListener("dblclick", this.#g.bind(this)), this.#I = C;
    const {
      isMac: A
    } = ug.platform;
    return I.addEventListener("keydown", (d) => {
      d.key === "Enter" && (A ? d.metaKey : d.ctrlKey) && this.#g();
    }), !g.popupRef && this.hasPopupData ? this._createPopup() : C.classList.add("popupTriggerArea"), I.append(C), I;
  }
  getElementsToTriggerPopup() {
    return this.#I;
  }
  addHighlightArea() {
    this.container.classList.add("highlightArea");
  }
  #g() {
    this.downloadManager?.openOrDownloadData(this.content, this.filename);
  }
}
class bG {
  #I = null;
  #g = null;
  #C = /* @__PURE__ */ new Map();
  #A = null;
  constructor({
    div: I,
    accessibilityManager: g,
    annotationCanvasMap: C,
    annotationEditorUIManager: A,
    page: d,
    viewport: Z,
    structTreeLayer: i
  }) {
    this.div = I, this.#I = g, this.#g = C, this.#A = i || null, this.page = d, this.viewport = Z, this.zIndex = 0, this._annotationEditorUIManager = A;
  }
  hasEditableAnnotations() {
    return this.#C.size > 0;
  }
  async #d(I, g) {
    const C = I.firstChild || I, A = C.id = `${gZ}${g}`, d = await this.#A?.getAriaAttributes(A);
    if (d)
      for (const [Z, i] of d)
        C.setAttribute(Z, i);
    this.div.append(I), this.#I?.moveElementInDOM(this.div, I, C, !1);
  }
  async render(I) {
    const {
      annotations: g
    } = I, C = this.div;
    cA(C, this.viewport);
    const A = /* @__PURE__ */ new Map(), d = {
      data: null,
      layer: C,
      linkService: I.linkService,
      downloadManager: I.downloadManager,
      imageResourcesPath: I.imageResourcesPath || "",
      renderForms: I.renderForms !== !1,
      svgFactory: new cZ(),
      annotationStorage: I.annotationStorage || new iZ(),
      enableScripting: I.enableScripting === !0,
      hasJSActions: I.hasJSActions,
      fieldObjects: I.fieldObjects,
      parent: this,
      elements: null
    };
    for (const Z of g) {
      if (Z.noHTML)
        continue;
      const i = Z.annotationType === cg.POPUP;
      if (i) {
        const s = A.get(Z.id);
        if (!s)
          continue;
        d.elements = s;
      } else {
        const {
          width: s,
          height: c
        } = EC(Z.rect);
        if (s <= 0 || c <= 0)
          continue;
      }
      d.data = Z;
      const B = _c.create(d);
      if (!B.isRenderable)
        continue;
      if (!i && Z.popupRef) {
        const s = A.get(Z.popupRef);
        s ? s.push(B) : A.set(Z.popupRef, [B]);
      }
      const F = B.render();
      Z.hidden && (F.style.visibility = "hidden"), await this.#d(F, Z.id), B._isEditable && (this.#C.set(B.data.id, B), this._annotationEditorUIManager?.renderAnnotationElement(B));
    }
    this.#l();
  }
  update({
    viewport: I
  }) {
    const g = this.div;
    this.viewport = I, cA(g, {
      rotation: I.rotation
    }), this.#l(), g.hidden = !1;
  }
  #l() {
    if (!this.#g)
      return;
    const I = this.div;
    for (const [g, C] of this.#g) {
      const A = I.querySelector(`[data-annotation-id="${g}"]`);
      if (!A)
        continue;
      C.className = "annotationContent";
      const {
        firstChild: d
      } = A;
      d ? d.nodeName === "CANVAS" ? d.replaceWith(C) : d.classList.contains("annotationContent") ? d.after(C) : d.before(C) : A.append(C);
    }
    this.#g.clear();
  }
  getEditableAnnotations() {
    return Array.from(this.#C.values());
  }
  getEditableAnnotation(I) {
    return this.#C.get(I);
  }
}
const xl = /\r\n?|\n/g;
class Gg extends WI {
  #I;
  #g = "";
  #C = `${this.id}-editor`;
  #A = null;
  #d;
  static _freeTextDefaultContent = "";
  static _internalPadding = 0;
  static _defaultColor = null;
  static _defaultFontSize = 10;
  static get _keyboardManager() {
    const I = Gg.prototype, g = (d) => d.isEmpty(), C = OC.TRANSLATE_SMALL, A = OC.TRANSLATE_BIG;
    return uI(this, "_keyboardManager", new Ml([[["ctrl+s", "mac+meta+s", "ctrl+p", "mac+meta+p"], I.commitOrRemove, {
      bubbles: !0
    }], [["ctrl+Enter", "mac+meta+Enter", "Escape", "mac+Escape"], I.commitOrRemove], [["ArrowLeft", "mac+ArrowLeft"], I._translateEmpty, {
      args: [-C, 0],
      checker: g
    }], [["ctrl+ArrowLeft", "mac+shift+ArrowLeft"], I._translateEmpty, {
      args: [-A, 0],
      checker: g
    }], [["ArrowRight", "mac+ArrowRight"], I._translateEmpty, {
      args: [C, 0],
      checker: g
    }], [["ctrl+ArrowRight", "mac+shift+ArrowRight"], I._translateEmpty, {
      args: [A, 0],
      checker: g
    }], [["ArrowUp", "mac+ArrowUp"], I._translateEmpty, {
      args: [0, -C],
      checker: g
    }], [["ctrl+ArrowUp", "mac+shift+ArrowUp"], I._translateEmpty, {
      args: [0, -A],
      checker: g
    }], [["ArrowDown", "mac+ArrowDown"], I._translateEmpty, {
      args: [0, C],
      checker: g
    }], [["ctrl+ArrowDown", "mac+shift+ArrowDown"], I._translateEmpty, {
      args: [0, A],
      checker: g
    }]]));
  }
  static _type = "freetext";
  static _editorType = JI.FREETEXT;
  constructor(I) {
    super({
      ...I,
      name: "freeTextEditor"
    }), this.#I = I.color || Gg._defaultColor || WI._defaultLineColor, this.#d = I.fontSize || Gg._defaultFontSize;
  }
  static initialize(I, g) {
    WI.initialize(I, g);
    const C = getComputedStyle(document.documentElement);
    this._internalPadding = parseFloat(C.getPropertyValue("--freetext-padding"));
  }
  static updateDefaultParams(I, g) {
    switch (I) {
      case pI.FREETEXT_SIZE:
        Gg._defaultFontSize = g;
        break;
      case pI.FREETEXT_COLOR:
        Gg._defaultColor = g;
        break;
    }
  }
  updateParams(I, g) {
    switch (I) {
      case pI.FREETEXT_SIZE:
        this.#l(g);
        break;
      case pI.FREETEXT_COLOR:
        this.#B(g);
        break;
    }
  }
  static get defaultPropertiesToUpdate() {
    return [[pI.FREETEXT_SIZE, Gg._defaultFontSize], [pI.FREETEXT_COLOR, Gg._defaultColor || WI._defaultLineColor]];
  }
  get propertiesToUpdate() {
    return [[pI.FREETEXT_SIZE, this.#d], [pI.FREETEXT_COLOR, this.#I]];
  }
  #l(I) {
    const g = (A) => {
      this.editorDiv.style.fontSize = `calc(${A}px * var(--scale-factor))`, this.translate(0, -(A - this.#d) * this.parentScale), this.#d = A, this.#s();
    }, C = this.#d;
    this.addCommands({
      cmd: g.bind(this, I),
      undo: g.bind(this, C),
      post: this._uiManager.updateUI.bind(this._uiManager, this),
      mustExec: !0,
      type: pI.FREETEXT_SIZE,
      overwriteIfSameType: !0,
      keepUndo: !0
    });
  }
  #B(I) {
    const g = (A) => {
      this.#I = this.editorDiv.style.color = A;
    }, C = this.#I;
    this.addCommands({
      cmd: g.bind(this, I),
      undo: g.bind(this, C),
      post: this._uiManager.updateUI.bind(this._uiManager, this),
      mustExec: !0,
      type: pI.FREETEXT_COLOR,
      overwriteIfSameType: !0,
      keepUndo: !0
    });
  }
  _translateEmpty(I, g) {
    this._uiManager.translateSelectedEditors(I, g, !0);
  }
  getInitialTranslation() {
    const I = this.parentScale;
    return [-Gg._internalPadding * I, -(Gg._internalPadding + this.#d) * I];
  }
  rebuild() {
    this.parent && (super.rebuild(), this.div !== null && (this.isAttachedToDOM || this.parent.add(this)));
  }
  enableEditMode() {
    if (this.isInEditMode())
      return;
    this.parent.setEditingState(!1), this.parent.updateToolbar(JI.FREETEXT), super.enableEditMode(), this.overlayDiv.classList.remove("enabled"), this.editorDiv.contentEditable = !0, this._isDraggable = !1, this.div.removeAttribute("aria-activedescendant"), this.#A = new AbortController();
    const I = this._uiManager.combinedSignal(this.#A);
    this.editorDiv.addEventListener("keydown", this.editorDivKeydown.bind(this), {
      signal: I
    }), this.editorDiv.addEventListener("focus", this.editorDivFocus.bind(this), {
      signal: I
    }), this.editorDiv.addEventListener("blur", this.editorDivBlur.bind(this), {
      signal: I
    }), this.editorDiv.addEventListener("input", this.editorDivInput.bind(this), {
      signal: I
    }), this.editorDiv.addEventListener("paste", this.editorDivPaste.bind(this), {
      signal: I
    });
  }
  disableEditMode() {
    this.isInEditMode() && (this.parent.setEditingState(!0), super.disableEditMode(), this.overlayDiv.classList.add("enabled"), this.editorDiv.contentEditable = !1, this.div.setAttribute("aria-activedescendant", this.#C), this._isDraggable = !0, this.#A?.abort(), this.#A = null, this.div.focus({
      preventScroll: !0
    }), this.isEditing = !1, this.parent.div.classList.add("freetextEditing"));
  }
  focusin(I) {
    this._focusEventsAllowed && (super.focusin(I), I.target !== this.editorDiv && this.editorDiv.focus());
  }
  onceAdded(I) {
    this.width || (this.enableEditMode(), I && this.editorDiv.focus(), this._initialOptions?.isCentered && this.center(), this._initialOptions = null);
  }
  isEmpty() {
    return !this.editorDiv || this.editorDiv.innerText.trim() === "";
  }
  remove() {
    this.isEditing = !1, this.parent && (this.parent.setEditingState(!0), this.parent.div.classList.add("freetextEditing")), super.remove();
  }
  #i() {
    const I = [];
    this.editorDiv.normalize();
    let g = null;
    for (const C of this.editorDiv.childNodes)
      g?.nodeType === Node.TEXT_NODE && C.nodeName === "BR" || (I.push(Gg.#F(C)), g = C);
    return I.join(`
`);
  }
  #s() {
    const [I, g] = this.parentDimensions;
    let C;
    if (this.isAttachedToDOM)
      C = this.div.getBoundingClientRect();
    else {
      const {
        currentLayer: A,
        div: d
      } = this, Z = d.style.display, i = d.classList.contains("hidden");
      d.classList.remove("hidden"), d.style.display = "hidden", A.div.append(this.div), C = d.getBoundingClientRect(), d.remove(), d.style.display = Z, d.classList.toggle("hidden", i);
    }
    this.rotation % 180 === this.parentRotation % 180 ? (this.width = C.width / I, this.height = C.height / g) : (this.width = C.height / I, this.height = C.width / g), this.fixAndSetPosition();
  }
  commit() {
    if (!this.isInEditMode())
      return;
    super.commit(), this.disableEditMode();
    const I = this.#g, g = this.#g = this.#i().trimEnd();
    if (I === g)
      return;
    const C = (A) => {
      if (this.#g = A, !A) {
        this.remove();
        return;
      }
      this.#G(), this._uiManager.rebuild(this), this.#s();
    };
    this.addCommands({
      cmd: () => {
        C(g);
      },
      undo: () => {
        C(I);
      },
      mustExec: !1
    }), this.#s();
  }
  shouldGetKeyboardEvents() {
    return this.isInEditMode();
  }
  enterInEditMode() {
    this.enableEditMode(), this.editorDiv.focus();
  }
  dblclick(I) {
    this.enterInEditMode();
  }
  keydown(I) {
    I.target === this.div && I.key === "Enter" && (this.enterInEditMode(), I.preventDefault());
  }
  editorDivKeydown(I) {
    Gg._keyboardManager.exec(this, I);
  }
  editorDivFocus(I) {
    this.isEditing = !0;
  }
  editorDivBlur(I) {
    this.isEditing = !1;
  }
  editorDivInput(I) {
    this.parent.div.classList.toggle("freetextEditing", this.isEmpty());
  }
  disableEditing() {
    this.editorDiv.setAttribute("role", "comment"), this.editorDiv.removeAttribute("aria-multiline");
  }
  enableEditing() {
    this.editorDiv.setAttribute("role", "textbox"), this.editorDiv.setAttribute("aria-multiline", !0);
  }
  render() {
    if (this.div)
      return this.div;
    let I, g;
    this.width && (I = this.x, g = this.y), super.render(), this.editorDiv = document.createElement("div"), this.editorDiv.className = "internal", this.editorDiv.setAttribute("id", this.#C), this.editorDiv.setAttribute("data-l10n-id", "pdfjs-free-text2"), this.editorDiv.setAttribute("data-l10n-attrs", "default-content"), this.enableEditing(), this.editorDiv.contentEditable = !0;
    const {
      style: C
    } = this.editorDiv;
    if (C.fontSize = `calc(${this.#d}px * var(--scale-factor))`, C.color = this.#I, this.div.append(this.editorDiv), this.overlayDiv = document.createElement("div"), this.overlayDiv.classList.add("overlay", "enabled"), this.div.append(this.overlayDiv), Rd(this, this.div, ["dblclick", "keydown"]), this.width) {
      const [A, d] = this.parentDimensions;
      if (this.annotationElementId) {
        const {
          position: Z
        } = this._initialData;
        let [i, B] = this.getInitialTranslation();
        [i, B] = this.pageTranslationToScreen(i, B);
        const [F, s] = this.pageDimensions, [c, G] = this.pageTranslation;
        let V, W;
        switch (this.rotation) {
          case 0:
            V = I + (Z[0] - c) / F, W = g + this.height - (Z[1] - G) / s;
            break;
          case 90:
            V = I + (Z[0] - c) / F, W = g - (Z[1] - G) / s, [i, B] = [B, -i];
            break;
          case 180:
            V = I - this.width + (Z[0] - c) / F, W = g - (Z[1] - G) / s, [i, B] = [-i, -B];
            break;
          case 270:
            V = I + (Z[0] - c - this.height * s) / F, W = g + (Z[1] - G - this.width * F) / s, [i, B] = [-B, i];
            break;
        }
        this.setAt(V * A, W * d, i, B);
      } else
        this.setAt(I * A, g * d, this.width * A, this.height * d);
      this.#G(), this._isDraggable = !0, this.editorDiv.contentEditable = !1;
    } else
      this._isDraggable = !1, this.editorDiv.contentEditable = !0;
    return this.div;
  }
  static #F(I) {
    return (I.nodeType === Node.TEXT_NODE ? I.nodeValue : I.innerText).replaceAll(xl, "");
  }
  editorDivPaste(I) {
    const g = I.clipboardData || window.clipboardData, {
      types: C
    } = g;
    if (C.length === 1 && C[0] === "text/plain")
      return;
    I.preventDefault();
    const A = Gg.#V(g.getData("text") || "").replaceAll(xl, `
`);
    if (!A)
      return;
    const d = window.getSelection();
    if (!d.rangeCount)
      return;
    this.editorDiv.normalize(), d.deleteFromDocument();
    const Z = d.getRangeAt(0);
    if (!A.includes(`
`)) {
      Z.insertNode(document.createTextNode(A)), this.editorDiv.normalize(), d.collapseToStart();
      return;
    }
    const {
      startContainer: i,
      startOffset: B
    } = Z, F = [], s = [];
    if (i.nodeType === Node.TEXT_NODE) {
      const V = i.parentElement;
      if (s.push(i.nodeValue.slice(B).replaceAll(xl, "")), V !== this.editorDiv) {
        let W = F;
        for (const R of this.editorDiv.childNodes) {
          if (R === V) {
            W = s;
            continue;
          }
          W.push(Gg.#F(R));
        }
      }
      F.push(i.nodeValue.slice(0, B).replaceAll(xl, ""));
    } else if (i === this.editorDiv) {
      let V = F, W = 0;
      for (const R of this.editorDiv.childNodes)
        W++ === B && (V = s), V.push(Gg.#F(R));
    }
    this.#g = `${F.join(`
`)}${A}${s.join(`
`)}`, this.#G();
    const c = new Range();
    let G = F.reduce((V, W) => V + W.length, 0);
    for (const {
      firstChild: V
    } of this.editorDiv.childNodes)
      if (V.nodeType === Node.TEXT_NODE) {
        const W = V.nodeValue.length;
        if (G <= W) {
          c.setStart(V, G), c.setEnd(V, G);
          break;
        }
        G -= W;
      }
    d.removeAllRanges(), d.addRange(c);
  }
  #G() {
    if (this.editorDiv.replaceChildren(), !!this.#g)
      for (const I of this.#g.split(`
`)) {
        const g = document.createElement("div");
        g.append(I ? document.createTextNode(I) : document.createElement("br")), this.editorDiv.append(g);
      }
  }
  #c() {
    return this.#g.replaceAll(" ", " ");
  }
  static #V(I) {
    return I.replaceAll(" ", " ");
  }
  get contentDiv() {
    return this.editorDiv;
  }
  static async deserialize(I, g, C) {
    let A = null;
    if (I instanceof HB) {
      const {
        data: {
          defaultAppearanceData: {
            fontSize: Z,
            fontColor: i
          },
          rect: B,
          rotation: F,
          id: s,
          popupRef: c
        },
        textContent: G,
        textPosition: V,
        parent: {
          page: {
            pageNumber: W
          }
        }
      } = I;
      if (!G || G.length === 0)
        return null;
      A = I = {
        annotationType: JI.FREETEXT,
        color: Array.from(i),
        fontSize: Z,
        value: G.join(`
`),
        position: V,
        pageIndex: W - 1,
        rect: B.slice(0),
        rotation: F,
        id: s,
        deleted: !1,
        popupRef: c
      };
    }
    const d = await super.deserialize(I, g, C);
    return d.#d = I.fontSize, d.#I = iI.makeHexColor(...I.color), d.#g = Gg.#V(I.value), d.annotationElementId = I.id || null, d._initialData = A, d;
  }
  serialize(I = !1) {
    if (this.isEmpty())
      return null;
    if (this.deleted)
      return this.serializeDeleted();
    const g = Gg._internalPadding * this.parentScale, C = this.getRect(g, g), A = WI._colorManager.convert(this.isAttachedToDOM ? getComputedStyle(this.editorDiv).color : this.#I), d = {
      annotationType: JI.FREETEXT,
      color: A,
      fontSize: this.#d,
      value: this.#c(),
      pageIndex: this.pageIndex,
      rect: C,
      rotation: this.rotation,
      structTreeParentId: this._structTreeParentId
    };
    return I ? d : this.annotationElementId && !this.#Z(d) ? null : (d.id = this.annotationElementId, d);
  }
  #Z(I) {
    const {
      value: g,
      fontSize: C,
      color: A,
      pageIndex: d
    } = this._initialData;
    return this._hasBeenMoved || I.value !== g || I.fontSize !== C || I.color.some((Z, i) => Z !== A[i]) || I.pageIndex !== d;
  }
  renderAnnotationElement(I) {
    const g = super.renderAnnotationElement(I);
    if (this.deleted)
      return g;
    const {
      style: C
    } = g;
    C.fontSize = `calc(${this.#d}px * var(--scale-factor))`, C.color = this.#I, g.replaceChildren();
    for (const d of this.#g.split(`
`)) {
      const Z = document.createElement("div");
      Z.append(d ? document.createTextNode(d) : document.createElement("br")), g.append(Z);
    }
    const A = Gg._internalPadding * this.parentScale;
    return I.updateEdited({
      rect: this.getRect(A, A),
      popupContent: this.#g
    }), g;
  }
  resetAnnotationElement(I) {
    super.resetAnnotationElement(I), I.resetEdited();
  }
}
class CI {
  static PRECISION = 1e-4;
  toSVGPath() {
    _I("Abstract method `toSVGPath` must be implemented.");
  }
  get box() {
    _I("Abstract getter `box` must be implemented.");
  }
  serialize(I, g) {
    _I("Abstract method `serialize` must be implemented.");
  }
  static _rescale(I, g, C, A, d, Z) {
    Z ||= new Float32Array(I.length);
    for (let i = 0, B = I.length; i < B; i += 2)
      Z[i] = g + I[i] * A, Z[i + 1] = C + I[i + 1] * d;
    return Z;
  }
  static _rescaleAndSwap(I, g, C, A, d, Z) {
    Z ||= new Float32Array(I.length);
    for (let i = 0, B = I.length; i < B; i += 2)
      Z[i] = g + I[i + 1] * A, Z[i + 1] = C + I[i] * d;
    return Z;
  }
  static _translate(I, g, C, A) {
    A ||= new Float32Array(I.length);
    for (let d = 0, Z = I.length; d < Z; d += 2)
      A[d] = g + I[d], A[d + 1] = C + I[d + 1];
    return A;
  }
  static svgRound(I) {
    return Math.round(I * 1e4);
  }
  static _normalizePoint(I, g, C, A, d) {
    switch (d) {
      case 90:
        return [1 - g / C, I / A];
      case 180:
        return [1 - I / C, 1 - g / A];
      case 270:
        return [g / C, 1 - I / A];
      default:
        return [I / C, g / A];
    }
  }
  static _normalizePagePoint(I, g, C) {
    switch (C) {
      case 90:
        return [1 - g, I];
      case 180:
        return [1 - I, 1 - g];
      case 270:
        return [g, 1 - I];
      default:
        return [I, g];
    }
  }
  static createBezierPoints(I, g, C, A, d, Z) {
    return [(I + 5 * C) / 6, (g + 5 * A) / 6, (5 * C + d) / 6, (5 * A + Z) / 6, (C + d) / 2, (A + Z) / 2];
  }
}
class FA {
  #I;
  #g = [];
  #C;
  #A;
  #d = [];
  #l = new Float32Array(18);
  #B;
  #i;
  #s;
  #F;
  #G;
  #c;
  #V = [];
  static #Z = 8;
  static #W = 2;
  static #R = FA.#Z + FA.#W;
  constructor({
    x: I,
    y: g
  }, C, A, d, Z, i = 0) {
    this.#I = C, this.#c = d * A, this.#A = Z, this.#l.set([NaN, NaN, NaN, NaN, I, g], 6), this.#C = i, this.#F = FA.#Z * A, this.#s = FA.#R * A, this.#G = A, this.#V.push(I, g);
  }
  isEmpty() {
    return isNaN(this.#l[8]);
  }
  #b() {
    const I = this.#l.subarray(4, 6), g = this.#l.subarray(16, 18), [C, A, d, Z] = this.#I;
    return [(this.#B + (I[0] - g[0]) / 2 - C) / d, (this.#i + (I[1] - g[1]) / 2 - A) / Z, (this.#B + (g[0] - I[0]) / 2 - C) / d, (this.#i + (g[1] - I[1]) / 2 - A) / Z];
  }
  add({
    x: I,
    y: g
  }) {
    this.#B = I, this.#i = g;
    const [C, A, d, Z] = this.#I;
    let [i, B, F, s] = this.#l.subarray(8, 12);
    const c = I - F, G = g - s, V = Math.hypot(c, G);
    if (V < this.#s)
      return !1;
    const W = V - this.#F, R = W / V, U = R * c, n = R * G;
    let m = i, e = B;
    i = F, B = s, F += U, s += n, this.#V?.push(I, g);
    const N = -n / W, w = U / W, S = N * this.#c, Y = w * this.#c;
    return this.#l.set(this.#l.subarray(2, 8), 0), this.#l.set([F + S, s + Y], 4), this.#l.set(this.#l.subarray(14, 18), 12), this.#l.set([F - S, s - Y], 16), isNaN(this.#l[6]) ? (this.#d.length === 0 && (this.#l.set([i + S, B + Y], 2), this.#d.push(NaN, NaN, NaN, NaN, (i + S - C) / d, (B + Y - A) / Z), this.#l.set([i - S, B - Y], 14), this.#g.push(NaN, NaN, NaN, NaN, (i - S - C) / d, (B - Y - A) / Z)), this.#l.set([m, e, i, B, F, s], 6), !this.isEmpty()) : (this.#l.set([m, e, i, B, F, s], 6), Math.abs(Math.atan2(e - B, m - i) - Math.atan2(n, U)) < Math.PI / 2 ? ([i, B, F, s] = this.#l.subarray(2, 6), this.#d.push(NaN, NaN, NaN, NaN, ((i + F) / 2 - C) / d, ((B + s) / 2 - A) / Z), [i, B, m, e] = this.#l.subarray(14, 18), this.#g.push(NaN, NaN, NaN, NaN, ((m + i) / 2 - C) / d, ((e + B) / 2 - A) / Z), !0) : ([m, e, i, B, F, s] = this.#l.subarray(0, 6), this.#d.push(((m + 5 * i) / 6 - C) / d, ((e + 5 * B) / 6 - A) / Z, ((5 * i + F) / 6 - C) / d, ((5 * B + s) / 6 - A) / Z, ((i + F) / 2 - C) / d, ((B + s) / 2 - A) / Z), [F, s, i, B, m, e] = this.#l.subarray(12, 18), this.#g.push(((m + 5 * i) / 6 - C) / d, ((e + 5 * B) / 6 - A) / Z, ((5 * i + F) / 6 - C) / d, ((5 * B + s) / 6 - A) / Z, ((i + F) / 2 - C) / d, ((B + s) / 2 - A) / Z), !0));
  }
  toSVGPath() {
    if (this.isEmpty())
      return "";
    const I = this.#d, g = this.#g;
    if (isNaN(this.#l[6]) && !this.isEmpty())
      return this.#n();
    const C = [];
    C.push(`M${I[4]} ${I[5]}`);
    for (let A = 6; A < I.length; A += 6)
      isNaN(I[A]) ? C.push(`L${I[A + 4]} ${I[A + 5]}`) : C.push(`C${I[A]} ${I[A + 1]} ${I[A + 2]} ${I[A + 3]} ${I[A + 4]} ${I[A + 5]}`);
    this.#U(C);
    for (let A = g.length - 6; A >= 6; A -= 6)
      isNaN(g[A]) ? C.push(`L${g[A + 4]} ${g[A + 5]}`) : C.push(`C${g[A]} ${g[A + 1]} ${g[A + 2]} ${g[A + 3]} ${g[A + 4]} ${g[A + 5]}`);
    return this.#o(C), C.join(" ");
  }
  #n() {
    const [I, g, C, A] = this.#I, [d, Z, i, B] = this.#b();
    return `M${(this.#l[2] - I) / C} ${(this.#l[3] - g) / A} L${(this.#l[4] - I) / C} ${(this.#l[5] - g) / A} L${d} ${Z} L${i} ${B} L${(this.#l[16] - I) / C} ${(this.#l[17] - g) / A} L${(this.#l[14] - I) / C} ${(this.#l[15] - g) / A} Z`;
  }
  #o(I) {
    const g = this.#g;
    I.push(`L${g[4]} ${g[5]} Z`);
  }
  #U(I) {
    const [g, C, A, d] = this.#I, Z = this.#l.subarray(4, 6), i = this.#l.subarray(16, 18), [B, F, s, c] = this.#b();
    I.push(`L${(Z[0] - g) / A} ${(Z[1] - C) / d} L${B} ${F} L${s} ${c} L${(i[0] - g) / A} ${(i[1] - C) / d}`);
  }
  newFreeDrawOutline(I, g, C, A, d, Z) {
    return new rB(I, g, C, A, d, Z);
  }
  getOutlines() {
    const I = this.#d, g = this.#g, C = this.#l, [A, d, Z, i] = this.#I, B = new Float32Array((this.#V?.length ?? 0) + 2);
    for (let c = 0, G = B.length - 2; c < G; c += 2)
      B[c] = (this.#V[c] - A) / Z, B[c + 1] = (this.#V[c + 1] - d) / i;
    if (B[B.length - 2] = (this.#B - A) / Z, B[B.length - 1] = (this.#i - d) / i, isNaN(C[6]) && !this.isEmpty())
      return this.#e(B);
    const F = new Float32Array(this.#d.length + 24 + this.#g.length);
    let s = I.length;
    for (let c = 0; c < s; c += 2) {
      if (isNaN(I[c])) {
        F[c] = F[c + 1] = NaN;
        continue;
      }
      F[c] = I[c], F[c + 1] = I[c + 1];
    }
    s = this.#t(F, s);
    for (let c = g.length - 6; c >= 6; c -= 6)
      for (let G = 0; G < 6; G += 2) {
        if (isNaN(g[c + G])) {
          F[s] = F[s + 1] = NaN, s += 2;
          continue;
        }
        F[s] = g[c + G], F[s + 1] = g[c + G + 1], s += 2;
      }
    return this.#h(F, s), this.newFreeDrawOutline(F, B, this.#I, this.#G, this.#C, this.#A);
  }
  #e(I) {
    const g = this.#l, [C, A, d, Z] = this.#I, [i, B, F, s] = this.#b(), c = new Float32Array(36);
    return c.set([NaN, NaN, NaN, NaN, (g[2] - C) / d, (g[3] - A) / Z, NaN, NaN, NaN, NaN, (g[4] - C) / d, (g[5] - A) / Z, NaN, NaN, NaN, NaN, i, B, NaN, NaN, NaN, NaN, F, s, NaN, NaN, NaN, NaN, (g[16] - C) / d, (g[17] - A) / Z, NaN, NaN, NaN, NaN, (g[14] - C) / d, (g[15] - A) / Z], 0), this.newFreeDrawOutline(c, I, this.#I, this.#G, this.#C, this.#A);
  }
  #h(I, g) {
    const C = this.#g;
    return I.set([NaN, NaN, NaN, NaN, C[4], C[5]], g), g += 6;
  }
  #t(I, g) {
    const C = this.#l.subarray(4, 6), A = this.#l.subarray(16, 18), [d, Z, i, B] = this.#I, [F, s, c, G] = this.#b();
    return I.set([NaN, NaN, NaN, NaN, (C[0] - d) / i, (C[1] - Z) / B, NaN, NaN, NaN, NaN, F, s, NaN, NaN, NaN, NaN, c, G, NaN, NaN, NaN, NaN, (A[0] - d) / i, (A[1] - Z) / B], g), g += 24;
  }
}
class rB extends CI {
  #I;
  #g = new Float32Array(4);
  #C;
  #A;
  #d;
  #l;
  #B;
  constructor(I, g, C, A, d, Z) {
    super(), this.#B = I, this.#d = g, this.#I = C, this.#l = A, this.#C = d, this.#A = Z, this.lastPoint = [NaN, NaN], this.#i(Z);
    const [i, B, F, s] = this.#g;
    for (let c = 0, G = I.length; c < G; c += 2)
      I[c] = (I[c] - i) / F, I[c + 1] = (I[c + 1] - B) / s;
    for (let c = 0, G = g.length; c < G; c += 2)
      g[c] = (g[c] - i) / F, g[c + 1] = (g[c + 1] - B) / s;
  }
  toSVGPath() {
    const I = [`M${this.#B[4]} ${this.#B[5]}`];
    for (let g = 6, C = this.#B.length; g < C; g += 6) {
      if (isNaN(this.#B[g])) {
        I.push(`L${this.#B[g + 4]} ${this.#B[g + 5]}`);
        continue;
      }
      I.push(`C${this.#B[g]} ${this.#B[g + 1]} ${this.#B[g + 2]} ${this.#B[g + 3]} ${this.#B[g + 4]} ${this.#B[g + 5]}`);
    }
    return I.push("Z"), I.join(" ");
  }
  serialize([I, g, C, A], d) {
    const Z = C - I, i = A - g;
    let B, F;
    switch (d) {
      case 0:
        B = CI._rescale(this.#B, I, A, Z, -i), F = CI._rescale(this.#d, I, A, Z, -i);
        break;
      case 90:
        B = CI._rescaleAndSwap(this.#B, I, g, Z, i), F = CI._rescaleAndSwap(this.#d, I, g, Z, i);
        break;
      case 180:
        B = CI._rescale(this.#B, C, g, -Z, i), F = CI._rescale(this.#d, C, g, -Z, i);
        break;
      case 270:
        B = CI._rescaleAndSwap(this.#B, C, A, -Z, -i), F = CI._rescaleAndSwap(this.#d, C, A, -Z, -i);
        break;
    }
    return {
      outline: Array.from(B),
      points: [Array.from(F)]
    };
  }
  #i(I) {
    const g = this.#B;
    let C = g[4], A = g[5], d = C, Z = A, i = C, B = A, F = C, s = A;
    const c = I ? Math.max : Math.min;
    for (let V = 6, W = g.length; V < W; V += 6) {
      if (isNaN(g[V]))
        d = Math.min(d, g[V + 4]), Z = Math.min(Z, g[V + 5]), i = Math.max(i, g[V + 4]), B = Math.max(B, g[V + 5]), s < g[V + 5] ? (F = g[V + 4], s = g[V + 5]) : s === g[V + 5] && (F = c(F, g[V + 4]));
      else {
        const R = iI.bezierBoundingBox(C, A, ...g.slice(V, V + 6));
        d = Math.min(d, R[0]), Z = Math.min(Z, R[1]), i = Math.max(i, R[2]), B = Math.max(B, R[3]), s < R[3] ? (F = R[2], s = R[3]) : s === R[3] && (F = c(F, R[2]));
      }
      C = g[V + 4], A = g[V + 5];
    }
    const G = this.#g;
    G[0] = d - this.#C, G[1] = Z - this.#C, G[2] = i - d + 2 * this.#C, G[3] = B - Z + 2 * this.#C, this.lastPoint = [F, s];
  }
  get box() {
    return this.#g;
  }
  newOutliner(I, g, C, A, d, Z = 0) {
    return new FA(I, g, C, A, d, Z);
  }
  getNewOutline(I, g) {
    const [C, A, d, Z] = this.#g, [i, B, F, s] = this.#I, c = d * F, G = Z * s, V = C * F + i, W = A * s + B, R = this.newOutliner({
      x: this.#d[0] * c + V,
      y: this.#d[1] * G + W
    }, this.#I, this.#l, I, this.#A, g ?? this.#C);
    for (let U = 2; U < this.#d.length; U += 2)
      R.add({
        x: this.#d[U] * c + V,
        y: this.#d[U + 1] * G + W
      });
    return R.getOutlines();
  }
}
class X0 {
  #I;
  #g;
  #C = [];
  #A = [];
  constructor(I, g = 0, C = 0, A = !0) {
    let d = 1 / 0, Z = -1 / 0, i = 1 / 0, B = -1 / 0;
    const F = 10 ** -4;
    for (const {
      x: U,
      y: n,
      width: m,
      height: e
    } of I) {
      const N = Math.floor((U - g) / F) * F, w = Math.ceil((U + m + g) / F) * F, S = Math.floor((n - g) / F) * F, Y = Math.ceil((n + e + g) / F) * F, M = [N, S, Y, !0], y = [w, S, Y, !1];
      this.#C.push(M, y), d = Math.min(d, N), Z = Math.max(Z, w), i = Math.min(i, S), B = Math.max(B, Y);
    }
    const s = Z - d + 2 * C, c = B - i + 2 * C, G = d - C, V = i - C, W = this.#C.at(A ? -1 : -2), R = [W[0], W[2]];
    for (const U of this.#C) {
      const [n, m, e] = U;
      U[0] = (n - G) / s, U[1] = (m - V) / c, U[2] = (e - V) / c;
    }
    this.#I = new Float32Array([G, V, s, c]), this.#g = R;
  }
  getOutlines() {
    this.#C.sort((g, C) => g[0] - C[0] || g[1] - C[1] || g[2] - C[2]);
    const I = [];
    for (const g of this.#C)
      g[3] ? (I.push(...this.#s(g)), this.#B(g)) : (this.#i(g), I.push(...this.#s(g)));
    return this.#d(I);
  }
  #d(I) {
    const g = [], C = /* @__PURE__ */ new Set();
    for (const Z of I) {
      const [i, B, F] = Z;
      g.push([i, B, Z], [i, F, Z]);
    }
    g.sort((Z, i) => Z[1] - i[1] || Z[0] - i[0]);
    for (let Z = 0, i = g.length; Z < i; Z += 2) {
      const B = g[Z][2], F = g[Z + 1][2];
      B.push(F), F.push(B), C.add(B), C.add(F);
    }
    const A = [];
    let d;
    for (; C.size > 0; ) {
      const Z = C.values().next().value;
      let [i, B, F, s, c] = Z;
      C.delete(Z);
      let G = i, V = B;
      for (d = [i, F], A.push(d); ; ) {
        let W;
        if (C.has(s))
          W = s;
        else if (C.has(c))
          W = c;
        else
          break;
        C.delete(W), [i, B, F, s, c] = W, G !== i && (d.push(G, V, i, V === B ? B : F), G = i), V = V === B ? F : B;
      }
      d.push(G, V);
    }
    return new RG(A, this.#I, this.#g);
  }
  #l(I) {
    const g = this.#A;
    let C = 0, A = g.length - 1;
    for (; C <= A; ) {
      const d = C + A >> 1, Z = g[d][0];
      if (Z === I)
        return d;
      Z < I ? C = d + 1 : A = d - 1;
    }
    return A + 1;
  }
  #B([, I, g]) {
    const C = this.#l(I);
    this.#A.splice(C, 0, [I, g]);
  }
  #i([, I, g]) {
    const C = this.#l(I);
    for (let A = C; A < this.#A.length; A++) {
      const [d, Z] = this.#A[A];
      if (d !== I)
        break;
      if (d === I && Z === g) {
        this.#A.splice(A, 1);
        return;
      }
    }
    for (let A = C - 1; A >= 0; A--) {
      const [d, Z] = this.#A[A];
      if (d !== I)
        break;
      if (d === I && Z === g) {
        this.#A.splice(A, 1);
        return;
      }
    }
  }
  #s(I) {
    const [g, C, A] = I, d = [[g, C, A]], Z = this.#l(A);
    for (let i = 0; i < Z; i++) {
      const [B, F] = this.#A[i];
      for (let s = 0, c = d.length; s < c; s++) {
        const [, G, V] = d[s];
        if (!(F <= G || V <= B)) {
          if (G >= B) {
            if (V > F)
              d[s][1] = F;
            else {
              if (c === 1)
                return [];
              d.splice(s, 1), s--, c--;
            }
            continue;
          }
          d[s][2] = B, V > F && d.push([g, F, V]);
        }
      }
    }
    return d;
  }
}
class RG extends CI {
  #I;
  #g;
  constructor(I, g, C) {
    super(), this.#g = I, this.#I = g, this.lastPoint = C;
  }
  toSVGPath() {
    const I = [];
    for (const g of this.#g) {
      let [C, A] = g;
      I.push(`M${C} ${A}`);
      for (let d = 2; d < g.length; d += 2) {
        const Z = g[d], i = g[d + 1];
        Z === C ? (I.push(`V${i}`), A = i) : i === A && (I.push(`H${Z}`), C = Z);
      }
      I.push("Z");
    }
    return I.join(" ");
  }
  serialize([I, g, C, A], d) {
    const Z = [], i = C - I, B = A - g;
    for (const F of this.#g) {
      const s = new Array(F.length);
      for (let c = 0; c < F.length; c += 2)
        s[c] = I + F[c] * i, s[c + 1] = A - F[c + 1] * B;
      Z.push(s);
    }
    return Z;
  }
  get box() {
    return this.#I;
  }
  get classNamesForOutlining() {
    return ["highlightOutline"];
  }
}
class H0 extends FA {
  newFreeDrawOutline(I, g, C, A, d, Z) {
    return new nG(I, g, C, A, d, Z);
  }
}
class nG extends rB {
  newOutliner(I, g, C, A, d, Z = 0) {
    return new H0(I, g, C, A, d, Z);
  }
}
class CC {
  #I = null;
  #g = null;
  #C;
  #A = null;
  #d = !1;
  #l = !1;
  #B = null;
  #i;
  #s = null;
  #F = null;
  #G;
  static #c = null;
  static get _keyboardManager() {
    return uI(this, "_keyboardManager", new Ml([[["Escape", "mac+Escape"], CC.prototype._hideDropdownFromKeyboard], [[" ", "mac+ "], CC.prototype._colorSelectFromKeyboard], [["ArrowDown", "ArrowRight", "mac+ArrowDown", "mac+ArrowRight"], CC.prototype._moveToNext], [["ArrowUp", "ArrowLeft", "mac+ArrowUp", "mac+ArrowLeft"], CC.prototype._moveToPrevious], [["Home", "mac+Home"], CC.prototype._moveToBeginning], [["End", "mac+End"], CC.prototype._moveToEnd]]));
  }
  constructor({
    editor: I = null,
    uiManager: g = null
  }) {
    I ? (this.#l = !1, this.#G = pI.HIGHLIGHT_COLOR, this.#B = I) : (this.#l = !0, this.#G = pI.HIGHLIGHT_DEFAULT_COLOR), this.#F = I?._uiManager || g, this.#i = this.#F._eventBus, this.#C = I?.color || this.#F?.highlightColors.values().next().value || "#FFFF98", CC.#c ||= Object.freeze({
      blue: "pdfjs-editor-colorpicker-blue",
      green: "pdfjs-editor-colorpicker-green",
      pink: "pdfjs-editor-colorpicker-pink",
      red: "pdfjs-editor-colorpicker-red",
      yellow: "pdfjs-editor-colorpicker-yellow"
    });
  }
  renderButton() {
    const I = this.#I = document.createElement("button");
    I.className = "colorPicker", I.tabIndex = "0", I.setAttribute("data-l10n-id", "pdfjs-editor-colorpicker-button"), I.setAttribute("aria-haspopup", !0);
    const g = this.#F._signal;
    I.addEventListener("click", this.#R.bind(this), {
      signal: g
    }), I.addEventListener("keydown", this.#W.bind(this), {
      signal: g
    });
    const C = this.#g = document.createElement("span");
    return C.className = "swatch", C.setAttribute("aria-hidden", !0), C.style.backgroundColor = this.#C, I.append(C), I;
  }
  renderMainDropdown() {
    const I = this.#A = this.#V();
    return I.setAttribute("aria-orientation", "horizontal"), I.setAttribute("aria-labelledby", "highlightColorPickerLabel"), I;
  }
  #V() {
    const I = document.createElement("div"), g = this.#F._signal;
    I.addEventListener("contextmenu", RC, {
      signal: g
    }), I.className = "dropdown", I.role = "listbox", I.setAttribute("aria-multiselectable", !1), I.setAttribute("aria-orientation", "vertical"), I.setAttribute("data-l10n-id", "pdfjs-editor-colorpicker-dropdown");
    for (const [C, A] of this.#F.highlightColors) {
      const d = document.createElement("button");
      d.tabIndex = "0", d.role = "option", d.setAttribute("data-color", A), d.title = C, d.setAttribute("data-l10n-id", CC.#c[C]);
      const Z = document.createElement("span");
      d.append(Z), Z.className = "swatch", Z.style.backgroundColor = A, d.setAttribute("aria-selected", A === this.#C), d.addEventListener("click", this.#Z.bind(this, A), {
        signal: g
      }), I.append(d);
    }
    return I.addEventListener("keydown", this.#W.bind(this), {
      signal: g
    }), I;
  }
  #Z(I, g) {
    g.stopPropagation(), this.#i.dispatch("switchannotationeditorparams", {
      source: this,
      type: this.#G,
      value: I
    });
  }
  _colorSelectFromKeyboard(I) {
    if (I.target === this.#I) {
      this.#R(I);
      return;
    }
    const g = I.target.getAttribute("data-color");
    g && this.#Z(g, I);
  }
  _moveToNext(I) {
    if (!this.#n) {
      this.#R(I);
      return;
    }
    if (I.target === this.#I) {
      this.#A.firstChild?.focus();
      return;
    }
    I.target.nextSibling?.focus();
  }
  _moveToPrevious(I) {
    if (I.target === this.#A?.firstChild || I.target === this.#I) {
      this.#n && this._hideDropdownFromKeyboard();
      return;
    }
    this.#n || this.#R(I), I.target.previousSibling?.focus();
  }
  _moveToBeginning(I) {
    if (!this.#n) {
      this.#R(I);
      return;
    }
    this.#A.firstChild?.focus();
  }
  _moveToEnd(I) {
    if (!this.#n) {
      this.#R(I);
      return;
    }
    this.#A.lastChild?.focus();
  }
  #W(I) {
    CC._keyboardManager.exec(this, I);
  }
  #R(I) {
    if (this.#n) {
      this.hideDropdown();
      return;
    }
    if (this.#d = I.detail === 0, this.#s || (this.#s = new AbortController(), window.addEventListener("pointerdown", this.#b.bind(this), {
      signal: this.#F.combinedSignal(this.#s)
    })), this.#A) {
      this.#A.classList.remove("hidden");
      return;
    }
    const g = this.#A = this.#V();
    this.#I.append(g);
  }
  #b(I) {
    this.#A?.contains(I.target) || this.hideDropdown();
  }
  hideDropdown() {
    this.#A?.classList.add("hidden"), this.#s?.abort(), this.#s = null;
  }
  get #n() {
    return this.#A && !this.#A.classList.contains("hidden");
  }
  _hideDropdownFromKeyboard() {
    if (!this.#l) {
      if (!this.#n) {
        this.#B?.unselect();
        return;
      }
      this.hideDropdown(), this.#I.focus({
        preventScroll: !0,
        focusVisible: this.#d
      });
    }
  }
  updateColor(I) {
    if (this.#g && (this.#g.style.backgroundColor = I), !this.#A)
      return;
    const g = this.#F.highlightColors.values();
    for (const C of this.#A.children)
      C.setAttribute("aria-selected", g.next().value === I);
  }
  destroy() {
    this.#I?.remove(), this.#I = null, this.#g = null, this.#A?.remove(), this.#A = null;
  }
}
class lg extends WI {
  #I = null;
  #g = 0;
  #C;
  #A = null;
  #d = null;
  #l = null;
  #B = null;
  #i = 0;
  #s = null;
  #F = null;
  #G = null;
  #c = !1;
  #V = null;
  #Z;
  #W = null;
  #R = "";
  #b;
  #n = "";
  static _defaultColor = null;
  static _defaultOpacity = 1;
  static _defaultThickness = 12;
  static _type = "highlight";
  static _editorType = JI.HIGHLIGHT;
  static _freeHighlightId = -1;
  static _freeHighlight = null;
  static _freeHighlightClipId = "";
  static get _keyboardManager() {
    const I = lg.prototype;
    return uI(this, "_keyboardManager", new Ml([[["ArrowLeft", "mac+ArrowLeft"], I._moveCaret, {
      args: [0]
    }], [["ArrowRight", "mac+ArrowRight"], I._moveCaret, {
      args: [1]
    }], [["ArrowUp", "mac+ArrowUp"], I._moveCaret, {
      args: [2]
    }], [["ArrowDown", "mac+ArrowDown"], I._moveCaret, {
      args: [3]
    }]]));
  }
  constructor(I) {
    super({
      ...I,
      name: "highlightEditor"
    }), this.color = I.color || lg._defaultColor, this.#b = I.thickness || lg._defaultThickness, this.#Z = I.opacity || lg._defaultOpacity, this.#C = I.boxes || null, this.#n = I.methodOfCreation || "", this.#R = I.text || "", this._isDraggable = !1, I.highlightId > -1 ? (this.#c = !0, this.#U(I), this.#S()) : this.#C && (this.#I = I.anchorNode, this.#g = I.anchorOffset, this.#B = I.focusNode, this.#i = I.focusOffset, this.#o(), this.#S(), this.rotate(this.rotation));
  }
  get telemetryInitialData() {
    return {
      action: "added",
      type: this.#c ? "free_highlight" : "highlight",
      color: this._uiManager.highlightColorNames.get(this.color),
      thickness: this.#b,
      methodOfCreation: this.#n
    };
  }
  get telemetryFinalData() {
    return {
      type: "highlight",
      color: this._uiManager.highlightColorNames.get(this.color)
    };
  }
  static computeTelemetryFinalData(I) {
    return {
      numberOfColors: I.get("color").size
    };
  }
  #o() {
    const I = new X0(this.#C, 1e-3);
    this.#F = I.getOutlines(), [this.x, this.y, this.width, this.height] = this.#F.box;
    const g = new X0(this.#C, 25e-4, 1e-3, this._uiManager.direction === "ltr");
    this.#l = g.getOutlines();
    const {
      lastPoint: C
    } = this.#l;
    this.#V = [(C[0] - this.x) / this.width, (C[1] - this.y) / this.height];
  }
  #U({
    highlightOutlines: I,
    highlightId: g,
    clipPathId: C
  }) {
    this.#F = I;
    const A = 1.5;
    if (this.#l = I.getNewOutline(this.#b / 2 + A, 25e-4), g >= 0)
      this.#G = g, this.#A = C, this.parent.drawLayer.finalizeDraw(g, {
        bbox: I.box,
        path: {
          d: I.toSVGPath()
        }
      }), this.#W = this.parent.drawLayer.drawOutline({
        rootClass: {
          highlightOutline: !0,
          free: !0
        },
        bbox: this.#l.box,
        path: {
          d: this.#l.toSVGPath()
        }
      }, !0);
    else if (this.parent) {
      const s = this.parent.viewport.rotation;
      this.parent.drawLayer.updateProperties(this.#G, {
        bbox: lg.#m(this.#F.box, (s - this.rotation + 360) % 360),
        path: {
          d: I.toSVGPath()
        }
      }), this.parent.drawLayer.updateProperties(this.#W, {
        bbox: lg.#m(this.#l.box, s),
        path: {
          d: this.#l.toSVGPath()
        }
      });
    }
    const [d, Z, i, B] = I.box;
    switch (this.rotation) {
      case 0:
        this.x = d, this.y = Z, this.width = i, this.height = B;
        break;
      case 90: {
        const [s, c] = this.parentDimensions;
        this.x = Z, this.y = 1 - d, this.width = i * c / s, this.height = B * s / c;
        break;
      }
      case 180:
        this.x = 1 - d, this.y = 1 - Z, this.width = i, this.height = B;
        break;
      case 270: {
        const [s, c] = this.parentDimensions;
        this.x = 1 - Z, this.y = d, this.width = i * c / s, this.height = B * s / c;
        break;
      }
    }
    const {
      lastPoint: F
    } = this.#l;
    this.#V = [(F[0] - d) / i, (F[1] - Z) / B];
  }
  static initialize(I, g) {
    WI.initialize(I, g), lg._defaultColor ||= g.highlightColors?.values().next().value || "#fff066";
  }
  static updateDefaultParams(I, g) {
    switch (I) {
      case pI.HIGHLIGHT_DEFAULT_COLOR:
        lg._defaultColor = g;
        break;
      case pI.HIGHLIGHT_THICKNESS:
        lg._defaultThickness = g;
        break;
    }
  }
  translateInPage(I, g) {
  }
  get toolbarPosition() {
    return this.#V;
  }
  updateParams(I, g) {
    switch (I) {
      case pI.HIGHLIGHT_COLOR:
        this.#e(g);
        break;
      case pI.HIGHLIGHT_THICKNESS:
        this.#h(g);
        break;
    }
  }
  static get defaultPropertiesToUpdate() {
    return [[pI.HIGHLIGHT_DEFAULT_COLOR, lg._defaultColor], [pI.HIGHLIGHT_THICKNESS, lg._defaultThickness]];
  }
  get propertiesToUpdate() {
    return [[pI.HIGHLIGHT_COLOR, this.color || lg._defaultColor], [pI.HIGHLIGHT_THICKNESS, this.#b || lg._defaultThickness], [pI.HIGHLIGHT_FREE, this.#c]];
  }
  #e(I) {
    const g = (d, Z) => {
      this.color = d, this.#Z = Z, this.parent?.drawLayer.updateProperties(this.#G, {
        root: {
          fill: d,
          "fill-opacity": Z
        }
      }), this.#d?.updateColor(d);
    }, C = this.color, A = this.#Z;
    this.addCommands({
      cmd: g.bind(this, I, lg._defaultOpacity),
      undo: g.bind(this, C, A),
      post: this._uiManager.updateUI.bind(this._uiManager, this),
      mustExec: !0,
      type: pI.HIGHLIGHT_COLOR,
      overwriteIfSameType: !0,
      keepUndo: !0
    }), this._reportTelemetry({
      action: "color_changed",
      color: this._uiManager.highlightColorNames.get(I)
    }, !0);
  }
  #h(I) {
    const g = this.#b, C = (A) => {
      this.#b = A, this.#t(A);
    };
    this.addCommands({
      cmd: C.bind(this, I),
      undo: C.bind(this, g),
      post: this._uiManager.updateUI.bind(this._uiManager, this),
      mustExec: !0,
      type: pI.INK_THICKNESS,
      overwriteIfSameType: !0,
      keepUndo: !0
    }), this._reportTelemetry({
      action: "thickness_changed",
      thickness: I
    }, !0);
  }
  async addEditToolbar() {
    const I = await super.addEditToolbar();
    return I ? (this._uiManager.highlightColors && (this.#d = new CC({
      editor: this
    }), I.addColorPicker(this.#d)), I) : null;
  }
  disableEditing() {
    super.disableEditing(), this.div.classList.toggle("disabled", !0);
  }
  enableEditing() {
    super.enableEditing(), this.div.classList.toggle("disabled", !1);
  }
  fixAndSetPosition() {
    return super.fixAndSetPosition(this.#D());
  }
  getBaseTranslation() {
    return [0, 0];
  }
  getRect(I, g) {
    return super.getRect(I, g, this.#D());
  }
  onceAdded(I) {
    this.annotationElementId || this.parent.addUndoableEditor(this), I && this.div.focus();
  }
  remove() {
    this.#w(), this._reportTelemetry({
      action: "deleted"
    }), super.remove();
  }
  rebuild() {
    this.parent && (super.rebuild(), this.div !== null && (this.#S(), this.isAttachedToDOM || this.parent.add(this)));
  }
  setParent(I) {
    let g = !1;
    this.parent && !I ? this.#w() : I && (this.#S(I), g = !this.parent && this.div?.classList.contains("selectedEditor")), super.setParent(I), this.show(this._isVisible), g && this.select();
  }
  #t(I) {
    if (!this.#c)
      return;
    this.#U({
      highlightOutlines: this.#F.getNewOutline(I / 2)
    }), this.fixAndSetPosition();
    const [g, C] = this.parentDimensions;
    this.setDims(this.width * g, this.height * C);
  }
  #w() {
    this.#G === null || !this.parent || (this.parent.drawLayer.remove(this.#G), this.#G = null, this.parent.drawLayer.remove(this.#W), this.#W = null);
  }
  #S(I = this.parent) {
    this.#G === null && ({
      id: this.#G,
      clipPathId: this.#A
    } = I.drawLayer.draw({
      bbox: this.#F.box,
      root: {
        viewBox: "0 0 1 1",
        fill: this.color,
        "fill-opacity": this.#Z
      },
      rootClass: {
        highlight: !0,
        free: this.#c
      },
      path: {
        d: this.#F.toSVGPath()
      }
    }, !1, !0), this.#W = I.drawLayer.drawOutline({
      rootClass: {
        highlightOutline: !0,
        free: this.#c
      },
      bbox: this.#l.box,
      path: {
        d: this.#l.toSVGPath()
      }
    }, this.#c), this.#s && (this.#s.style.clipPath = this.#A));
  }
  static #m([I, g, C, A], d) {
    switch (d) {
      case 90:
        return [1 - g - A, I, A, C];
      case 180:
        return [1 - I - C, 1 - g - A, C, A];
      case 270:
        return [g, 1 - I - C, A, C];
    }
    return [I, g, C, A];
  }
  rotate(I) {
    const {
      drawLayer: g
    } = this.parent;
    let C;
    this.#c ? (I = (I - this.rotation + 360) % 360, C = lg.#m(this.#F.box, I)) : C = lg.#m([this.x, this.y, this.width, this.height], I), g.updateProperties(this.#G, {
      bbox: C,
      root: {
        "data-main-rotation": I
      }
    }), g.updateProperties(this.#W, {
      bbox: lg.#m(this.#l.box, I),
      root: {
        "data-main-rotation": I
      }
    });
  }
  render() {
    if (this.div)
      return this.div;
    const I = super.render();
    this.#R && (I.setAttribute("aria-label", this.#R), I.setAttribute("role", "mark")), this.#c ? I.classList.add("free") : this.div.addEventListener("keydown", this.#Y.bind(this), {
      signal: this._uiManager._signal
    });
    const g = this.#s = document.createElement("div");
    I.append(g), g.setAttribute("aria-hidden", "true"), g.className = "internal", g.style.clipPath = this.#A;
    const [C, A] = this.parentDimensions;
    return this.setDims(this.width * C, this.height * A), Rd(this, this.#s, ["pointerover", "pointerleave"]), this.enableEditing(), I;
  }
  pointerover() {
    this.isSelected || this.parent?.drawLayer.updateProperties(this.#W, {
      rootClass: {
        hovered: !0
      }
    });
  }
  pointerleave() {
    this.isSelected || this.parent?.drawLayer.updateProperties(this.#W, {
      rootClass: {
        hovered: !1
      }
    });
  }
  #Y(I) {
    lg._keyboardManager.exec(this, I);
  }
  _moveCaret(I) {
    switch (this.parent.unselect(this), I) {
      case 0:
      case 2:
        this.#N(!0);
        break;
      case 1:
      case 3:
        this.#N(!1);
        break;
    }
  }
  #N(I) {
    if (!this.#I)
      return;
    const g = window.getSelection();
    I ? g.setPosition(this.#I, this.#g) : g.setPosition(this.#B, this.#i);
  }
  select() {
    super.select(), this.#W && this.parent?.drawLayer.updateProperties(this.#W, {
      rootClass: {
        hovered: !1,
        selected: !0
      }
    });
  }
  unselect() {
    super.unselect(), this.#W && (this.parent?.drawLayer.updateProperties(this.#W, {
      rootClass: {
        selected: !1
      }
    }), this.#c || this.#N(!1));
  }
  get _mustFixPosition() {
    return !this.#c;
  }
  show(I = this._isVisible) {
    super.show(I), this.parent && (this.parent.drawLayer.updateProperties(this.#G, {
      rootClass: {
        hidden: !I
      }
    }), this.parent.drawLayer.updateProperties(this.#W, {
      rootClass: {
        hidden: !I
      }
    }));
  }
  #D() {
    return this.#c ? this.rotation : 0;
  }
  #y() {
    if (this.#c)
      return null;
    const [I, g] = this.pageDimensions, [C, A] = this.pageTranslation, d = this.#C, Z = new Float32Array(d.length * 8);
    let i = 0;
    for (const {
      x: B,
      y: F,
      width: s,
      height: c
    } of d) {
      const G = B * I + C, V = (1 - F) * g + A;
      Z[i] = Z[i + 4] = G, Z[i + 1] = Z[i + 3] = V, Z[i + 2] = Z[i + 6] = G + s * I, Z[i + 5] = Z[i + 7] = V - c * g, i += 8;
    }
    return Z;
  }
  #H(I) {
    return this.#F.serialize(I, this.#D());
  }
  static startHighlighting(I, g, {
    target: C,
    x: A,
    y: d
  }) {
    const {
      x: Z,
      y: i,
      width: B,
      height: F
    } = C.getBoundingClientRect(), s = new AbortController(), c = I.combinedSignal(s), G = (V) => {
      s.abort(), this.#a(I, V);
    };
    window.addEventListener("blur", G, {
      signal: c
    }), window.addEventListener("pointerup", G, {
      signal: c
    }), window.addEventListener("pointerdown", Lg, {
      capture: !0,
      passive: !1,
      signal: c
    }), window.addEventListener("contextmenu", RC, {
      signal: c
    }), C.addEventListener("pointermove", this.#Q.bind(this, I), {
      signal: c
    }), this._freeHighlight = new H0({
      x: A,
      y: d
    }, [Z, i, B, F], I.scale, this._defaultThickness / 2, g, 1e-3), {
      id: this._freeHighlightId,
      clipPathId: this._freeHighlightClipId
    } = I.drawLayer.draw({
      bbox: [0, 0, 1, 1],
      root: {
        viewBox: "0 0 1 1",
        fill: this._defaultColor,
        "fill-opacity": this._defaultOpacity
      },
      rootClass: {
        highlight: !0,
        free: !0
      },
      path: {
        d: this._freeHighlight.toSVGPath()
      }
    }, !0, !0);
  }
  static #Q(I, g) {
    this._freeHighlight.add(g) && I.drawLayer.updateProperties(this._freeHighlightId, {
      path: {
        d: this._freeHighlight.toSVGPath()
      }
    });
  }
  static #a(I, g) {
    this._freeHighlight.isEmpty() ? I.drawLayer.remove(this._freeHighlightId) : I.createAndAddNewEditor(g, !1, {
      highlightId: this._freeHighlightId,
      highlightOutlines: this._freeHighlight.getOutlines(),
      clipPathId: this._freeHighlightClipId,
      methodOfCreation: "main_toolbar"
    }), this._freeHighlightId = -1, this._freeHighlight = null, this._freeHighlightClipId = "";
  }
  static async deserialize(I, g, C) {
    let A = null;
    if (I instanceof kB) {
      const {
        data: {
          quadPoints: W,
          rect: R,
          rotation: U,
          id: n,
          color: m,
          opacity: e,
          popupRef: N
        },
        parent: {
          page: {
            pageNumber: w
          }
        }
      } = I;
      A = I = {
        annotationType: JI.HIGHLIGHT,
        color: Array.from(m),
        opacity: e,
        quadPoints: W,
        boxes: null,
        pageIndex: w - 1,
        rect: R.slice(0),
        rotation: U,
        id: n,
        deleted: !1,
        popupRef: N
      };
    } else if (I instanceof GZ) {
      const {
        data: {
          inkLists: W,
          rect: R,
          rotation: U,
          id: n,
          color: m,
          borderStyle: {
            rawWidth: e
          },
          popupRef: N
        },
        parent: {
          page: {
            pageNumber: w
          }
        }
      } = I;
      A = I = {
        annotationType: JI.HIGHLIGHT,
        color: Array.from(m),
        thickness: e,
        inkLists: W,
        boxes: null,
        pageIndex: w - 1,
        rect: R.slice(0),
        rotation: U,
        id: n,
        deleted: !1,
        popupRef: N
      };
    }
    const {
      color: d,
      quadPoints: Z,
      inkLists: i,
      opacity: B
    } = I, F = await super.deserialize(I, g, C);
    F.color = iI.makeHexColor(...d), F.#Z = B || 1, i && (F.#b = I.thickness), F.annotationElementId = I.id || null, F._initialData = A;
    const [s, c] = F.pageDimensions, [G, V] = F.pageTranslation;
    if (Z) {
      const W = F.#C = [];
      for (let R = 0; R < Z.length; R += 8)
        W.push({
          x: (Z[R] - G) / s,
          y: 1 - (Z[R + 1] - V) / c,
          width: (Z[R + 2] - Z[R]) / s,
          height: (Z[R + 1] - Z[R + 5]) / c
        });
      F.#o(), F.#S(), F.rotate(F.rotation);
    } else if (i) {
      F.#c = !0;
      const W = i[0], R = {
        x: W[0] - G,
        y: c - (W[1] - V)
      }, U = new H0(R, [0, 0, s, c], 1, F.#b / 2, !0, 1e-3);
      for (let e = 0, N = W.length; e < N; e += 2)
        R.x = W[e] - G, R.y = c - (W[e + 1] - V), U.add(R);
      const {
        id: n,
        clipPathId: m
      } = g.drawLayer.draw({
        bbox: [0, 0, 1, 1],
        root: {
          viewBox: "0 0 1 1",
          fill: F.color,
          "fill-opacity": F._defaultOpacity
        },
        rootClass: {
          highlight: !0,
          free: !0
        },
        path: {
          d: U.toSVGPath()
        }
      }, !0, !0);
      F.#U({
        highlightOutlines: U.getOutlines(),
        highlightId: n,
        clipPathId: m
      }), F.#S();
    }
    return F;
  }
  serialize(I = !1) {
    if (this.isEmpty() || I)
      return null;
    if (this.deleted)
      return this.serializeDeleted();
    const g = this.getRect(0, 0), C = WI._colorManager.convert(this.color), A = {
      annotationType: JI.HIGHLIGHT,
      color: C,
      opacity: this.#Z,
      thickness: this.#b,
      quadPoints: this.#y(),
      outlines: this.#H(g),
      pageIndex: this.pageIndex,
      rect: g,
      rotation: this.#D(),
      structTreeParentId: this._structTreeParentId
    };
    return this.annotationElementId && !this.#M(A) ? null : (A.id = this.annotationElementId, A);
  }
  #M(I) {
    const {
      color: g
    } = this._initialData;
    return I.color.some((C, A) => C !== g[A]);
  }
  renderAnnotationElement(I) {
    return I.updateEdited({
      rect: this.getRect(0, 0)
    }), null;
  }
  static canCreateNewEmptyEditor() {
    return !1;
  }
}
class UG {
  #I = /* @__PURE__ */ Object.create(null);
  updateProperty(I, g) {
    this[I] = g, this.updateSVGProperty(I, g);
  }
  updateProperties(I) {
    if (I)
      for (const [g, C] of Object.entries(I))
        this.updateProperty(g, C);
  }
  updateSVGProperty(I, g) {
    this.#I[I] = g;
  }
  toSVGProperties() {
    const I = this.#I;
    return this.#I = /* @__PURE__ */ Object.create(null), {
      root: I
    };
  }
  reset() {
    this.#I = /* @__PURE__ */ Object.create(null);
  }
  updateAll(I = this) {
    this.updateProperties(I);
  }
  clone() {
    _I("Not implemented");
  }
}
class VI extends WI {
  #I = null;
  #g;
  _drawId = null;
  static _currentDrawId = -1;
  static _currentParent = null;
  static #C = null;
  static #A = null;
  static #d = null;
  static #l = NaN;
  static #B = null;
  static #i = null;
  static #s = NaN;
  static _INNER_MARGIN = 3;
  constructor(I) {
    super(I), this.#g = I.mustBeCommitted || !1, I.drawOutlines && (this.#F(I), this.#V());
  }
  #F({
    drawOutlines: I,
    drawId: g,
    drawingOptions: C
  }) {
    this.#I = I, this._drawingOptions ||= C, g >= 0 ? (this._drawId = g, this.parent.drawLayer.finalizeDraw(g, I.defaultProperties)) : this._drawId = this.#G(I, this.parent), this.#R(I.box);
  }
  #G(I, g) {
    const {
      id: C
    } = g.drawLayer.draw(VI._mergeSVGProperties(this._drawingOptions.toSVGProperties(), I.defaultSVGProperties), !1, !1);
    return C;
  }
  static _mergeSVGProperties(I, g) {
    const C = new Set(Object.keys(I));
    for (const [A, d] of Object.entries(g))
      C.has(A) ? Object.assign(I[A], d) : I[A] = d;
    return I;
  }
  static getDefaultDrawingOptions(I) {
    _I("Not implemented");
  }
  static get typesMap() {
    _I("Not implemented");
  }
  static get isDrawer() {
    return !0;
  }
  static get supportMultipleDrawings() {
    return !1;
  }
  static updateDefaultParams(I, g) {
    const C = this.typesMap.get(I);
    C && this._defaultDrawingOptions.updateProperty(C, g), this._currentParent && (VI.#C.updateProperty(C, g), this._currentParent.drawLayer.updateProperties(this._currentDrawId, this._defaultDrawingOptions.toSVGProperties()));
  }
  updateParams(I, g) {
    const C = this.constructor.typesMap.get(I);
    C && this._updateProperty(I, C, g);
  }
  static get defaultPropertiesToUpdate() {
    const I = [], g = this._defaultDrawingOptions;
    for (const [C, A] of this.typesMap)
      I.push([C, g[A]]);
    return I;
  }
  get propertiesToUpdate() {
    const I = [], {
      _drawingOptions: g
    } = this;
    for (const [C, A] of this.constructor.typesMap)
      I.push([C, g[A]]);
    return I;
  }
  _updateProperty(I, g, C) {
    const A = this._drawingOptions, d = A[g], Z = (i) => {
      A.updateProperty(g, i);
      const B = this.#I.updateProperty(g, i);
      B && this.#R(B), this.parent?.drawLayer.updateProperties(this._drawId, A.toSVGProperties());
    };
    this.addCommands({
      cmd: Z.bind(this, C),
      undo: Z.bind(this, d),
      post: this._uiManager.updateUI.bind(this._uiManager, this),
      mustExec: !0,
      type: I,
      overwriteIfSameType: !0,
      keepUndo: !0
    });
  }
  _onResizing() {
    this.parent?.drawLayer.updateProperties(this._drawId, VI._mergeSVGProperties(this.#I.getPathResizingSVGProperties(this.#W()), {
      bbox: this.#b()
    }));
  }
  _onResized() {
    this.parent?.drawLayer.updateProperties(this._drawId, VI._mergeSVGProperties(this.#I.getPathResizedSVGProperties(this.#W()), {
      bbox: this.#b()
    }));
  }
  _onTranslating(I, g) {
    this.parent?.drawLayer.updateProperties(this._drawId, {
      bbox: this.#b(I, g)
    });
  }
  _onTranslated() {
    this.parent?.drawLayer.updateProperties(this._drawId, VI._mergeSVGProperties(this.#I.getPathTranslatedSVGProperties(this.#W(), this.parentDimensions), {
      bbox: this.#b()
    }));
  }
  _onStartDragging() {
    this.parent?.drawLayer.updateProperties(this._drawId, {
      rootClass: {
        moving: !0
      }
    });
  }
  _onStopDragging() {
    this.parent?.drawLayer.updateProperties(this._drawId, {
      rootClass: {
        moving: !1
      }
    });
  }
  commit() {
    super.commit(), this.disableEditMode(), this.disableEditing();
  }
  disableEditing() {
    super.disableEditing(), this.div.classList.toggle("disabled", !0);
  }
  enableEditing() {
    super.enableEditing(), this.div.classList.toggle("disabled", !1);
  }
  getBaseTranslation() {
    return [0, 0];
  }
  get isResizable() {
    return !0;
  }
  onceAdded(I) {
    this.annotationElementId || this.parent.addUndoableEditor(this), this._isDraggable = !0, this.#g && (this.#g = !1, this.commit(), this.parent.setSelected(this), I && this.isOnScreen && this.div.focus());
  }
  remove() {
    this.#c(), super.remove();
  }
  rebuild() {
    this.parent && (super.rebuild(), this.div !== null && (this.#V(), this.#R(this.#I.box), this.isAttachedToDOM || this.parent.add(this)));
  }
  setParent(I) {
    let g = !1;
    this.parent && !I ? (this._uiManager.removeShouldRescale(this), this.#c()) : I && (this._uiManager.addShouldRescale(this), this.#V(I), g = !this.parent && this.div?.classList.contains("selectedEditor")), super.setParent(I), g && this.select();
  }
  #c() {
    this._drawId === null || !this.parent || (this.parent.drawLayer.remove(this._drawId), this._drawId = null, this._drawingOptions.reset());
  }
  #V(I = this.parent) {
    if (!(this._drawId !== null && this.parent === I)) {
      if (this._drawId !== null) {
        this.parent.drawLayer.updateParent(this._drawId, I.drawLayer);
        return;
      }
      this._drawingOptions.updateAll(), this._drawId = this.#G(this.#I, I);
    }
  }
  #Z([I, g, C, A]) {
    const {
      parentDimensions: [d, Z],
      rotation: i
    } = this;
    switch (i) {
      case 90:
        return [g, 1 - I, C * (Z / d), A * (d / Z)];
      case 180:
        return [1 - I, 1 - g, C, A];
      case 270:
        return [1 - g, I, C * (Z / d), A * (d / Z)];
      default:
        return [I, g, C, A];
    }
  }
  #W() {
    const {
      x: I,
      y: g,
      width: C,
      height: A,
      parentDimensions: [d, Z],
      rotation: i
    } = this;
    switch (i) {
      case 90:
        return [1 - g, I, C * (d / Z), A * (Z / d)];
      case 180:
        return [1 - I, 1 - g, C, A];
      case 270:
        return [g, 1 - I, C * (d / Z), A * (Z / d)];
      default:
        return [I, g, C, A];
    }
  }
  #R(I) {
    if ([this.x, this.y, this.width, this.height] = this.#Z(I), this.div) {
      this.fixAndSetPosition();
      const [g, C] = this.parentDimensions;
      this.setDims(this.width * g, this.height * C);
    }
    this._onResized();
  }
  #b() {
    const {
      x: I,
      y: g,
      width: C,
      height: A,
      rotation: d,
      parentRotation: Z,
      parentDimensions: [i, B]
    } = this;
    switch ((d * 4 + Z) / 90) {
      case 1:
        return [1 - g - A, I, A, C];
      case 2:
        return [1 - I - C, 1 - g - A, C, A];
      case 3:
        return [g, 1 - I - C, A, C];
      case 4:
        return [I, g - C * (i / B), A * (B / i), C * (i / B)];
      case 5:
        return [1 - g, I, C * (i / B), A * (B / i)];
      case 6:
        return [1 - I - A * (B / i), 1 - g, A * (B / i), C * (i / B)];
      case 7:
        return [g - C * (i / B), 1 - I - A * (B / i), C * (i / B), A * (B / i)];
      case 8:
        return [I - C, g - A, C, A];
      case 9:
        return [1 - g, I - C, A, C];
      case 10:
        return [1 - I, 1 - g, C, A];
      case 11:
        return [g - A, 1 - I, A, C];
      case 12:
        return [I - A * (B / i), g, A * (B / i), C * (i / B)];
      case 13:
        return [1 - g - C * (i / B), I - A * (B / i), C * (i / B), A * (B / i)];
      case 14:
        return [1 - I, 1 - g - C * (i / B), A * (B / i), C * (i / B)];
      case 15:
        return [g, 1 - I, C * (i / B), A * (B / i)];
      default:
        return [I, g, C, A];
    }
  }
  rotate() {
    this.parent && this.parent.drawLayer.updateProperties(this._drawId, VI._mergeSVGProperties({
      bbox: this.#b()
    }, this.#I.updateRotation((this.parentRotation - this.rotation + 360) % 360)));
  }
  onScaleChanging() {
    this.parent && this.#R(this.#I.updateParentDimensions(this.parentDimensions, this.parent.scale));
  }
  static onScaleChangingWhenDrawing() {
  }
  render() {
    if (this.div)
      return this.div;
    const I = super.render();
    I.classList.add("draw");
    const g = document.createElement("div");
    I.append(g), g.setAttribute("aria-hidden", "true"), g.className = "internal";
    const [C, A] = this.parentDimensions;
    return this.setDims(this.width * C, this.height * A), this._uiManager.addShouldRescale(this), this.disableEditing(), I;
  }
  static createDrawerInstance(I, g, C, A, d) {
    _I("Not implemented");
  }
  static startDrawing(I, g, C, A) {
    const {
      target: d,
      offsetX: Z,
      offsetY: i,
      pointerId: B,
      pointerType: F
    } = A;
    if (VI.#B && VI.#B !== F)
      return;
    const {
      viewport: {
        rotation: s
      }
    } = I, {
      width: c,
      height: G
    } = d.getBoundingClientRect(), V = VI.#A = new AbortController(), W = I.combinedSignal(V);
    if (VI.#l ||= B, VI.#B ??= F, window.addEventListener("pointerup", (R) => {
      VI.#l === R.pointerId ? this._endDraw(R) : VI.#i?.delete(R.pointerId);
    }, {
      signal: W
    }), window.addEventListener("pointercancel", (R) => {
      VI.#l === R.pointerId ? this._currentParent.endDrawingSession() : VI.#i?.delete(R.pointerId);
    }, {
      signal: W
    }), window.addEventListener("pointerdown", (R) => {
      VI.#B === R.pointerType && ((VI.#i ||= /* @__PURE__ */ new Set()).add(R.pointerId), VI.#C.isCancellable() && (VI.#C.removeLastElement(), VI.#C.isEmpty() ? this._currentParent.endDrawingSession(!0) : this._endDraw(null)));
    }, {
      capture: !0,
      passive: !1,
      signal: W
    }), window.addEventListener("contextmenu", RC, {
      signal: W
    }), d.addEventListener("pointermove", this._drawMove.bind(this), {
      signal: W
    }), d.addEventListener("touchmove", (R) => {
      R.timeStamp === VI.#s && Lg(R);
    }, {
      signal: W
    }), I.toggleDrawing(), g._editorUndoBar?.hide(), VI.#C) {
      I.drawLayer.updateProperties(this._currentDrawId, VI.#C.startNew(Z, i, c, G, s));
      return;
    }
    g.updateUIForDefaultProperties(this), VI.#C = this.createDrawerInstance(Z, i, c, G, s), VI.#d = this.getDefaultDrawingOptions(), this._currentParent = I, {
      id: this._currentDrawId
    } = I.drawLayer.draw(this._mergeSVGProperties(VI.#d.toSVGProperties(), VI.#C.defaultSVGProperties), !0, !1);
  }
  static _drawMove(I) {
    if (VI.#s = -1, !VI.#C)
      return;
    const {
      offsetX: g,
      offsetY: C,
      pointerId: A
    } = I;
    if (VI.#l === A) {
      if (VI.#i?.size >= 1) {
        this._endDraw(I);
        return;
      }
      this._currentParent.drawLayer.updateProperties(this._currentDrawId, VI.#C.add(g, C)), VI.#s = I.timeStamp, Lg(I);
    }
  }
  static _cleanup(I) {
    I && (this._currentDrawId = -1, this._currentParent = null, VI.#C = null, VI.#d = null, VI.#B = null, VI.#s = NaN), VI.#A && (VI.#A.abort(), VI.#A = null, VI.#l = NaN, VI.#i = null);
  }
  static _endDraw(I) {
    const g = this._currentParent;
    if (g) {
      if (g.toggleDrawing(!0), this._cleanup(!1), I && g.drawLayer.updateProperties(this._currentDrawId, VI.#C.end(I.offsetX, I.offsetY)), this.supportMultipleDrawings) {
        const C = VI.#C, A = this._currentDrawId, d = C.getLastElement();
        g.addCommands({
          cmd: () => {
            g.drawLayer.updateProperties(A, C.setLastElement(d));
          },
          undo: () => {
            g.drawLayer.updateProperties(A, C.removeLastElement());
          },
          mustExec: !1,
          type: pI.DRAW_STEP
        });
        return;
      }
      this.endDrawing(!1);
    }
  }
  static endDrawing(I) {
    const g = this._currentParent;
    if (!g)
      return null;
    if (g.toggleDrawing(!0), g.cleanUndoStack(pI.DRAW_STEP), !VI.#C.isEmpty()) {
      const {
        pageDimensions: [C, A],
        scale: d
      } = g, Z = g.createAndAddNewEditor({
        offsetX: 0,
        offsetY: 0
      }, !1, {
        drawId: this._currentDrawId,
        drawOutlines: VI.#C.getOutlines(C * d, A * d, d, this._INNER_MARGIN),
        drawingOptions: VI.#d,
        mustBeCommitted: !I
      });
      return this._cleanup(!0), Z;
    }
    return g.drawLayer.remove(this._currentDrawId), this._cleanup(!0), null;
  }
  createDrawingOptions(I) {
  }
  static deserializeDraw(I, g, C, A, d, Z) {
    _I("Not implemented");
  }
  static async deserialize(I, g, C) {
    const {
      rawDims: {
        pageWidth: A,
        pageHeight: d,
        pageX: Z,
        pageY: i
      }
    } = g.viewport, B = this.deserializeDraw(Z, i, A, d, this._INNER_MARGIN, I), F = await super.deserialize(I, g, C);
    return F.createDrawingOptions(I), F.#F({
      drawOutlines: B
    }), F.#V(), F.onScaleChanging(), F.rotate(), F;
  }
  serializeDraw(I) {
    const [g, C] = this.pageTranslation, [A, d] = this.pageDimensions;
    return this.#I.serialize([g, C, A, d], I);
  }
  renderAnnotationElement(I) {
    return I.updateEdited({
      rect: this.getRect(0, 0)
    }), null;
  }
  static canCreateNewEmptyEditor() {
    return !1;
  }
}
class aG {
  #I = new Float64Array(6);
  #g;
  #C;
  #A;
  #d;
  #l;
  #B = "";
  #i = 0;
  #s = new Td();
  #F;
  #G;
  constructor(I, g, C, A, d, Z) {
    this.#F = C, this.#G = A, this.#A = d, this.#d = Z, [I, g] = this.#c(I, g);
    const i = this.#g = [NaN, NaN, NaN, NaN, I, g];
    this.#l = [I, g], this.#C = [{
      line: i,
      points: this.#l
    }], this.#I.set(i, 0);
  }
  updateProperty(I, g) {
    I === "stroke-width" && (this.#d = g);
  }
  #c(I, g) {
    return CI._normalizePoint(I, g, this.#F, this.#G, this.#A);
  }
  isEmpty() {
    return !this.#C || this.#C.length === 0;
  }
  isCancellable() {
    return this.#l.length <= 10;
  }
  add(I, g) {
    [I, g] = this.#c(I, g);
    const [C, A, d, Z] = this.#I.subarray(2, 6), i = I - d, B = g - Z;
    return Math.hypot(this.#F * i, this.#G * B) <= 2 ? null : (this.#l.push(I, g), isNaN(C) ? (this.#I.set([d, Z, I, g], 2), this.#g.push(NaN, NaN, NaN, NaN, I, g), {
      path: {
        d: this.toSVGPath()
      }
    }) : (isNaN(this.#I[0]) && this.#g.splice(6, 6), this.#I.set([C, A, d, Z, I, g], 0), this.#g.push(...CI.createBezierPoints(C, A, d, Z, I, g)), {
      path: {
        d: this.toSVGPath()
      }
    }));
  }
  end(I, g) {
    const C = this.add(I, g);
    return C || (this.#l.length === 2 ? {
      path: {
        d: this.toSVGPath()
      }
    } : null);
  }
  startNew(I, g, C, A, d) {
    this.#F = C, this.#G = A, this.#A = d, [I, g] = this.#c(I, g);
    const Z = this.#g = [NaN, NaN, NaN, NaN, I, g];
    this.#l = [I, g];
    const i = this.#C.at(-1);
    return i && (i.line = new Float32Array(i.line), i.points = new Float32Array(i.points)), this.#C.push({
      line: Z,
      points: this.#l
    }), this.#I.set(Z, 0), this.#i = 0, this.toSVGPath(), null;
  }
  getLastElement() {
    return this.#C.at(-1);
  }
  setLastElement(I) {
    return this.#C ? (this.#C.push(I), this.#g = I.line, this.#l = I.points, this.#i = 0, {
      path: {
        d: this.toSVGPath()
      }
    }) : this.#s.setLastElement(I);
  }
  removeLastElement() {
    if (!this.#C)
      return this.#s.removeLastElement();
    this.#C.pop(), this.#B = "";
    for (let I = 0, g = this.#C.length; I < g; I++) {
      const {
        line: C,
        points: A
      } = this.#C[I];
      this.#g = C, this.#l = A, this.#i = 0, this.toSVGPath();
    }
    return {
      path: {
        d: this.#B
      }
    };
  }
  toSVGPath() {
    const I = CI.svgRound(this.#g[4]), g = CI.svgRound(this.#g[5]);
    if (this.#l.length === 2)
      return this.#B = `${this.#B} M ${I} ${g} Z`, this.#B;
    if (this.#l.length <= 6) {
      const A = this.#B.lastIndexOf("M");
      this.#B = `${this.#B.slice(0, A)} M ${I} ${g}`, this.#i = 6;
    }
    if (this.#l.length === 4) {
      const A = CI.svgRound(this.#g[10]), d = CI.svgRound(this.#g[11]);
      return this.#B = `${this.#B} L ${A} ${d}`, this.#i = 12, this.#B;
    }
    const C = [];
    this.#i === 0 && (C.push(`M ${I} ${g}`), this.#i = 6);
    for (let A = this.#i, d = this.#g.length; A < d; A += 6) {
      const [Z, i, B, F, s, c] = this.#g.slice(A, A + 6).map(CI.svgRound);
      C.push(`C${Z} ${i} ${B} ${F} ${s} ${c}`);
    }
    return this.#B += C.join(" "), this.#i = this.#g.length, this.#B;
  }
  getOutlines(I, g, C, A) {
    const d = this.#C.at(-1);
    return d.line = new Float32Array(d.line), d.points = new Float32Array(d.points), this.#s.build(this.#C, I, g, C, this.#A, this.#d, A), this.#I = null, this.#g = null, this.#C = null, this.#B = null, this.#s;
  }
  get defaultSVGProperties() {
    return {
      root: {
        viewBox: "0 0 10000 10000"
      },
      rootClass: {
        draw: !0
      },
      bbox: [0, 0, 1, 1]
    };
  }
}
class Td extends CI {
  #I;
  #g = 0;
  #C;
  #A;
  #d;
  #l;
  #B;
  #i;
  #s;
  build(I, g, C, A, d, Z, i) {
    this.#d = g, this.#l = C, this.#B = A, this.#i = d, this.#s = Z, this.#C = i ?? 0, this.#A = I, this.#c();
  }
  setLastElement(I) {
    return this.#A.push(I), {
      path: {
        d: this.toSVGPath()
      }
    };
  }
  removeLastElement() {
    return this.#A.pop(), {
      path: {
        d: this.toSVGPath()
      }
    };
  }
  toSVGPath() {
    const I = [];
    for (const {
      line: g
    } of this.#A) {
      if (I.push(`M${CI.svgRound(g[4])} ${CI.svgRound(g[5])}`), g.length === 6) {
        I.push("Z");
        continue;
      }
      if (g.length === 12) {
        I.push(`L${CI.svgRound(g[10])} ${CI.svgRound(g[11])}`);
        continue;
      }
      for (let C = 6, A = g.length; C < A; C += 6) {
        const [d, Z, i, B, F, s] = g.subarray(C, C + 6).map(CI.svgRound);
        I.push(`C${d} ${Z} ${i} ${B} ${F} ${s}`);
      }
    }
    return I.join("");
  }
  serialize([I, g, C, A], d) {
    const Z = [], i = [], [B, F, s, c] = this.#G();
    let G, V, W, R, U, n, m, e, N;
    switch (this.#i) {
      case 0:
        N = CI._rescale, G = I, V = g + A, W = C, R = -A, U = I + B * C, n = g + (1 - F - c) * A, m = I + (B + s) * C, e = g + (1 - F) * A;
        break;
      case 90:
        N = CI._rescaleAndSwap, G = I, V = g, W = C, R = A, U = I + F * C, n = g + B * A, m = I + (F + c) * C, e = g + (B + s) * A;
        break;
      case 180:
        N = CI._rescale, G = I + C, V = g, W = -C, R = A, U = I + (1 - B - s) * C, n = g + F * A, m = I + (1 - B) * C, e = g + (F + c) * A;
        break;
      case 270:
        N = CI._rescaleAndSwap, G = I + C, V = g + A, W = -C, R = -A, U = I + (1 - F - c) * C, n = g + (1 - B - s) * A, m = I + (1 - F) * C, e = g + (1 - B) * A;
        break;
    }
    for (const {
      line: w,
      points: S
    } of this.#A)
      Z.push(N(w, G, V, W, R, d ? new Array(w.length) : null)), i.push(N(S, G, V, W, R, d ? new Array(S.length) : null));
    return {
      lines: Z,
      points: i,
      rect: [U, n, m, e]
    };
  }
  static deserialize(I, g, C, A, d, {
    paths: {
      lines: Z,
      points: i
    },
    rotation: B,
    thickness: F
  }) {
    const s = [];
    let c, G, V, W, R;
    switch (B) {
      case 0:
        R = CI._rescale, c = -I / C, G = g / A + 1, V = 1 / C, W = -1 / A;
        break;
      case 90:
        R = CI._rescaleAndSwap, c = -g / A, G = -I / C, V = 1 / A, W = 1 / C;
        break;
      case 180:
        R = CI._rescale, c = I / C + 1, G = -g / A, V = -1 / C, W = 1 / A;
        break;
      case 270:
        R = CI._rescaleAndSwap, c = g / A + 1, G = I / C + 1, V = -1 / A, W = -1 / C;
        break;
    }
    if (!Z) {
      Z = [];
      for (const n of i) {
        const m = n.length;
        if (m === 2) {
          Z.push(new Float32Array([NaN, NaN, NaN, NaN, n[0], n[1]]));
          continue;
        }
        if (m === 4) {
          Z.push(new Float32Array([NaN, NaN, NaN, NaN, n[0], n[1], NaN, NaN, NaN, NaN, n[2], n[3]]));
          continue;
        }
        const e = new Float32Array(3 * (m - 2));
        Z.push(e);
        let [N, w, S, Y] = n.subarray(0, 4);
        e.set([NaN, NaN, NaN, NaN, N, w], 0);
        for (let M = 4; M < m; M += 2) {
          const y = n[M], r = n[M + 1];
          e.set(CI.createBezierPoints(N, w, S, Y, y, r), (M - 2) * 3), [N, w, S, Y] = [S, Y, y, r];
        }
      }
    }
    for (let n = 0, m = Z.length; n < m; n++)
      s.push({
        line: R(Z[n].map((e) => e ?? NaN), c, G, V, W),
        points: R(i[n].map((e) => e ?? NaN), c, G, V, W)
      });
    const U = new Td();
    return U.build(s, C, A, 1, B, F, d), U;
  }
  #F(I = this.#s) {
    const g = this.#C + I / 2 * this.#B;
    return this.#i % 180 === 0 ? [g / this.#d, g / this.#l] : [g / this.#l, g / this.#d];
  }
  #G() {
    const [I, g, C, A] = this.#I, [d, Z] = this.#F(0);
    return [I + d, g + Z, C - 2 * d, A - 2 * Z];
  }
  #c() {
    const I = this.#I = new Float32Array([1 / 0, 1 / 0, -1 / 0, -1 / 0]);
    for (const {
      line: A
    } of this.#A) {
      if (A.length <= 12) {
        for (let i = 4, B = A.length; i < B; i += 6) {
          const [F, s] = A.subarray(i, i + 2);
          I[0] = Math.min(I[0], F), I[1] = Math.min(I[1], s), I[2] = Math.max(I[2], F), I[3] = Math.max(I[3], s);
        }
        continue;
      }
      let d = A[4], Z = A[5];
      for (let i = 6, B = A.length; i < B; i += 6) {
        const [F, s, c, G, V, W] = A.subarray(i, i + 6);
        iI.bezierBoundingBox(d, Z, F, s, c, G, V, W, I), d = V, Z = W;
      }
    }
    const [g, C] = this.#F();
    I[0] = Math.min(1, Math.max(0, I[0] - g)), I[1] = Math.min(1, Math.max(0, I[1] - C)), I[2] = Math.min(1, Math.max(0, I[2] + g)), I[3] = Math.min(1, Math.max(0, I[3] + C)), I[2] -= I[0], I[3] -= I[1];
  }
  get box() {
    return this.#I;
  }
  updateProperty(I, g) {
    return I === "stroke-width" ? this.#V(g) : null;
  }
  #V(I) {
    const [g, C] = this.#F();
    this.#s = I;
    const [A, d] = this.#F(), [Z, i] = [A - g, d - C], B = this.#I;
    return B[0] -= Z, B[1] -= i, B[2] += 2 * Z, B[3] += 2 * i, B;
  }
  updateParentDimensions([I, g], C) {
    const [A, d] = this.#F();
    this.#d = I, this.#l = g, this.#B = C;
    const [Z, i] = this.#F(), B = Z - A, F = i - d, s = this.#I;
    return s[0] -= B, s[1] -= F, s[2] += 2 * B, s[3] += 2 * F, s;
  }
  updateRotation(I) {
    return this.#g = I, {
      path: {
        transform: this.rotationTransform
      }
    };
  }
  get viewBox() {
    return this.#I.map(CI.svgRound).join(" ");
  }
  get defaultProperties() {
    const [I, g] = this.#I;
    return {
      root: {
        viewBox: this.viewBox
      },
      path: {
        "transform-origin": `${CI.svgRound(I)} ${CI.svgRound(g)}`
      }
    };
  }
  get rotationTransform() {
    const [, , I, g] = this.#I;
    let C = 0, A = 0, d = 0, Z = 0, i = 0, B = 0;
    switch (this.#g) {
      case 90:
        A = g / I, d = -I / g, i = I;
        break;
      case 180:
        C = -1, Z = -1, i = I, B = g;
        break;
      case 270:
        A = -g / I, d = I / g, B = g;
        break;
      default:
        return "";
    }
    return `matrix(${C} ${A} ${d} ${Z} ${CI.svgRound(i)} ${CI.svgRound(B)})`;
  }
  getPathResizingSVGProperties([I, g, C, A]) {
    const [d, Z] = this.#F(), [i, B, F, s] = this.#I;
    if (Math.abs(F - d) <= CI.PRECISION || Math.abs(s - Z) <= CI.PRECISION) {
      const R = I + C / 2 - (i + F / 2), U = g + A / 2 - (B + s / 2);
      return {
        path: {
          "transform-origin": `${CI.svgRound(I)} ${CI.svgRound(g)}`,
          transform: `${this.rotationTransform} translate(${R} ${U})`
        }
      };
    }
    const c = (C - 2 * d) / (F - 2 * d), G = (A - 2 * Z) / (s - 2 * Z), V = F / C, W = s / A;
    return {
      path: {
        "transform-origin": `${CI.svgRound(i)} ${CI.svgRound(B)}`,
        transform: `${this.rotationTransform} scale(${V} ${W}) translate(${CI.svgRound(d)} ${CI.svgRound(Z)}) scale(${c} ${G}) translate(${CI.svgRound(-d)} ${CI.svgRound(-Z)})`
      }
    };
  }
  getPathResizedSVGProperties([I, g, C, A]) {
    const [d, Z] = this.#F(), i = this.#I, [B, F, s, c] = i;
    if (i[0] = I, i[1] = g, i[2] = C, i[3] = A, Math.abs(s - d) <= CI.PRECISION || Math.abs(c - Z) <= CI.PRECISION) {
      const U = I + C / 2 - (B + s / 2), n = g + A / 2 - (F + c / 2);
      for (const {
        line: m,
        points: e
      } of this.#A)
        CI._translate(m, U, n, m), CI._translate(e, U, n, e);
      return {
        root: {
          viewBox: this.viewBox
        },
        path: {
          "transform-origin": `${CI.svgRound(I)} ${CI.svgRound(g)}`,
          transform: this.rotationTransform || null,
          d: this.toSVGPath()
        }
      };
    }
    const G = (C - 2 * d) / (s - 2 * d), V = (A - 2 * Z) / (c - 2 * Z), W = -G * (B + d) + I + d, R = -V * (F + Z) + g + Z;
    if (G !== 1 || V !== 1 || W !== 0 || R !== 0)
      for (const {
        line: U,
        points: n
      } of this.#A)
        CI._rescale(U, W, R, G, V, U), CI._rescale(n, W, R, G, V, n);
    return {
      root: {
        viewBox: this.viewBox
      },
      path: {
        "transform-origin": `${CI.svgRound(I)} ${CI.svgRound(g)}`,
        transform: this.rotationTransform || null,
        d: this.toSVGPath()
      }
    };
  }
  getPathTranslatedSVGProperties([I, g], C) {
    const [A, d] = C, Z = this.#I, i = I - Z[0], B = g - Z[1];
    if (this.#d === A && this.#l === d)
      for (const {
        line: F,
        points: s
      } of this.#A)
        CI._translate(F, i, B, F), CI._translate(s, i, B, s);
    else {
      const F = this.#d / A, s = this.#l / d;
      this.#d = A, this.#l = d;
      for (const {
        line: c,
        points: G
      } of this.#A)
        CI._rescale(c, i, B, F, s, c), CI._rescale(G, i, B, F, s, G);
      Z[2] *= F, Z[3] *= s;
    }
    return Z[0] = I, Z[1] = g, {
      root: {
        viewBox: this.viewBox
      },
      path: {
        d: this.toSVGPath(),
        "transform-origin": `${CI.svgRound(I)} ${CI.svgRound(g)}`
      }
    };
  }
  get defaultSVGProperties() {
    const I = this.#I;
    return {
      root: {
        viewBox: this.viewBox
      },
      rootClass: {
        draw: !0
      },
      path: {
        d: this.toSVGPath(),
        "transform-origin": `${CI.svgRound(I[0])} ${CI.svgRound(I[1])}`,
        transform: this.rotationTransform || null
      },
      bbox: I
    };
  }
}
class VZ extends UG {
  #I;
  constructor(I) {
    super(), this.#I = I, super.updateProperties({
      fill: "none",
      stroke: WI._defaultLineColor,
      "stroke-opacity": 1,
      "stroke-width": 1,
      "stroke-linecap": "round",
      "stroke-linejoin": "round",
      "stroke-miterlimit": 10
    });
  }
  updateSVGProperty(I, g) {
    I === "stroke-width" && (g ??= this["stroke-width"], g *= this.#I.realScale), super.updateSVGProperty(I, g);
  }
  clone() {
    const I = new VZ(this.#I);
    return I.updateAll(this), I;
  }
}
class WZ extends VI {
  static _type = "ink";
  static _editorType = JI.INK;
  static _defaultDrawingOptions = null;
  constructor(I) {
    super({
      ...I,
      name: "inkEditor"
    }), this._willKeepAspectRatio = !0;
  }
  static initialize(I, g) {
    WI.initialize(I, g), this._defaultDrawingOptions = new VZ(g.viewParameters);
  }
  static getDefaultDrawingOptions(I) {
    const g = this._defaultDrawingOptions.clone();
    return g.updateProperties(I), g;
  }
  static get supportMultipleDrawings() {
    return !0;
  }
  static get typesMap() {
    return uI(this, "typesMap", /* @__PURE__ */ new Map([[pI.INK_THICKNESS, "stroke-width"], [pI.INK_COLOR, "stroke"], [pI.INK_OPACITY, "stroke-opacity"]]));
  }
  static createDrawerInstance(I, g, C, A, d) {
    return new aG(I, g, C, A, d, this._defaultDrawingOptions["stroke-width"]);
  }
  static deserializeDraw(I, g, C, A, d, Z) {
    return Td.deserialize(I, g, C, A, d, Z);
  }
  static async deserialize(I, g, C) {
    let A = null;
    if (I instanceof GZ) {
      const {
        data: {
          inkLists: Z,
          rect: i,
          rotation: B,
          id: F,
          color: s,
          opacity: c,
          borderStyle: {
            rawWidth: G
          },
          popupRef: V
        },
        parent: {
          page: {
            pageNumber: W
          }
        }
      } = I;
      A = I = {
        annotationType: JI.INK,
        color: Array.from(s),
        thickness: G,
        opacity: c,
        paths: {
          points: Z
        },
        boxes: null,
        pageIndex: W - 1,
        rect: i.slice(0),
        rotation: B,
        id: F,
        deleted: !1,
        popupRef: V
      };
    }
    const d = await super.deserialize(I, g, C);
    return d.annotationElementId = I.id || null, d._initialData = A, d;
  }
  onScaleChanging() {
    if (!this.parent)
      return;
    super.onScaleChanging();
    const {
      _drawId: I,
      _drawingOptions: g,
      parent: C
    } = this;
    g.updateSVGProperty("stroke-width"), C.drawLayer.updateProperties(I, g.toSVGProperties());
  }
  static onScaleChangingWhenDrawing() {
    const I = this._currentParent;
    I && (super.onScaleChangingWhenDrawing(), this._defaultDrawingOptions.updateSVGProperty("stroke-width"), I.drawLayer.updateProperties(this._currentDrawId, this._defaultDrawingOptions.toSVGProperties()));
  }
  createDrawingOptions({
    color: I,
    thickness: g,
    opacity: C
  }) {
    this._drawingOptions = WZ.getDefaultDrawingOptions({
      stroke: iI.makeHexColor(...I),
      "stroke-width": g,
      "stroke-opacity": C
    });
  }
  serialize(I = !1) {
    if (this.isEmpty())
      return null;
    if (this.deleted)
      return this.serializeDeleted();
    const {
      lines: g,
      points: C,
      rect: A
    } = this.serializeDraw(I), {
      _drawingOptions: {
        stroke: d,
        "stroke-opacity": Z,
        "stroke-width": i
      }
    } = this, B = {
      annotationType: JI.INK,
      color: WI._colorManager.convert(d),
      opacity: Z,
      thickness: i,
      paths: {
        lines: g,
        points: C
      },
      pageIndex: this.pageIndex,
      rect: A,
      rotation: this.rotation,
      structTreeParentId: this._structTreeParentId
    };
    return I ? B : this.annotationElementId && !this.#I(B) ? null : (B.id = this.annotationElementId, B);
  }
  #I(I) {
    const {
      color: g,
      thickness: C,
      opacity: A,
      pageIndex: d
    } = this._initialData;
    return this._hasBeenMoved || this._hasBeenResized || I.color.some((Z, i) => Z !== g[i]) || I.thickness !== C || I.opacity !== A || I.pageIndex !== d;
  }
  renderAnnotationElement(I) {
    const {
      points: g,
      rect: C
    } = this.serializeDraw(!1);
    return I.updateEdited({
      rect: C,
      thickness: this._drawingOptions["stroke-width"],
      points: g
    }), null;
  }
}
class bZ extends WI {
  #I = null;
  #g = null;
  #C = null;
  #A = null;
  #d = null;
  #l = "";
  #B = null;
  #i = null;
  #s = !1;
  #F = !1;
  static _type = "stamp";
  static _editorType = JI.STAMP;
  constructor(I) {
    super({
      ...I,
      name: "stampEditor"
    }), this.#A = I.bitmapUrl, this.#d = I.bitmapFile;
  }
  static initialize(I, g) {
    WI.initialize(I, g);
  }
  static get supportedTypes() {
    return uI(this, "supportedTypes", ["apng", "avif", "bmp", "gif", "jpeg", "png", "svg+xml", "webp", "x-icon"].map((g) => `image/${g}`));
  }
  static get supportedTypesStr() {
    return uI(this, "supportedTypesStr", this.supportedTypes.join(","));
  }
  static isHandlingMimeForPasting(I) {
    return this.supportedTypes.includes(I);
  }
  static paste(I, g) {
    g.pasteEditor(JI.STAMP, {
      bitmapFile: I.getAsFile()
    });
  }
  altTextFinish() {
    this._uiManager.useNewAltTextFlow && (this.div.hidden = !1), super.altTextFinish();
  }
  get telemetryFinalData() {
    return {
      type: "stamp",
      hasAltText: !!this.altTextData?.altText
    };
  }
  static computeTelemetryFinalData(I) {
    const g = I.get("hasAltText");
    return {
      hasAltText: g.get(!0) ?? 0,
      hasNoAltText: g.get(!1) ?? 0
    };
  }
  #G(I, g = !1) {
    if (!I) {
      this.remove();
      return;
    }
    this.#I = I.bitmap, g || (this.#g = I.id, this.#s = I.isSvg), I.file && (this.#l = I.file.name), this.#Z();
  }
  #c() {
    if (this.#C = null, this._uiManager.enableWaiting(!1), !!this.#B) {
      if (this._uiManager.useNewAltTextWhenAddingImage && this._uiManager.useNewAltTextFlow && this.#I) {
        this._editToolbar.hide(), this._uiManager.editAltText(this, !0);
        return;
      }
      if (!this._uiManager.useNewAltTextWhenAddingImage && this._uiManager.useNewAltTextFlow && this.#I) {
        this._reportTelemetry({
          action: "pdfjs.image.image_added",
          data: {
            alt_text_modal: !1,
            alt_text_type: "empty"
          }
        });
        try {
          this.mlGuessAltText();
        } catch {
        }
      }
      this.div.focus();
    }
  }
  async mlGuessAltText(I = null, g = !0) {
    if (this.hasAltTextData())
      return null;
    const {
      mlManager: C
    } = this._uiManager;
    if (!C)
      throw new Error("No ML.");
    if (!await C.isEnabledFor("altText"))
      throw new Error("ML isn't enabled for alt text.");
    const {
      data: A,
      width: d,
      height: Z
    } = I || this.copyCanvas(null, null, !0).imageData, i = await C.guess({
      name: "altText",
      request: {
        data: A,
        width: d,
        height: Z,
        channels: A.length / (d * Z)
      }
    });
    if (!i)
      throw new Error("No response from the AI service.");
    if (i.error)
      throw new Error("Error from the AI service.");
    if (i.cancel)
      return null;
    if (!i.output)
      throw new Error("No valid response from the AI service.");
    const B = i.output;
    return await this.setGuessedAltText(B), g && !this.hasAltTextData() && (this.altTextData = {
      alt: B,
      decorative: !1
    }), B;
  }
  #V() {
    if (this.#g) {
      this._uiManager.enableWaiting(!0), this._uiManager.imageManager.getFromId(this.#g).then((C) => this.#G(C, !0)).finally(() => this.#c());
      return;
    }
    if (this.#A) {
      const C = this.#A;
      this.#A = null, this._uiManager.enableWaiting(!0), this.#C = this._uiManager.imageManager.getFromUrl(C).then((A) => this.#G(A)).finally(() => this.#c());
      return;
    }
    if (this.#d) {
      const C = this.#d;
      this.#d = null, this._uiManager.enableWaiting(!0), this.#C = this._uiManager.imageManager.getFromFile(C).then((A) => this.#G(A)).finally(() => this.#c());
      return;
    }
    const I = document.createElement("input");
    I.type = "file", I.accept = bZ.supportedTypesStr;
    const g = this._uiManager._signal;
    this.#C = new Promise((C) => {
      I.addEventListener("change", async () => {
        if (!I.files || I.files.length === 0)
          this.remove();
        else {
          this._uiManager.enableWaiting(!0);
          const A = await this._uiManager.imageManager.getFromFile(I.files[0]);
          this._reportTelemetry({
            action: "pdfjs.image.image_selected",
            data: {
              alt_text_modal: this._uiManager.useNewAltTextFlow
            }
          }), this.#G(A);
        }
        C();
      }, {
        signal: g
      }), I.addEventListener("cancel", () => {
        this.remove(), C();
      }, {
        signal: g
      });
    }).finally(() => this.#c()), I.click();
  }
  remove() {
    this.#g && (this.#I = null, this._uiManager.imageManager.deleteId(this.#g), this.#B?.remove(), this.#B = null, this.#i && (clearTimeout(this.#i), this.#i = null)), super.remove();
  }
  rebuild() {
    if (!this.parent) {
      this.#g && this.#V();
      return;
    }
    super.rebuild(), this.div !== null && (this.#g && this.#B === null && this.#V(), this.isAttachedToDOM || this.parent.add(this));
  }
  onceAdded(I) {
    this._isDraggable = !0, I && this.div.focus();
  }
  isEmpty() {
    return !(this.#C || this.#I || this.#A || this.#d || this.#g);
  }
  get isResizable() {
    return !0;
  }
  render() {
    if (this.div)
      return this.div;
    let I, g;
    if (this.width && (I = this.x, g = this.y), super.render(), this.div.hidden = !0, this.div.setAttribute("role", "figure"), this.addAltTextButton(), this.#I ? this.#Z() : this.#V(), this.width && !this.annotationElementId) {
      const [C, A] = this.parentDimensions;
      this.setAt(I * C, g * A, this.width * C, this.height * A);
    }
    return this._uiManager.addShouldRescale(this), this.div;
  }
  _onResized() {
    this.onScaleChanging();
  }
  onScaleChanging() {
    if (!this.parent)
      return;
    this.#i !== null && clearTimeout(this.#i);
    const I = 200;
    this.#i = setTimeout(() => {
      this.#i = null, this.#R();
    }, I);
  }
  #Z() {
    const {
      div: I
    } = this;
    let {
      width: g,
      height: C
    } = this.#I;
    const [A, d] = this.pageDimensions, Z = 0.75;
    if (this.width)
      g = this.width * A, C = this.height * d;
    else if (g > Z * A || C > Z * d) {
      const s = Math.min(Z * A / g, Z * d / C);
      g *= s, C *= s;
    }
    const [i, B] = this.parentDimensions;
    this.setDims(g * i / A, C * B / d), this._uiManager.enableWaiting(!1);
    const F = this.#B = document.createElement("canvas");
    F.setAttribute("role", "img"), this.addContainer(F), this.width = g / A, this.height = C / d, this._initialOptions?.isCentered ? this.center() : this.fixAndSetPosition(), this._initialOptions = null, (!this._uiManager.useNewAltTextWhenAddingImage || !this._uiManager.useNewAltTextFlow || this.annotationElementId) && (I.hidden = !1), this.#R(), this.#F || (this.parent.addUndoableEditor(this), this.#F = !0), this._reportTelemetry({
      action: "inserted_image"
    }), this.#l && F.setAttribute("aria-label", this.#l);
  }
  copyCanvas(I, g, C = !1) {
    I || (I = 224);
    const {
      width: A,
      height: d
    } = this.#I, Z = new D0();
    let i = this.#I, B = A, F = d, s = null;
    if (g) {
      if (A > g || d > g) {
        const S = Math.min(g / A, g / d);
        B = Math.floor(A * S), F = Math.floor(d * S);
      }
      s = document.createElement("canvas");
      const G = s.width = Math.ceil(B * Z.sx), V = s.height = Math.ceil(F * Z.sy);
      this.#s || (i = this.#W(G, V));
      const W = s.getContext("2d");
      W.filter = this._uiManager.hcmFilter;
      let R = "white", U = "#cfcfd8";
      this._uiManager.hcmFilter !== "none" ? U = "black" : window.matchMedia?.("(prefers-color-scheme: dark)").matches && (R = "#8f8f9d", U = "#42414d");
      const n = 15, m = n * Z.sx, e = n * Z.sy, N = new OffscreenCanvas(m * 2, e * 2), w = N.getContext("2d");
      w.fillStyle = R, w.fillRect(0, 0, m * 2, e * 2), w.fillStyle = U, w.fillRect(0, 0, m, e), w.fillRect(m, e, m, e), W.fillStyle = W.createPattern(N, "repeat"), W.fillRect(0, 0, G, V), W.drawImage(i, 0, 0, i.width, i.height, 0, 0, G, V);
    }
    let c = null;
    if (C) {
      let G, V;
      if (Z.symmetric && i.width < I && i.height < I)
        G = i.width, V = i.height;
      else if (i = this.#I, A > I || d > I) {
        const U = Math.min(I / A, I / d);
        G = Math.floor(A * U), V = Math.floor(d * U), this.#s || (i = this.#W(G, V));
      }
      const R = new OffscreenCanvas(G, V).getContext("2d", {
        willReadFrequently: !0
      });
      R.drawImage(i, 0, 0, i.width, i.height, 0, 0, G, V), c = {
        width: G,
        height: V,
        data: R.getImageData(0, 0, G, V).data
      };
    }
    return {
      canvas: s,
      width: B,
      height: F,
      imageData: c
    };
  }
  #W(I, g) {
    const {
      width: C,
      height: A
    } = this.#I;
    let d = C, Z = A, i = this.#I;
    for (; d > 2 * I || Z > 2 * g; ) {
      const B = d, F = Z;
      d > 2 * I && (d = d >= 16384 ? Math.floor(d / 2) - 1 : Math.ceil(d / 2)), Z > 2 * g && (Z = Z >= 16384 ? Math.floor(Z / 2) - 1 : Math.ceil(Z / 2));
      const s = new OffscreenCanvas(d, Z);
      s.getContext("2d").drawImage(i, 0, 0, B, F, 0, 0, d, Z), i = s.transferToImageBitmap();
    }
    return i;
  }
  #R() {
    const [I, g] = this.parentDimensions, {
      width: C,
      height: A
    } = this, d = new D0(), Z = Math.ceil(C * I * d.sx), i = Math.ceil(A * g * d.sy), B = this.#B;
    if (!B || B.width === Z && B.height === i)
      return;
    B.width = Z, B.height = i;
    const F = this.#s ? this.#I : this.#W(Z, i), s = B.getContext("2d");
    s.filter = this._uiManager.hcmFilter, s.drawImage(F, 0, 0, F.width, F.height, 0, 0, Z, i);
  }
  getImageForAltText() {
    return this.#B;
  }
  #b(I) {
    if (I) {
      if (this.#s) {
        const A = this._uiManager.imageManager.getSvgUrl(this.#g);
        if (A)
          return A;
      }
      const g = document.createElement("canvas");
      return {
        width: g.width,
        height: g.height
      } = this.#I, g.getContext("2d").drawImage(this.#I, 0, 0), g.toDataURL();
    }
    if (this.#s) {
      const [g, C] = this.pageDimensions, A = Math.round(this.width * g * kA.PDF_TO_CSS_UNITS), d = Math.round(this.height * C * kA.PDF_TO_CSS_UNITS), Z = new OffscreenCanvas(A, d);
      return Z.getContext("2d").drawImage(this.#I, 0, 0, this.#I.width, this.#I.height, 0, 0, A, d), Z.transferToImageBitmap();
    }
    return structuredClone(this.#I);
  }
  static async deserialize(I, g, C) {
    let A = null;
    if (I instanceof KB) {
      const {
        data: {
          rect: W,
          rotation: R,
          id: U,
          structParent: n,
          popupRef: m
        },
        container: e,
        parent: {
          page: {
            pageNumber: N
          }
        }
      } = I, w = e.querySelector("canvas"), S = C.imageManager.getFromCanvas(e.id, w);
      w.remove();
      const Y = (await g._structTree.getAriaAttributes(`${gZ}${U}`))?.get("aria-label") || "";
      A = I = {
        annotationType: JI.STAMP,
        bitmapId: S.id,
        bitmap: S.bitmap,
        pageIndex: N - 1,
        rect: W.slice(0),
        rotation: R,
        id: U,
        deleted: !1,
        accessibilityData: {
          decorative: !1,
          altText: Y
        },
        isSvg: !1,
        structParent: n,
        popupRef: m
      };
    }
    const d = await super.deserialize(I, g, C), {
      rect: Z,
      bitmap: i,
      bitmapUrl: B,
      bitmapId: F,
      isSvg: s,
      accessibilityData: c
    } = I;
    F && C.imageManager.isValidId(F) ? (d.#g = F, i && (d.#I = i)) : d.#A = B, d.#s = s;
    const [G, V] = d.pageDimensions;
    return d.width = (Z[2] - Z[0]) / G, d.height = (Z[3] - Z[1]) / V, d.annotationElementId = I.id || null, c && (d.altTextData = c), d._initialData = A, d.#F = !!A, d;
  }
  serialize(I = !1, g = null) {
    if (this.isEmpty())
      return null;
    if (this.deleted)
      return this.serializeDeleted();
    const C = {
      annotationType: JI.STAMP,
      bitmapId: this.#g,
      pageIndex: this.pageIndex,
      rect: this.getRect(0, 0),
      rotation: this.rotation,
      isSvg: this.#s,
      structTreeParentId: this._structTreeParentId
    };
    if (I)
      return C.bitmapUrl = this.#b(!0), C.accessibilityData = this.serializeAltText(!0), C;
    const {
      decorative: A,
      altText: d
    } = this.serializeAltText(!1);
    if (!A && d && (C.accessibilityData = {
      type: "Figure",
      alt: d
    }), this.annotationElementId) {
      const i = this.#n(C);
      if (i.isSame)
        return null;
      i.isSameAltText ? delete C.accessibilityData : C.accessibilityData.structParent = this._initialData.structParent ?? -1;
    }
    if (C.id = this.annotationElementId, g === null)
      return C;
    g.stamps ||= /* @__PURE__ */ new Map();
    const Z = this.#s ? (C.rect[2] - C.rect[0]) * (C.rect[3] - C.rect[1]) : null;
    if (!g.stamps.has(this.#g))
      g.stamps.set(this.#g, {
        area: Z,
        serialized: C
      }), C.bitmap = this.#b(!1);
    else if (this.#s) {
      const i = g.stamps.get(this.#g);
      Z > i.area && (i.area = Z, i.serialized.bitmap.close(), i.serialized.bitmap = this.#b(!1));
    }
    return C;
  }
  #n(I) {
    const {
      pageIndex: g,
      accessibilityData: {
        altText: C
      }
    } = this._initialData, A = I.pageIndex === g, d = (I.accessibilityData?.alt || "") === C;
    return {
      isSame: !this._hasBeenMoved && !this._hasBeenResized && A && d,
      isSameAltText: d
    };
  }
  renderAnnotationElement(I) {
    return I.updateEdited({
      rect: this.getRect(0, 0)
    }), null;
  }
}
class YC {
  #I;
  #g = !1;
  #C = null;
  #A = null;
  #d = null;
  #l = /* @__PURE__ */ new Map();
  #B = !1;
  #i = !1;
  #s = !1;
  #F = null;
  #G = null;
  #c = null;
  #V = null;
  #Z;
  static _initialized = !1;
  static #W = new Map([Gg, WZ, bZ, lg].map((I) => [I._editorType, I]));
  constructor({
    uiManager: I,
    pageIndex: g,
    div: C,
    structTreeLayer: A,
    accessibilityManager: d,
    annotationLayer: Z,
    drawLayer: i,
    textLayer: B,
    viewport: F,
    l10n: s
  }) {
    const c = [...YC.#W.values()];
    if (!YC._initialized) {
      YC._initialized = !0;
      for (const G of c)
        G.initialize(s, I);
    }
    I.registerEditorTypes(c), this.#Z = I, this.pageIndex = g, this.div = C, this.#I = d, this.#C = Z, this.viewport = F, this.#c = B, this.drawLayer = i, this._structTree = A, this.#Z.addLayer(this);
  }
  get isEmpty() {
    return this.#l.size === 0;
  }
  get isInvisible() {
    return this.isEmpty && this.#Z.getMode() === JI.NONE;
  }
  updateToolbar(I) {
    this.#Z.updateToolbar(I);
  }
  updateMode(I = this.#Z.getMode()) {
    switch (this.#U(), I) {
      case JI.NONE:
        this.disableTextSelection(), this.togglePointerEvents(!1), this.toggleAnnotationLayerPointerEvents(!0), this.disableClick();
        return;
      case JI.INK:
        this.disableTextSelection(), this.togglePointerEvents(!0), this.enableClick();
        break;
      case JI.HIGHLIGHT:
        this.enableTextSelection(), this.togglePointerEvents(!1), this.disableClick();
        break;
      default:
        this.disableTextSelection(), this.togglePointerEvents(!0), this.enableClick();
    }
    this.toggleAnnotationLayerPointerEvents(!1);
    const {
      classList: g
    } = this.div;
    for (const C of YC.#W.values())
      g.toggle(`${C._type}Editing`, I === C._editorType);
    this.div.hidden = !1;
  }
  hasTextLayer(I) {
    return I === this.#c?.div;
  }
  setEditingState(I) {
    this.#Z.setEditingState(I);
  }
  addCommands(I) {
    this.#Z.addCommands(I);
  }
  cleanUndoStack(I) {
    this.#Z.cleanUndoStack(I);
  }
  toggleDrawing(I = !1) {
    this.div.classList.toggle("drawing", !I);
  }
  togglePointerEvents(I = !1) {
    this.div.classList.toggle("disabled", !I);
  }
  toggleAnnotationLayerPointerEvents(I = !1) {
    this.#C?.div.classList.toggle("disabled", !I);
  }
  async enable() {
    this.#s = !0, this.div.tabIndex = 0, this.togglePointerEvents(!0);
    const I = /* @__PURE__ */ new Set();
    for (const C of this.#l.values())
      C.enableEditing(), C.show(!0), C.annotationElementId && (this.#Z.removeChangedExistingAnnotation(C), I.add(C.annotationElementId));
    if (!this.#C) {
      this.#s = !1;
      return;
    }
    const g = this.#C.getEditableAnnotations();
    for (const C of g) {
      if (C.hide(), this.#Z.isDeletedAnnotationElement(C.data.id) || I.has(C.data.id))
        continue;
      const A = await this.deserialize(C);
      A && (this.addOrRebuild(A), A.enableEditing());
    }
    this.#s = !1;
  }
  disable() {
    this.#i = !0, this.div.tabIndex = -1, this.togglePointerEvents(!1);
    const I = /* @__PURE__ */ new Map(), g = /* @__PURE__ */ new Map();
    for (const A of this.#l.values())
      if (A.disableEditing(), !!A.annotationElementId) {
        if (A.serialize() !== null) {
          I.set(A.annotationElementId, A);
          continue;
        } else
          g.set(A.annotationElementId, A);
        this.getEditableAnnotation(A.annotationElementId)?.show(), A.remove();
      }
    if (this.#C) {
      const A = this.#C.getEditableAnnotations();
      for (const d of A) {
        const {
          id: Z
        } = d.data;
        if (this.#Z.isDeletedAnnotationElement(Z))
          continue;
        let i = g.get(Z);
        if (i) {
          i.resetAnnotationElement(d), i.show(!1), d.show();
          continue;
        }
        i = I.get(Z), i && (this.#Z.addChangedExistingAnnotation(i), i.renderAnnotationElement(d) && i.show(!1)), d.show();
      }
    }
    this.#U(), this.isEmpty && (this.div.hidden = !0);
    const {
      classList: C
    } = this.div;
    for (const A of YC.#W.values())
      C.remove(`${A._type}Editing`);
    this.disableTextSelection(), this.toggleAnnotationLayerPointerEvents(!0), this.#i = !1;
  }
  getEditableAnnotation(I) {
    return this.#C?.getEditableAnnotation(I) || null;
  }
  setActiveEditor(I) {
    this.#Z.getActive() !== I && this.#Z.setActiveEditor(I);
  }
  enableTextSelection() {
    if (this.div.tabIndex = -1, this.#c?.div && !this.#V) {
      this.#V = new AbortController();
      const I = this.#Z.combinedSignal(this.#V);
      this.#c.div.addEventListener("pointerdown", this.#R.bind(this), {
        signal: I
      }), this.#c.div.classList.add("highlighting");
    }
  }
  disableTextSelection() {
    this.div.tabIndex = 0, this.#c?.div && this.#V && (this.#V.abort(), this.#V = null, this.#c.div.classList.remove("highlighting"));
  }
  #R(I) {
    this.#Z.unselectAll();
    const {
      target: g
    } = I;
    if (g === this.#c.div || (g.getAttribute("role") === "img" || g.classList.contains("endOfContent")) && this.#c.div.contains(g)) {
      const {
        isMac: C
      } = ug.platform;
      if (I.button !== 0 || I.ctrlKey && C)
        return;
      this.#Z.showAllEditors("highlight", !0, !0), this.#c.div.classList.add("free"), this.toggleDrawing(), lg.startHighlighting(this, this.#Z.direction === "ltr", {
        target: this.#c.div,
        x: I.x,
        y: I.y
      }), this.#c.div.addEventListener("pointerup", () => {
        this.#c.div.classList.remove("free"), this.toggleDrawing(!0);
      }, {
        once: !0,
        signal: this.#Z._signal
      }), I.preventDefault();
    }
  }
  enableClick() {
    if (this.#A)
      return;
    this.#A = new AbortController();
    const I = this.#Z.combinedSignal(this.#A);
    this.div.addEventListener("pointerdown", this.pointerdown.bind(this), {
      signal: I
    });
    const g = this.pointerup.bind(this);
    this.div.addEventListener("pointerup", g, {
      signal: I
    }), this.div.addEventListener("pointercancel", g, {
      signal: I
    });
  }
  disableClick() {
    this.#A?.abort(), this.#A = null;
  }
  attach(I) {
    this.#l.set(I.id, I);
    const {
      annotationElementId: g
    } = I;
    g && this.#Z.isDeletedAnnotationElement(g) && this.#Z.removeDeletedAnnotationElement(I);
  }
  detach(I) {
    this.#l.delete(I.id), this.#I?.removePointerInTextLayer(I.contentDiv), !this.#i && I.annotationElementId && this.#Z.addDeletedAnnotationElement(I);
  }
  remove(I) {
    this.detach(I), this.#Z.removeEditor(I), I.div.remove(), I.isAttachedToDOM = !1;
  }
  changeParent(I) {
    I.parent !== this && (I.parent && I.annotationElementId && (this.#Z.addDeletedAnnotationElement(I.annotationElementId), WI.deleteAnnotationElement(I), I.annotationElementId = null), this.attach(I), I.parent?.detach(I), I.setParent(this), I.div && I.isAttachedToDOM && (I.div.remove(), this.div.append(I.div)));
  }
  add(I) {
    if (!(I.parent === this && I.isAttachedToDOM)) {
      if (this.changeParent(I), this.#Z.addEditor(I), this.attach(I), !I.isAttachedToDOM) {
        const g = I.render();
        this.div.append(g), I.isAttachedToDOM = !0;
      }
      I.fixAndSetPosition(), I.onceAdded(!this.#s), this.#Z.addToAnnotationStorage(I), I._reportTelemetry(I.telemetryInitialData);
    }
  }
  moveEditorInDOM(I) {
    if (!I.isAttachedToDOM)
      return;
    const {
      activeElement: g
    } = document;
    I.div.contains(g) && !this.#d && (I._focusEventsAllowed = !1, this.#d = setTimeout(() => {
      this.#d = null, I.div.contains(document.activeElement) ? I._focusEventsAllowed = !0 : (I.div.addEventListener("focusin", () => {
        I._focusEventsAllowed = !0;
      }, {
        once: !0,
        signal: this.#Z._signal
      }), g.focus());
    }, 0)), I._structTreeParentId = this.#I?.moveElementInDOM(this.div, I.div, I.contentDiv, !0);
  }
  addOrRebuild(I) {
    I.needsToBeRebuilt() ? (I.parent ||= this, I.rebuild(), I.show()) : this.add(I);
  }
  addUndoableEditor(I) {
    const g = () => I._uiManager.rebuild(I), C = () => {
      I.remove();
    };
    this.addCommands({
      cmd: g,
      undo: C,
      mustExec: !1
    });
  }
  getNextId() {
    return this.#Z.getId();
  }
  get #b() {
    return YC.#W.get(this.#Z.getMode());
  }
  combinedSignal(I) {
    return this.#Z.combinedSignal(I);
  }
  #n(I) {
    const g = this.#b;
    return g ? new g.prototype.constructor(I) : null;
  }
  canCreateNewEmptyEditor() {
    return this.#b?.canCreateNewEmptyEditor();
  }
  pasteEditor(I, g) {
    this.#Z.updateToolbar(I), this.#Z.updateMode(I);
    const {
      offsetX: C,
      offsetY: A
    } = this.#o(), d = this.getNextId(), Z = this.#n({
      parent: this,
      id: d,
      x: C,
      y: A,
      uiManager: this.#Z,
      isCentered: !0,
      ...g
    });
    Z && this.add(Z);
  }
  async deserialize(I) {
    return await YC.#W.get(I.annotationType ?? I.annotationEditorType)?.deserialize(I, this, this.#Z) || null;
  }
  createAndAddNewEditor(I, g, C = {}) {
    const A = this.getNextId(), d = this.#n({
      parent: this,
      id: A,
      x: I.offsetX,
      y: I.offsetY,
      uiManager: this.#Z,
      isCentered: g,
      ...C
    });
    return d && this.add(d), d;
  }
  #o() {
    const {
      x: I,
      y: g,
      width: C,
      height: A
    } = this.div.getBoundingClientRect(), d = Math.max(0, I), Z = Math.max(0, g), i = Math.min(window.innerWidth, I + C), B = Math.min(window.innerHeight, g + A), F = (d + i) / 2 - I, s = (Z + B) / 2 - g, [c, G] = this.viewport.rotation % 180 === 0 ? [F, s] : [s, F];
    return {
      offsetX: c,
      offsetY: G
    };
  }
  addNewEditor() {
    this.createAndAddNewEditor(this.#o(), !0);
  }
  setSelected(I) {
    this.#Z.setSelected(I);
  }
  toggleSelected(I) {
    this.#Z.toggleSelected(I);
  }
  unselect(I) {
    this.#Z.unselect(I);
  }
  pointerup(I) {
    const {
      isMac: g
    } = ug.platform;
    if (!(I.button !== 0 || I.ctrlKey && g) && I.target === this.div && this.#B && (this.#B = !1, !(this.#b?.isDrawer && this.#b.supportMultipleDrawings))) {
      if (!this.#g) {
        this.#g = !0;
        return;
      }
      if (this.#Z.getMode() === JI.STAMP) {
        this.#Z.unselectAll();
        return;
      }
      this.createAndAddNewEditor(I, !1);
    }
  }
  pointerdown(I) {
    if (this.#Z.getMode() === JI.HIGHLIGHT && this.enableTextSelection(), this.#B) {
      this.#B = !1;
      return;
    }
    const {
      isMac: g
    } = ug.platform;
    if (I.button !== 0 || I.ctrlKey && g || I.target !== this.div)
      return;
    if (this.#B = !0, this.#b?.isDrawer) {
      this.startDrawingSession(I);
      return;
    }
    const C = this.#Z.getActive();
    this.#g = !C || C.isEmpty();
  }
  startDrawingSession(I) {
    if (this.div.focus(), this.#F) {
      this.#b.startDrawing(this, this.#Z, !1, I);
      return;
    }
    this.#Z.setCurrentDrawingSession(this), this.#F = new AbortController();
    const g = this.#Z.combinedSignal(this.#F);
    this.div.addEventListener("blur", ({
      relatedTarget: C
    }) => {
      C && !this.div.contains(C) && (this.#G = null, this.commitOrRemove());
    }, {
      signal: g
    }), this.#b.startDrawing(this, this.#Z, !1, I);
  }
  pause(I) {
    if (I) {
      const {
        activeElement: g
      } = document;
      this.div.contains(g) && (this.#G = g);
      return;
    }
    this.#G && setTimeout(() => {
      this.#G?.focus(), this.#G = null;
    }, 0);
  }
  endDrawingSession(I = !1) {
    return this.#F ? (this.#Z.setCurrentDrawingSession(null), this.#F.abort(), this.#F = null, this.#G = null, this.#b.endDrawing(I)) : null;
  }
  findNewParent(I, g, C) {
    const A = this.#Z.findParent(g, C);
    return A === null || A === this ? !1 : (A.changeParent(I), !0);
  }
  commitOrRemove() {
    return this.#F ? (this.endDrawingSession(), !0) : !1;
  }
  onScaleChanging() {
    this.#F && this.#b.onScaleChangingWhenDrawing(this);
  }
  destroy() {
    this.commitOrRemove(), this.#Z.getActive()?.parent === this && (this.#Z.commitOrRemove(), this.#Z.setActiveEditor(null)), this.#d && (clearTimeout(this.#d), this.#d = null);
    for (const I of this.#l.values())
      this.#I?.removePointerInTextLayer(I.contentDiv), I.setParent(null), I.isAttachedToDOM = !1, I.div.remove();
    this.div = null, this.#l.clear(), this.#Z.removeLayer(this);
  }
  #U() {
    for (const I of this.#l.values())
      I.isEmpty() && I.remove();
  }
  render({
    viewport: I
  }) {
    this.viewport = I, cA(this.div, I);
    for (const g of this.#Z.getEditors(this.pageIndex))
      this.add(g), g.rebuild();
    this.updateMode();
  }
  update({
    viewport: I
  }) {
    this.#Z.commitOrRemove(), this.#U();
    const g = this.viewport.rotation, C = I.rotation;
    if (this.viewport = I, cA(this.div, {
      rotation: C
    }), g !== C)
      for (const A of this.#l.values())
        A.rotate(C);
  }
  get pageDimensions() {
    const {
      pageWidth: I,
      pageHeight: g
    } = this.viewport.rawDims;
    return [I, g];
  }
  get scale() {
    return this.#Z.viewParameters.realScale;
  }
}
class Jg {
  #I = null;
  #g = 0;
  #C = /* @__PURE__ */ new Map();
  #A = /* @__PURE__ */ new Map();
  constructor({
    pageIndex: I
  }) {
    this.pageIndex = I;
  }
  setParent(I) {
    if (!this.#I) {
      this.#I = I;
      return;
    }
    if (this.#I !== I) {
      if (this.#C.size > 0)
        for (const g of this.#C.values())
          g.remove(), I.append(g);
      this.#I = I;
    }
  }
  static get _svgFactory() {
    return uI(this, "_svgFactory", new cZ());
  }
  static #d(I, [g, C, A, d]) {
    const {
      style: Z
    } = I;
    Z.top = `${100 * C}%`, Z.left = `${100 * g}%`, Z.width = `${100 * A}%`, Z.height = `${100 * d}%`;
  }
  #l() {
    const I = Jg._svgFactory.create(1, 1, !0);
    return this.#I.append(I), I.setAttribute("aria-hidden", !0), I;
  }
  #B(I, g) {
    const C = Jg._svgFactory.createElement("clipPath");
    I.append(C);
    const A = `clip_${g}`;
    C.setAttribute("id", A), C.setAttribute("clipPathUnits", "objectBoundingBox");
    const d = Jg._svgFactory.createElement("use");
    return C.append(d), d.setAttribute("href", `#${g}`), d.classList.add("clip"), A;
  }
  #i(I, g) {
    for (const [C, A] of Object.entries(g))
      A === null ? I.removeAttribute(C) : I.setAttribute(C, A);
  }
  draw(I, g = !1, C = !1) {
    const A = this.#g++, d = this.#l(), Z = Jg._svgFactory.createElement("defs");
    d.append(Z);
    const i = Jg._svgFactory.createElement("path");
    Z.append(i);
    const B = `path_p${this.pageIndex}_${A}`;
    i.setAttribute("id", B), i.setAttribute("vector-effect", "non-scaling-stroke"), g && this.#A.set(A, i);
    const F = C ? this.#B(Z, B) : null, s = Jg._svgFactory.createElement("use");
    return d.append(s), s.setAttribute("href", `#${B}`), this.updateProperties(d, I), this.#C.set(A, d), {
      id: A,
      clipPathId: `url(#${F})`
    };
  }
  drawOutline(I, g) {
    const C = this.#g++, A = this.#l(), d = Jg._svgFactory.createElement("defs");
    A.append(d);
    const Z = Jg._svgFactory.createElement("path");
    d.append(Z);
    const i = `path_p${this.pageIndex}_${C}`;
    Z.setAttribute("id", i), Z.setAttribute("vector-effect", "non-scaling-stroke");
    let B;
    if (g) {
      const c = Jg._svgFactory.createElement("mask");
      d.append(c), B = `mask_p${this.pageIndex}_${C}`, c.setAttribute("id", B), c.setAttribute("maskUnits", "objectBoundingBox");
      const G = Jg._svgFactory.createElement("rect");
      c.append(G), G.setAttribute("width", "1"), G.setAttribute("height", "1"), G.setAttribute("fill", "white");
      const V = Jg._svgFactory.createElement("use");
      c.append(V), V.setAttribute("href", `#${i}`), V.setAttribute("stroke", "none"), V.setAttribute("fill", "black"), V.setAttribute("fill-rule", "nonzero"), V.classList.add("mask");
    }
    const F = Jg._svgFactory.createElement("use");
    A.append(F), F.setAttribute("href", `#${i}`), B && F.setAttribute("mask", `url(#${B})`);
    const s = F.cloneNode();
    return A.append(s), F.classList.add("mainOutline"), s.classList.add("secondaryOutline"), this.updateProperties(A, I), this.#C.set(C, A), C;
  }
  finalizeDraw(I, g) {
    this.#A.delete(I), this.updateProperties(I, g);
  }
  updateProperties(I, g) {
    if (!g)
      return;
    const {
      root: C,
      bbox: A,
      rootClass: d,
      path: Z
    } = g, i = typeof I == "number" ? this.#C.get(I) : I;
    if (i) {
      if (C && this.#i(i, C), A && Jg.#d(i, A), d) {
        const {
          classList: B
        } = i;
        for (const [F, s] of Object.entries(d))
          B.toggle(F, s);
      }
      if (Z) {
        const F = i.firstChild.firstChild;
        this.#i(F, Z);
      }
    }
  }
  updateParent(I, g) {
    if (g === this)
      return;
    const C = this.#C.get(I);
    C && (g.#I.append(C), this.#C.delete(I), g.#C.set(I, C));
  }
  remove(I) {
    this.#A.delete(I), this.#I !== null && (this.#C.get(I).remove(), this.#C.delete(I));
  }
  destroy() {
    this.#I = null;
    for (const I of this.#C.values())
      I.remove();
    this.#C.clear(), this.#A.clear();
  }
}
globalThis.pdfjsTestingUtils = {
  HighlightOutliner: X0
};
hI.AbortException;
hI.AnnotationEditorLayer;
hI.AnnotationEditorParamsType;
hI.AnnotationEditorType;
hI.AnnotationEditorUIManager;
hI.AnnotationLayer;
hI.AnnotationMode;
hI.ColorPicker;
hI.DOMSVGFactory;
hI.DrawLayer;
hI.FeatureTest;
var oG = hI.GlobalWorkerOptions;
hI.ImageKind;
hI.InvalidPDFException;
hI.MissingPDFException;
hI.OPS;
hI.OutputScale;
hI.PDFDataRangeTransport;
hI.PDFDateString;
hI.PDFWorker;
hI.PasswordResponses;
hI.PermissionFlag;
hI.PixelsPerInch;
hI.RenderingCancelledException;
hI.TextLayer;
hI.TouchManager;
hI.UnexpectedResponseException;
hI.Util;
hI.VerbosityLevel;
hI.XfaLayer;
hI.build;
hI.createValidAbsoluteUrl;
hI.fetchData;
var eG = hI.getDocument;
hI.getFilenameFromUrl;
hI.getPdfFilenameFromUrl;
hI.getXfaPageViewport;
hI.isDataScheme;
hI.isPdfFile;
hI.noContextMenu;
hI.normalizeUnicode;
hI.setLayerDimensions;
hI.shadow;
hI.stopEvent;
hI.version;
const mG = {
  fontSize: 16,
  fontFamily: "Arial",
  color: "#000000",
  backgroundColor: "transparent",
  letterSpacing: 0,
  wordSpacing: 0,
  lineHeight: 1.2,
  textAlign: "left",
  textDecoration: "none",
  textTransform: "none",
  fontWeight: "normal",
  fontStyle: "normal",
  padding: 0,
  borderRadius: 0,
  bold: !1,
  italic: !1,
  underline: !1
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var p0 = function(l, I) {
  return p0 = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(g, C) {
    g.__proto__ = C;
  } || function(g, C) {
    for (var A in C) C.hasOwnProperty(A) && (g[A] = C[A]);
  }, p0(l, I);
};
function q(l, I) {
  p0(l, I);
  function g() {
    this.constructor = l;
  }
  l.prototype = I === null ? Object.create(I) : (g.prototype = I.prototype, new g());
}
var mI = function() {
  return mI = Object.assign || function(I) {
    for (var g, C = 1, A = arguments.length; C < A; C++) {
      g = arguments[C];
      for (var d in g) Object.prototype.hasOwnProperty.call(g, d) && (I[d] = g[d]);
    }
    return I;
  }, mI.apply(this, arguments);
};
function hG(l, I) {
  var g = {};
  for (var C in l) Object.prototype.hasOwnProperty.call(l, C) && I.indexOf(C) < 0 && (g[C] = l[C]);
  if (l != null && typeof Object.getOwnPropertySymbols == "function")
    for (var A = 0, C = Object.getOwnPropertySymbols(l); A < C.length; A++)
      I.indexOf(C[A]) < 0 && Object.prototype.propertyIsEnumerable.call(l, C[A]) && (g[C[A]] = l[C[A]]);
  return g;
}
function NI(l, I, g, C) {
  function A(d) {
    return d instanceof g ? d : new g(function(Z) {
      Z(d);
    });
  }
  return new (g || (g = Promise))(function(d, Z) {
    function i(s) {
      try {
        F(C.next(s));
      } catch (c) {
        Z(c);
      }
    }
    function B(s) {
      try {
        F(C.throw(s));
      } catch (c) {
        Z(c);
      }
    }
    function F(s) {
      s.done ? d(s.value) : A(s.value).then(i, B);
    }
    F((C = C.apply(l, [])).next());
  });
}
function wI(l, I) {
  var g = { label: 0, sent: function() {
    if (d[0] & 1) throw d[1];
    return d[1];
  }, trys: [], ops: [] }, C, A, d, Z;
  return Z = { next: i(0), throw: i(1), return: i(2) }, typeof Symbol == "function" && (Z[Symbol.iterator] = function() {
    return this;
  }), Z;
  function i(F) {
    return function(s) {
      return B([F, s]);
    };
  }
  function B(F) {
    if (C) throw new TypeError("Generator is already executing.");
    for (; g; ) try {
      if (C = 1, A && (d = F[0] & 2 ? A.return : F[0] ? A.throw || ((d = A.return) && d.call(A), 0) : A.next) && !(d = d.call(A, F[1])).done) return d;
      switch (A = 0, d && (F = [F[0] & 2, d.value]), F[0]) {
        case 0:
        case 1:
          d = F;
          break;
        case 4:
          return g.label++, { value: F[1], done: !1 };
        case 5:
          g.label++, A = F[1], F = [0];
          continue;
        case 7:
          F = g.ops.pop(), g.trys.pop();
          continue;
        default:
          if (d = g.trys, !(d = d.length > 0 && d[d.length - 1]) && (F[0] === 6 || F[0] === 2)) {
            g = 0;
            continue;
          }
          if (F[0] === 3 && (!d || F[1] > d[0] && F[1] < d[3])) {
            g.label = F[1];
            break;
          }
          if (F[0] === 6 && g.label < d[1]) {
            g.label = d[1], d = F;
            break;
          }
          if (d && g.label < d[2]) {
            g.label = d[2], g.ops.push(F);
            break;
          }
          d[2] && g.ops.pop(), g.trys.pop();
          continue;
      }
      F = I.call(l, g);
    } catch (s) {
      F = [6, s], A = 0;
    } finally {
      C = d = 0;
    }
    if (F[0] & 5) throw F[1];
    return { value: F[0] ? F[1] : void 0, done: !0 };
  }
}
function kI() {
  for (var l = 0, I = 0, g = arguments.length; I < g; I++) l += arguments[I].length;
  for (var C = Array(l), A = 0, I = 0; I < g; I++)
    for (var d = arguments[I], Z = 0, i = d.length; Z < i; Z++, A++)
      C[A] = d[Z];
  return C;
}
var uA = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", dl = new Uint8Array(256);
for (var Ol = 0; Ol < uA.length; Ol++)
  dl[uA.charCodeAt(Ol)] = Ol;
var QG = function(l) {
  for (var I = "", g = l.length, C = 0; C < g; C += 3)
    I += uA[l[C] >> 2], I += uA[(l[C] & 3) << 4 | l[C + 1] >> 4], I += uA[(l[C + 1] & 15) << 2 | l[C + 2] >> 6], I += uA[l[C + 2] & 63];
  return g % 3 === 2 ? I = I.substring(0, I.length - 1) + "=" : g % 3 === 1 && (I = I.substring(0, I.length - 2) + "=="), I;
}, bi = function(l) {
  var I = l.length * 0.75, g = l.length, C, A = 0, d, Z, i, B;
  l[l.length - 1] === "=" && (I--, l[l.length - 2] === "=" && I--);
  var F = new Uint8Array(I);
  for (C = 0; C < g; C += 4)
    d = dl[l.charCodeAt(C)], Z = dl[l.charCodeAt(C + 1)], i = dl[l.charCodeAt(C + 2)], B = dl[l.charCodeAt(C + 3)], F[A++] = d << 2 | Z >> 4, F[A++] = (Z & 15) << 4 | i >> 2, F[A++] = (i & 3) << 6 | B & 63;
  return F;
}, tG = /^(data)?:?([\w\/\+]+)?;?(charset=[\w-]+|base64)?.*,/i, NG = function(l) {
  var I = l.trim(), g = I.substring(0, 100), C = g.match(tG);
  if (!C)
    return bi(I);
  var A = C[0], d = I.substring(A.length);
  return bi(d);
}, oI = function(l) {
  return l.charCodeAt(0);
}, wG = function(l) {
  return l.codePointAt(0);
}, Xl = function(l, I) {
  return bC(l.toString(16), I, "0").toUpperCase();
}, Ld = function(l) {
  return Xl(l, 2);
}, JC = function(l) {
  return String.fromCharCode(l);
}, YG = function(l) {
  return JC(parseInt(l, 16));
}, bC = function(l, I, g) {
  for (var C = "", A = 0, d = I - l.length; A < d; A++)
    C += g;
  return C + l;
}, mg = function(l, I, g) {
  for (var C = l.length, A = 0; A < C; A++)
    I[g++] = l.charCodeAt(A);
  return C;
}, SG = function(l) {
  return l.replace(/[.*+?^${}()|[\]\\]/g, "\\$&");
}, Hl = function(l) {
  return l.replace(/\t|\u0085|\u2028|\u2029/g, "    ").replace(/[\b\v]/g, "");
}, JG = ["\\n", "\\f", "\\r", "\\u000B"], zB = function(l) {
  return /^[\n\f\r\u000B]$/.test(l);
}, TB = function(l) {
  return l.split(/[\n\f\r\u000B]/);
}, LB = function(l) {
  return l.replace(/[\n\f\r\u000B]/g, " ");
}, EB = function(l, I) {
  var g = l.charCodeAt(I), C, A = I + 1, d = 1;
  return (
    // Check if it's the start of a surrogate pair.
    g >= 55296 && g <= 56319 && // high surrogate
    l.length > A && (C = l.charCodeAt(A), C >= 56320 && C <= 57343 && (d = 2)), [l.slice(I, I + d), d]
  );
}, DG = function(l) {
  for (var I = [], g = 0, C = l.length; g < C; ) {
    var A = EB(l, g), d = A[0], Z = A[1];
    I.push(d), g += Z;
  }
  return I;
}, uG = function(l) {
  for (var I = JG.join("|"), g = ["$"], C = 0, A = l.length; C < A; C++) {
    var d = l[C];
    if (zB(d))
      throw new TypeError("`wordBreak` must not include " + I);
    g.push(d === "" ? "." : SG(d));
  }
  var Z = g.join("|");
  return new RegExp("(" + I + ")|((.*?)(" + Z + "))", "gm");
}, MG = function(l, I, g, C) {
  for (var A = uG(I), d = Hl(l).match(A), Z = "", i = 0, B = [], F = function() {
    Z !== "" && B.push(Z), Z = "", i = 0;
  }, s = 0, c = d.length; s < c; s++) {
    var G = d[s];
    if (zB(G))
      F();
    else {
      var V = C(G);
      i + V > g && F(), Z += G, i += V;
    }
  }
  return F(), B;
}, yG = /^D:(\d\d\d\d)(\d\d)?(\d\d)?(\d\d)?(\d\d)?(\d\d)?([+\-Z])?(\d\d)?'?(\d\d)?'?$/, jB = function(l) {
  var I = l.match(yG);
  if (I) {
    var g = I[1], C = I[2], A = C === void 0 ? "01" : C, d = I[3], Z = d === void 0 ? "01" : d, i = I[4], B = i === void 0 ? "00" : i, F = I[5], s = F === void 0 ? "00" : F, c = I[6], G = c === void 0 ? "00" : c, V = I[7], W = V === void 0 ? "Z" : V, R = I[8], U = R === void 0 ? "00" : R, n = I[9], m = n === void 0 ? "00" : n, e = W === "Z" ? "Z" : "" + W + U + ":" + m, N = /* @__PURE__ */ new Date(g + "-" + A + "-" + Z + "T" + B + ":" + s + ":" + G + e);
    return N;
  }
}, RZ = function(l, I) {
  for (var g, C = 0, A; C < l.length; ) {
    var d = l.substring(C).match(I);
    if (!d)
      return { match: A, pos: C };
    A = d, C += ((g = d.index) !== null && g !== void 0 ? g : 0) + d[0].length;
  }
  return { match: A, pos: C };
}, nd = function(l) {
  return l[l.length - 1];
}, k0 = function(l) {
  if (l instanceof Uint8Array)
    return l;
  for (var I = l.length, g = new Uint8Array(I), C = 0; C < I; C++)
    g[C] = l.charCodeAt(C);
  return g;
}, XG = function() {
  for (var l = [], I = 0; I < arguments.length; I++)
    l[I] = arguments[I];
  for (var g = l.length, C = [], A = 0; A < g; A++) {
    var d = l[A];
    C[A] = d instanceof Uint8Array ? d : k0(d);
  }
  for (var Z = 0, A = 0; A < g; A++)
    Z += l[A].length;
  for (var i = new Uint8Array(Z), B = 0, F = 0; F < g; F++)
    for (var s = C[F], c = 0, G = s.length; c < G; c++)
      i[B++] = s[c];
  return i;
}, HG = function(l) {
  for (var I = 0, g = 0, C = l.length; g < C; g++)
    I += l[g].length;
  for (var A = new Uint8Array(I), d = 0, g = 0, C = l.length; g < C; g++) {
    var Z = l[g];
    A.set(Z, d), d += Z.length;
  }
  return A;
}, vB = function(l) {
  for (var I = "", g = 0, C = l.length; g < C; g++)
    I += JC(l[g]);
  return I;
}, pG = function(l, I) {
  return l.id - I.id;
}, kG = function(l, I) {
  for (var g = [], C = 0, A = l.length; C < A; C++) {
    var d = l[C], Z = l[C - 1];
    (C === 0 || I(d) !== I(Z)) && g.push(d);
  }
  return g;
}, hA = function(l) {
  for (var I = l.length, g = 0, C = Math.floor(I / 2); g < C; g++) {
    var A = g, d = I - g - 1, Z = l[g];
    l[A] = l[d], l[d] = Z;
  }
  return l;
}, KG = function(l) {
  for (var I = 0, g = 0, C = l.length; g < C; g++)
    I += l[g];
  return I;
}, rG = function(l, I) {
  for (var g = new Array(I - l), C = 0, A = g.length; C < A; C++)
    g[C] = l + C;
  return g;
}, zG = function(l, I) {
  for (var g = new Array(I.length), C = 0, A = I.length; C < A; C++)
    g[C] = l[I[C]];
  return g;
}, TG = function(l) {
  return l instanceof Uint8Array || l instanceof ArrayBuffer || typeof l == "string";
}, PA = function(l) {
  if (typeof l == "string")
    return NG(l);
  if (l instanceof ArrayBuffer)
    return new Uint8Array(l);
  if (l instanceof Uint8Array)
    return l;
  throw new TypeError("`input` must be one of `string | ArrayBuffer | Uint8Array`");
}, KA = function() {
  return new Promise(function(l) {
    setTimeout(function() {
      return l();
    }, 0);
  });
}, LG = function(l, I) {
  I === void 0 && (I = !0);
  var g = [];
  I && g.push(65279);
  for (var C = 0, A = l.length; C < A; ) {
    var d = l.codePointAt(C);
    if (d < 65536)
      g.push(d), C += 1;
    else if (d < 1114112)
      g.push(xB(d), OB(d)), C += 2;
    else
      throw new Error("Invalid code point: 0x" + Ld(d));
  }
  return new Uint16Array(g);
}, EG = function(l) {
  return l >= 0 && l <= 65535;
}, jG = function(l) {
  return l >= 65536 && l <= 1114111;
}, xB = function(l) {
  return Math.floor((l - 65536) / 1024) + 55296;
}, OB = function(l) {
  return (l - 65536) % 1024 + 56320;
}, jC;
(function(l) {
  l.BigEndian = "BigEndian", l.LittleEndian = "LittleEndian";
})(jC || (jC = {}));
var qA = "�".codePointAt(0), fB = function(l, I) {
  if (I === void 0 && (I = !0), l.length <= 1)
    return String.fromCodePoint(qA);
  for (var g = I ? xG(l) : jC.BigEndian, C = I ? 2 : 0, A = []; l.length - C >= 2; ) {
    var d = ni(l[C++], l[C++], g);
    if (vG(d))
      if (l.length - C < 2)
        A.push(qA);
      else {
        var Z = ni(l[C++], l[C++], g);
        Ri(Z) ? A.push(d, Z) : A.push(qA);
      }
    else Ri(d) ? (C += 2, A.push(qA)) : A.push(d);
  }
  return C < l.length && A.push(qA), String.fromCodePoint.apply(String, A);
}, vG = function(l) {
  return l >= 55296 && l <= 56319;
}, Ri = function(l) {
  return l >= 56320 && l <= 57343;
}, ni = function(l, I, g) {
  if (g === jC.LittleEndian)
    return I << 8 | l;
  if (g === jC.BigEndian)
    return l << 8 | I;
  throw new Error("Invalid byteOrder: " + g);
}, xG = function(l) {
  return PB(l) ? jC.BigEndian : qB(l) ? jC.LittleEndian : jC.BigEndian;
}, PB = function(l) {
  return l[0] === 254 && l[1] === 255;
}, qB = function(l) {
  return l[0] === 255 && l[1] === 254;
}, _B = function(l) {
  return PB(l) || qB(l);
}, OG = function(l) {
  var I = String(l);
  if (Math.abs(l) < 1) {
    var g = parseInt(l.toString().split("e-")[1]);
    if (g) {
      var C = l < 0;
      C && (l *= -1), l *= Math.pow(10, g - 1), I = "0." + new Array(g).join("0") + l.toString().substring(2), C && (I = "-" + I);
    }
  } else {
    var g = parseInt(l.toString().split("+")[1]);
    g > 20 && (g -= 20, l /= Math.pow(10, g), I = l.toString() + new Array(g + 1).join("0"));
  }
  return I;
}, id = function(l) {
  return Math.ceil(l.toString(2).length / 8);
}, QA = function(l) {
  for (var I = new Uint8Array(id(l)), g = 1; g <= I.length; g++)
    I[g - 1] = l >> (I.length - g) * 8;
  return I;
}, pl = function(l) {
  throw new Error(l);
};
function fG(l) {
  return l && l.__esModule && Object.prototype.hasOwnProperty.call(l, "default") ? l.default : l;
}
var W0 = {}, Ui;
function $C() {
  return Ui || (Ui = 1, function(l) {
    var I = typeof Uint8Array < "u" && typeof Uint16Array < "u" && typeof Int32Array < "u";
    function g(d, Z) {
      return Object.prototype.hasOwnProperty.call(d, Z);
    }
    l.assign = function(d) {
      for (var Z = Array.prototype.slice.call(arguments, 1); Z.length; ) {
        var i = Z.shift();
        if (i) {
          if (typeof i != "object")
            throw new TypeError(i + "must be non-object");
          for (var B in i)
            g(i, B) && (d[B] = i[B]);
        }
      }
      return d;
    }, l.shrinkBuf = function(d, Z) {
      return d.length === Z ? d : d.subarray ? d.subarray(0, Z) : (d.length = Z, d);
    };
    var C = {
      arraySet: function(d, Z, i, B, F) {
        if (Z.subarray && d.subarray) {
          d.set(Z.subarray(i, i + B), F);
          return;
        }
        for (var s = 0; s < B; s++)
          d[F + s] = Z[i + s];
      },
      // Join array of chunks to single array.
      flattenChunks: function(d) {
        var Z, i, B, F, s, c;
        for (B = 0, Z = 0, i = d.length; Z < i; Z++)
          B += d[Z].length;
        for (c = new Uint8Array(B), F = 0, Z = 0, i = d.length; Z < i; Z++)
          s = d[Z], c.set(s, F), F += s.length;
        return c;
      }
    }, A = {
      arraySet: function(d, Z, i, B, F) {
        for (var s = 0; s < B; s++)
          d[F + s] = Z[i + s];
      },
      // Join array of chunks to single array.
      flattenChunks: function(d) {
        return [].concat.apply([], d);
      }
    };
    l.setTyped = function(d) {
      d ? (l.Buf8 = Uint8Array, l.Buf16 = Uint16Array, l.Buf32 = Int32Array, l.assign(l, C)) : (l.Buf8 = Array, l.Buf16 = Array, l.Buf32 = Array, l.assign(l, A));
    }, l.setTyped(I);
  }(W0)), W0;
}
var tA = {}, cC = {}, lA = {}, ai;
function PG() {
  if (ai) return lA;
  ai = 1;
  var l = $C(), I = 4, g = 0, C = 1, A = 2;
  function d(h) {
    for (var v = h.length; --v >= 0; )
      h[v] = 0;
  }
  var Z = 0, i = 1, B = 2, F = 3, s = 258, c = 29, G = 256, V = G + 1 + c, W = 30, R = 19, U = 2 * V + 1, n = 15, m = 16, e = 7, N = 256, w = 16, S = 17, Y = 18, M = (
    /* extra bits for each length code */
    [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0]
  ), y = (
    /* extra bits for each distance code */
    [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13]
  ), r = (
    /* extra bits for each bit length code */
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 7]
  ), z = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], E = 512, X = new Array((V + 2) * 2);
  d(X);
  var O = new Array(W * 2);
  d(O);
  var _ = new Array(E);
  d(_);
  var p = new Array(s - F + 1);
  d(p);
  var T = new Array(c);
  d(T);
  var UI = new Array(W);
  d(UI);
  function sI(h, v, P, gI, D) {
    this.static_tree = h, this.extra_bits = v, this.extra_base = P, this.elems = gI, this.max_length = D, this.has_stree = h && h.length;
  }
  var jI, SI, aI;
  function eI(h, v) {
    this.dyn_tree = h, this.max_code = 0, this.stat_desc = v;
  }
  function zI(h) {
    return h < 256 ? _[h] : _[256 + (h >>> 7)];
  }
  function fI(h, v) {
    h.pending_buf[h.pending++] = v & 255, h.pending_buf[h.pending++] = v >>> 8 & 255;
  }
  function bI(h, v, P) {
    h.bi_valid > m - P ? (h.bi_buf |= v << h.bi_valid & 65535, fI(h, h.bi_buf), h.bi_buf = v >> m - h.bi_valid, h.bi_valid += P - m) : (h.bi_buf |= v << h.bi_valid & 65535, h.bi_valid += P);
  }
  function BI(h, v, P) {
    bI(
      h,
      P[v * 2],
      P[v * 2 + 1]
      /*.Len*/
    );
  }
  function AI(h, v) {
    var P = 0;
    do
      P |= h & 1, h >>>= 1, P <<= 1;
    while (--v > 0);
    return P >>> 1;
  }
  function Ag(h) {
    h.bi_valid === 16 ? (fI(h, h.bi_buf), h.bi_buf = 0, h.bi_valid = 0) : h.bi_valid >= 8 && (h.pending_buf[h.pending++] = h.bi_buf & 255, h.bi_buf >>= 8, h.bi_valid -= 8);
  }
  function ng(h, v) {
    var P = v.dyn_tree, gI = v.max_code, D = v.stat_desc.static_tree, L = v.stat_desc.has_stree, a = v.stat_desc.extra_bits, x = v.stat_desc.extra_base, GI = v.stat_desc.max_length, b, k, K, o, J, H, lI = 0;
    for (o = 0; o <= n; o++)
      h.bl_count[o] = 0;
    for (P[h.heap[h.heap_max] * 2 + 1] = 0, b = h.heap_max + 1; b < U; b++)
      k = h.heap[b], o = P[P[k * 2 + 1] * 2 + 1] + 1, o > GI && (o = GI, lI++), P[k * 2 + 1] = o, !(k > gI) && (h.bl_count[o]++, J = 0, k >= x && (J = a[k - x]), H = P[k * 2], h.opt_len += H * (o + J), L && (h.static_len += H * (D[k * 2 + 1] + J)));
    if (lI !== 0) {
      do {
        for (o = GI - 1; h.bl_count[o] === 0; )
          o--;
        h.bl_count[o]--, h.bl_count[o + 1] += 2, h.bl_count[GI]--, lI -= 2;
      } while (lI > 0);
      for (o = GI; o !== 0; o--)
        for (k = h.bl_count[o]; k !== 0; )
          K = h.heap[--b], !(K > gI) && (P[K * 2 + 1] !== o && (h.opt_len += (o - P[K * 2 + 1]) * P[K * 2], P[K * 2 + 1] = o), k--);
    }
  }
  function Og(h, v, P) {
    var gI = new Array(n + 1), D = 0, L, a;
    for (L = 1; L <= n; L++)
      gI[L] = D = D + P[L - 1] << 1;
    for (a = 0; a <= v; a++) {
      var x = h[a * 2 + 1];
      x !== 0 && (h[a * 2] = AI(gI[x]++, x));
    }
  }
  function PI() {
    var h, v, P, gI, D, L = new Array(n + 1);
    for (P = 0, gI = 0; gI < c - 1; gI++)
      for (T[gI] = P, h = 0; h < 1 << M[gI]; h++)
        p[P++] = gI;
    for (p[P - 1] = gI, D = 0, gI = 0; gI < 16; gI++)
      for (UI[gI] = D, h = 0; h < 1 << y[gI]; h++)
        _[D++] = gI;
    for (D >>= 7; gI < W; gI++)
      for (UI[gI] = D << 7, h = 0; h < 1 << y[gI] - 7; h++)
        _[256 + D++] = gI;
    for (v = 0; v <= n; v++)
      L[v] = 0;
    for (h = 0; h <= 143; )
      X[h * 2 + 1] = 8, h++, L[8]++;
    for (; h <= 255; )
      X[h * 2 + 1] = 9, h++, L[9]++;
    for (; h <= 279; )
      X[h * 2 + 1] = 7, h++, L[7]++;
    for (; h <= 287; )
      X[h * 2 + 1] = 8, h++, L[8]++;
    for (Og(X, V + 1, L), h = 0; h < W; h++)
      O[h * 2 + 1] = 5, O[h * 2] = AI(h, 5);
    jI = new sI(X, M, G + 1, V, n), SI = new sI(O, y, 0, W, n), aI = new sI(new Array(0), r, 0, R, e);
  }
  function Xg(h) {
    var v;
    for (v = 0; v < V; v++)
      h.dyn_ltree[v * 2] = 0;
    for (v = 0; v < W; v++)
      h.dyn_dtree[v * 2] = 0;
    for (v = 0; v < R; v++)
      h.bl_tree[v * 2] = 0;
    h.dyn_ltree[N * 2] = 1, h.opt_len = h.static_len = 0, h.last_lit = h.matches = 0;
  }
  function CA(h) {
    h.bi_valid > 8 ? fI(h, h.bi_buf) : h.bi_valid > 0 && (h.pending_buf[h.pending++] = h.bi_buf), h.bi_buf = 0, h.bi_valid = 0;
  }
  function fg(h, v, P, gI) {
    CA(h), fI(h, P), fI(h, ~P), l.arraySet(h.pending_buf, h.window, v, P, h.pending), h.pending += P;
  }
  function zg(h, v, P, gI) {
    var D = v * 2, L = P * 2;
    return h[D] < h[L] || h[D] === h[L] && gI[v] <= gI[P];
  }
  function Ig(h, v, P) {
    for (var gI = h.heap[P], D = P << 1; D <= h.heap_len && (D < h.heap_len && zg(v, h.heap[D + 1], h.heap[D], h.depth) && D++, !zg(v, gI, h.heap[D], h.depth)); )
      h.heap[P] = h.heap[D], P = D, D <<= 1;
    h.heap[P] = gI;
  }
  function MI(h, v, P) {
    var gI, D, L = 0, a, x;
    if (h.last_lit !== 0)
      do
        gI = h.pending_buf[h.d_buf + L * 2] << 8 | h.pending_buf[h.d_buf + L * 2 + 1], D = h.pending_buf[h.l_buf + L], L++, gI === 0 ? BI(h, D, v) : (a = p[D], BI(h, a + G + 1, v), x = M[a], x !== 0 && (D -= T[a], bI(h, D, x)), gI--, a = zI(gI), BI(h, a, P), x = y[a], x !== 0 && (gI -= UI[a], bI(h, gI, x)));
      while (L < h.last_lit);
    BI(h, N, v);
  }
  function Pg(h, v) {
    var P = v.dyn_tree, gI = v.stat_desc.static_tree, D = v.stat_desc.has_stree, L = v.stat_desc.elems, a, x, GI = -1, b;
    for (h.heap_len = 0, h.heap_max = U, a = 0; a < L; a++)
      P[a * 2] !== 0 ? (h.heap[++h.heap_len] = GI = a, h.depth[a] = 0) : P[a * 2 + 1] = 0;
    for (; h.heap_len < 2; )
      b = h.heap[++h.heap_len] = GI < 2 ? ++GI : 0, P[b * 2] = 1, h.depth[b] = 0, h.opt_len--, D && (h.static_len -= gI[b * 2 + 1]);
    for (v.max_code = GI, a = h.heap_len >> 1; a >= 1; a--)
      Ig(h, P, a);
    b = L;
    do
      a = h.heap[
        1
        /*SMALLEST*/
      ], h.heap[
        1
        /*SMALLEST*/
      ] = h.heap[h.heap_len--], Ig(
        h,
        P,
        1
        /*SMALLEST*/
      ), x = h.heap[
        1
        /*SMALLEST*/
      ], h.heap[--h.heap_max] = a, h.heap[--h.heap_max] = x, P[b * 2] = P[a * 2] + P[x * 2], h.depth[b] = (h.depth[a] >= h.depth[x] ? h.depth[a] : h.depth[x]) + 1, P[a * 2 + 1] = P[x * 2 + 1] = b, h.heap[
        1
        /*SMALLEST*/
      ] = b++, Ig(
        h,
        P,
        1
        /*SMALLEST*/
      );
    while (h.heap_len >= 2);
    h.heap[--h.heap_max] = h.heap[
      1
      /*SMALLEST*/
    ], ng(h, v), Og(P, GI, h.bl_count);
  }
  function aA(h, v, P) {
    var gI, D = -1, L, a = v[0 * 2 + 1], x = 0, GI = 7, b = 4;
    for (a === 0 && (GI = 138, b = 3), v[(P + 1) * 2 + 1] = 65535, gI = 0; gI <= P; gI++)
      L = a, a = v[(gI + 1) * 2 + 1], !(++x < GI && L === a) && (x < b ? h.bl_tree[L * 2] += x : L !== 0 ? (L !== D && h.bl_tree[L * 2]++, h.bl_tree[w * 2]++) : x <= 10 ? h.bl_tree[S * 2]++ : h.bl_tree[Y * 2]++, x = 0, D = L, a === 0 ? (GI = 138, b = 3) : L === a ? (GI = 6, b = 3) : (GI = 7, b = 4));
  }
  function HC(h, v, P) {
    var gI, D = -1, L, a = v[0 * 2 + 1], x = 0, GI = 7, b = 4;
    for (a === 0 && (GI = 138, b = 3), gI = 0; gI <= P; gI++)
      if (L = a, a = v[(gI + 1) * 2 + 1], !(++x < GI && L === a)) {
        if (x < b)
          do
            BI(h, L, h.bl_tree);
          while (--x !== 0);
        else L !== 0 ? (L !== D && (BI(h, L, h.bl_tree), x--), BI(h, w, h.bl_tree), bI(h, x - 3, 2)) : x <= 10 ? (BI(h, S, h.bl_tree), bI(h, x - 3, 3)) : (BI(h, Y, h.bl_tree), bI(h, x - 11, 7));
        x = 0, D = L, a === 0 ? (GI = 138, b = 3) : L === a ? (GI = 6, b = 3) : (GI = 7, b = 4);
      }
  }
  function qg(h) {
    var v;
    for (aA(h, h.dyn_ltree, h.l_desc.max_code), aA(h, h.dyn_dtree, h.d_desc.max_code), Pg(h, h.bl_desc), v = R - 1; v >= 3 && h.bl_tree[z[v] * 2 + 1] === 0; v--)
      ;
    return h.opt_len += 3 * (v + 1) + 5 + 5 + 4, v;
  }
  function oA(h, v, P, gI) {
    var D;
    for (bI(h, v - 257, 5), bI(h, P - 1, 5), bI(h, gI - 4, 4), D = 0; D < gI; D++)
      bI(h, h.bl_tree[z[D] * 2 + 1], 3);
    HC(h, h.dyn_ltree, v - 1), HC(h, h.dyn_dtree, P - 1);
  }
  function pC(h) {
    var v = 4093624447, P;
    for (P = 0; P <= 31; P++, v >>>= 1)
      if (v & 1 && h.dyn_ltree[P * 2] !== 0)
        return g;
    if (h.dyn_ltree[9 * 2] !== 0 || h.dyn_ltree[10 * 2] !== 0 || h.dyn_ltree[13 * 2] !== 0)
      return C;
    for (P = 32; P < G; P++)
      if (h.dyn_ltree[P * 2] !== 0)
        return C;
    return g;
  }
  var sC = !1;
  function eA(h) {
    sC || (PI(), sC = !0), h.l_desc = new eI(h.dyn_ltree, jI), h.d_desc = new eI(h.dyn_dtree, SI), h.bl_desc = new eI(h.bl_tree, aI), h.bi_buf = 0, h.bi_valid = 0, Xg(h);
  }
  function kC(h, v, P, gI) {
    bI(h, (Z << 1) + (gI ? 1 : 0), 3), fg(h, v, P);
  }
  function Qg(h) {
    bI(h, i << 1, 3), BI(h, N, X), Ag(h);
  }
  function nC(h, v, P, gI) {
    var D, L, a = 0;
    h.level > 0 ? (h.strm.data_type === A && (h.strm.data_type = pC(h)), Pg(h, h.l_desc), Pg(h, h.d_desc), a = qg(h), D = h.opt_len + 3 + 7 >>> 3, L = h.static_len + 3 + 7 >>> 3, L <= D && (D = L)) : D = L = P + 5, P + 4 <= D && v !== -1 ? kC(h, v, P, gI) : h.strategy === I || L === D ? (bI(h, (i << 1) + (gI ? 1 : 0), 3), MI(h, X, O)) : (bI(h, (B << 1) + (gI ? 1 : 0), 3), oA(h, h.l_desc.max_code + 1, h.d_desc.max_code + 1, a + 1), MI(h, h.dyn_ltree, h.dyn_dtree)), Xg(h), gI && CA(h);
  }
  function mA(h, v, P) {
    return h.pending_buf[h.d_buf + h.last_lit * 2] = v >>> 8 & 255, h.pending_buf[h.d_buf + h.last_lit * 2 + 1] = v & 255, h.pending_buf[h.l_buf + h.last_lit] = P & 255, h.last_lit++, v === 0 ? h.dyn_ltree[P * 2]++ : (h.matches++, v--, h.dyn_ltree[(p[P] + G + 1) * 2]++, h.dyn_dtree[zI(v) * 2]++), h.last_lit === h.lit_bufsize - 1;
  }
  return lA._tr_init = eA, lA._tr_stored_block = kC, lA._tr_flush_block = nC, lA._tr_tally = mA, lA._tr_align = Qg, lA;
}
var b0, oi;
function $B() {
  if (oi) return b0;
  oi = 1;
  function l(I, g, C, A) {
    for (var d = I & 65535 | 0, Z = I >>> 16 & 65535 | 0, i = 0; C !== 0; ) {
      i = C > 2e3 ? 2e3 : C, C -= i;
      do
        d = d + g[A++] | 0, Z = Z + d | 0;
      while (--i);
      d %= 65521, Z %= 65521;
    }
    return d | Z << 16 | 0;
  }
  return b0 = l, b0;
}
var R0, ei;
function IF() {
  if (ei) return R0;
  ei = 1;
  function l() {
    for (var C, A = [], d = 0; d < 256; d++) {
      C = d;
      for (var Z = 0; Z < 8; Z++)
        C = C & 1 ? 3988292384 ^ C >>> 1 : C >>> 1;
      A[d] = C;
    }
    return A;
  }
  var I = l();
  function g(C, A, d, Z) {
    var i = I, B = Z + d;
    C ^= -1;
    for (var F = Z; F < B; F++)
      C = C >>> 8 ^ i[(C ^ A[F]) & 255];
    return C ^ -1;
  }
  return R0 = g, R0;
}
var n0, mi;
function nZ() {
  return mi || (mi = 1, n0 = {
    2: "need dictionary",
    /* Z_NEED_DICT       2  */
    1: "stream end",
    /* Z_STREAM_END      1  */
    0: "",
    /* Z_OK              0  */
    "-1": "file error",
    /* Z_ERRNO         (-1) */
    "-2": "stream error",
    /* Z_STREAM_ERROR  (-2) */
    "-3": "data error",
    /* Z_DATA_ERROR    (-3) */
    "-4": "insufficient memory",
    /* Z_MEM_ERROR     (-4) */
    "-5": "buffer error",
    /* Z_BUF_ERROR     (-5) */
    "-6": "incompatible version"
    /* Z_VERSION_ERROR (-6) */
  }), n0;
}
var hi;
function qG() {
  if (hi) return cC;
  hi = 1;
  var l = $C(), I = PG(), g = $B(), C = IF(), A = nZ(), d = 0, Z = 1, i = 3, B = 4, F = 5, s = 0, c = 1, G = -2, V = -3, W = -5, R = -1, U = 1, n = 2, m = 3, e = 4, N = 0, w = 2, S = 8, Y = 9, M = 15, y = 8, r = 29, z = 256, E = z + 1 + r, X = 30, O = 19, _ = 2 * E + 1, p = 15, T = 3, UI = 258, sI = UI + T + 1, jI = 32, SI = 42, aI = 69, eI = 73, zI = 91, fI = 103, bI = 113, BI = 666, AI = 1, Ag = 2, ng = 3, Og = 4, PI = 3;
  function Xg(b, k) {
    return b.msg = A[k], k;
  }
  function CA(b) {
    return (b << 1) - (b > 4 ? 9 : 0);
  }
  function fg(b) {
    for (var k = b.length; --k >= 0; )
      b[k] = 0;
  }
  function zg(b) {
    var k = b.state, K = k.pending;
    K > b.avail_out && (K = b.avail_out), K !== 0 && (l.arraySet(b.output, k.pending_buf, k.pending_out, K, b.next_out), b.next_out += K, k.pending_out += K, b.total_out += K, b.avail_out -= K, k.pending -= K, k.pending === 0 && (k.pending_out = 0));
  }
  function Ig(b, k) {
    I._tr_flush_block(b, b.block_start >= 0 ? b.block_start : -1, b.strstart - b.block_start, k), b.block_start = b.strstart, zg(b.strm);
  }
  function MI(b, k) {
    b.pending_buf[b.pending++] = k;
  }
  function Pg(b, k) {
    b.pending_buf[b.pending++] = k >>> 8 & 255, b.pending_buf[b.pending++] = k & 255;
  }
  function aA(b, k, K, o) {
    var J = b.avail_in;
    return J > o && (J = o), J === 0 ? 0 : (b.avail_in -= J, l.arraySet(k, b.input, b.next_in, J, K), b.state.wrap === 1 ? b.adler = g(b.adler, k, J, K) : b.state.wrap === 2 && (b.adler = C(b.adler, k, J, K)), b.next_in += J, b.total_in += J, J);
  }
  function HC(b, k) {
    var K = b.max_chain_length, o = b.strstart, J, H, lI = b.prev_length, $ = b.nice_match, II = b.strstart > b.w_size - sI ? b.strstart - (b.w_size - sI) : 0, rI = b.window, tC = b.w_mask, Cg = b.prev, TI = b.strstart + UI, sg = rI[o + lI - 1], tg = rI[o + lI];
    b.prev_length >= b.good_match && (K >>= 2), $ > b.lookahead && ($ = b.lookahead);
    do
      if (J = k, !(rI[J + lI] !== tg || rI[J + lI - 1] !== sg || rI[J] !== rI[o] || rI[++J] !== rI[o + 1])) {
        o += 2, J++;
        do
          ;
        while (rI[++o] === rI[++J] && rI[++o] === rI[++J] && rI[++o] === rI[++J] && rI[++o] === rI[++J] && rI[++o] === rI[++J] && rI[++o] === rI[++J] && rI[++o] === rI[++J] && rI[++o] === rI[++J] && o < TI);
        if (H = UI - (TI - o), o = TI - UI, H > lI) {
          if (b.match_start = k, lI = H, H >= $)
            break;
          sg = rI[o + lI - 1], tg = rI[o + lI];
        }
      }
    while ((k = Cg[k & tC]) > II && --K !== 0);
    return lI <= b.lookahead ? lI : b.lookahead;
  }
  function qg(b) {
    var k = b.w_size, K, o, J, H, lI;
    do {
      if (H = b.window_size - b.lookahead - b.strstart, b.strstart >= k + (k - sI)) {
        l.arraySet(b.window, b.window, k, k, 0), b.match_start -= k, b.strstart -= k, b.block_start -= k, o = b.hash_size, K = o;
        do
          J = b.head[--K], b.head[K] = J >= k ? J - k : 0;
        while (--o);
        o = k, K = o;
        do
          J = b.prev[--K], b.prev[K] = J >= k ? J - k : 0;
        while (--o);
        H += k;
      }
      if (b.strm.avail_in === 0)
        break;
      if (o = aA(b.strm, b.window, b.strstart + b.lookahead, H), b.lookahead += o, b.lookahead + b.insert >= T)
        for (lI = b.strstart - b.insert, b.ins_h = b.window[lI], b.ins_h = (b.ins_h << b.hash_shift ^ b.window[lI + 1]) & b.hash_mask; b.insert && (b.ins_h = (b.ins_h << b.hash_shift ^ b.window[lI + T - 1]) & b.hash_mask, b.prev[lI & b.w_mask] = b.head[b.ins_h], b.head[b.ins_h] = lI, lI++, b.insert--, !(b.lookahead + b.insert < T)); )
          ;
    } while (b.lookahead < sI && b.strm.avail_in !== 0);
  }
  function oA(b, k) {
    var K = 65535;
    for (K > b.pending_buf_size - 5 && (K = b.pending_buf_size - 5); ; ) {
      if (b.lookahead <= 1) {
        if (qg(b), b.lookahead === 0 && k === d)
          return AI;
        if (b.lookahead === 0)
          break;
      }
      b.strstart += b.lookahead, b.lookahead = 0;
      var o = b.block_start + K;
      if ((b.strstart === 0 || b.strstart >= o) && (b.lookahead = b.strstart - o, b.strstart = o, Ig(b, !1), b.strm.avail_out === 0) || b.strstart - b.block_start >= b.w_size - sI && (Ig(b, !1), b.strm.avail_out === 0))
        return AI;
    }
    return b.insert = 0, k === B ? (Ig(b, !0), b.strm.avail_out === 0 ? ng : Og) : (b.strstart > b.block_start && (Ig(b, !1), b.strm.avail_out === 0), AI);
  }
  function pC(b, k) {
    for (var K, o; ; ) {
      if (b.lookahead < sI) {
        if (qg(b), b.lookahead < sI && k === d)
          return AI;
        if (b.lookahead === 0)
          break;
      }
      if (K = 0, b.lookahead >= T && (b.ins_h = (b.ins_h << b.hash_shift ^ b.window[b.strstart + T - 1]) & b.hash_mask, K = b.prev[b.strstart & b.w_mask] = b.head[b.ins_h], b.head[b.ins_h] = b.strstart), K !== 0 && b.strstart - K <= b.w_size - sI && (b.match_length = HC(b, K)), b.match_length >= T)
        if (o = I._tr_tally(b, b.strstart - b.match_start, b.match_length - T), b.lookahead -= b.match_length, b.match_length <= b.max_lazy_match && b.lookahead >= T) {
          b.match_length--;
          do
            b.strstart++, b.ins_h = (b.ins_h << b.hash_shift ^ b.window[b.strstart + T - 1]) & b.hash_mask, K = b.prev[b.strstart & b.w_mask] = b.head[b.ins_h], b.head[b.ins_h] = b.strstart;
          while (--b.match_length !== 0);
          b.strstart++;
        } else
          b.strstart += b.match_length, b.match_length = 0, b.ins_h = b.window[b.strstart], b.ins_h = (b.ins_h << b.hash_shift ^ b.window[b.strstart + 1]) & b.hash_mask;
      else
        o = I._tr_tally(b, 0, b.window[b.strstart]), b.lookahead--, b.strstart++;
      if (o && (Ig(b, !1), b.strm.avail_out === 0))
        return AI;
    }
    return b.insert = b.strstart < T - 1 ? b.strstart : T - 1, k === B ? (Ig(b, !0), b.strm.avail_out === 0 ? ng : Og) : b.last_lit && (Ig(b, !1), b.strm.avail_out === 0) ? AI : Ag;
  }
  function sC(b, k) {
    for (var K, o, J; ; ) {
      if (b.lookahead < sI) {
        if (qg(b), b.lookahead < sI && k === d)
          return AI;
        if (b.lookahead === 0)
          break;
      }
      if (K = 0, b.lookahead >= T && (b.ins_h = (b.ins_h << b.hash_shift ^ b.window[b.strstart + T - 1]) & b.hash_mask, K = b.prev[b.strstart & b.w_mask] = b.head[b.ins_h], b.head[b.ins_h] = b.strstart), b.prev_length = b.match_length, b.prev_match = b.match_start, b.match_length = T - 1, K !== 0 && b.prev_length < b.max_lazy_match && b.strstart - K <= b.w_size - sI && (b.match_length = HC(b, K), b.match_length <= 5 && (b.strategy === U || b.match_length === T && b.strstart - b.match_start > 4096) && (b.match_length = T - 1)), b.prev_length >= T && b.match_length <= b.prev_length) {
        J = b.strstart + b.lookahead - T, o = I._tr_tally(b, b.strstart - 1 - b.prev_match, b.prev_length - T), b.lookahead -= b.prev_length - 1, b.prev_length -= 2;
        do
          ++b.strstart <= J && (b.ins_h = (b.ins_h << b.hash_shift ^ b.window[b.strstart + T - 1]) & b.hash_mask, K = b.prev[b.strstart & b.w_mask] = b.head[b.ins_h], b.head[b.ins_h] = b.strstart);
        while (--b.prev_length !== 0);
        if (b.match_available = 0, b.match_length = T - 1, b.strstart++, o && (Ig(b, !1), b.strm.avail_out === 0))
          return AI;
      } else if (b.match_available) {
        if (o = I._tr_tally(b, 0, b.window[b.strstart - 1]), o && Ig(b, !1), b.strstart++, b.lookahead--, b.strm.avail_out === 0)
          return AI;
      } else
        b.match_available = 1, b.strstart++, b.lookahead--;
    }
    return b.match_available && (o = I._tr_tally(b, 0, b.window[b.strstart - 1]), b.match_available = 0), b.insert = b.strstart < T - 1 ? b.strstart : T - 1, k === B ? (Ig(b, !0), b.strm.avail_out === 0 ? ng : Og) : b.last_lit && (Ig(b, !1), b.strm.avail_out === 0) ? AI : Ag;
  }
  function eA(b, k) {
    for (var K, o, J, H, lI = b.window; ; ) {
      if (b.lookahead <= UI) {
        if (qg(b), b.lookahead <= UI && k === d)
          return AI;
        if (b.lookahead === 0)
          break;
      }
      if (b.match_length = 0, b.lookahead >= T && b.strstart > 0 && (J = b.strstart - 1, o = lI[J], o === lI[++J] && o === lI[++J] && o === lI[++J])) {
        H = b.strstart + UI;
        do
          ;
        while (o === lI[++J] && o === lI[++J] && o === lI[++J] && o === lI[++J] && o === lI[++J] && o === lI[++J] && o === lI[++J] && o === lI[++J] && J < H);
        b.match_length = UI - (H - J), b.match_length > b.lookahead && (b.match_length = b.lookahead);
      }
      if (b.match_length >= T ? (K = I._tr_tally(b, 1, b.match_length - T), b.lookahead -= b.match_length, b.strstart += b.match_length, b.match_length = 0) : (K = I._tr_tally(b, 0, b.window[b.strstart]), b.lookahead--, b.strstart++), K && (Ig(b, !1), b.strm.avail_out === 0))
        return AI;
    }
    return b.insert = 0, k === B ? (Ig(b, !0), b.strm.avail_out === 0 ? ng : Og) : b.last_lit && (Ig(b, !1), b.strm.avail_out === 0) ? AI : Ag;
  }
  function kC(b, k) {
    for (var K; ; ) {
      if (b.lookahead === 0 && (qg(b), b.lookahead === 0)) {
        if (k === d)
          return AI;
        break;
      }
      if (b.match_length = 0, K = I._tr_tally(b, 0, b.window[b.strstart]), b.lookahead--, b.strstart++, K && (Ig(b, !1), b.strm.avail_out === 0))
        return AI;
    }
    return b.insert = 0, k === B ? (Ig(b, !0), b.strm.avail_out === 0 ? ng : Og) : b.last_lit && (Ig(b, !1), b.strm.avail_out === 0) ? AI : Ag;
  }
  function Qg(b, k, K, o, J) {
    this.good_length = b, this.max_lazy = k, this.nice_length = K, this.max_chain = o, this.func = J;
  }
  var nC;
  nC = [
    /*      good lazy nice chain */
    new Qg(0, 0, 0, 0, oA),
    /* 0 store only */
    new Qg(4, 4, 8, 4, pC),
    /* 1 max speed, no lazy matches */
    new Qg(4, 5, 16, 8, pC),
    /* 2 */
    new Qg(4, 6, 32, 32, pC),
    /* 3 */
    new Qg(4, 4, 16, 16, sC),
    /* 4 lazy matches */
    new Qg(8, 16, 32, 32, sC),
    /* 5 */
    new Qg(8, 16, 128, 128, sC),
    /* 6 */
    new Qg(8, 32, 128, 256, sC),
    /* 7 */
    new Qg(32, 128, 258, 1024, sC),
    /* 8 */
    new Qg(32, 258, 258, 4096, sC)
    /* 9 max compression */
  ];
  function mA(b) {
    b.window_size = 2 * b.w_size, fg(b.head), b.max_lazy_match = nC[b.level].max_lazy, b.good_match = nC[b.level].good_length, b.nice_match = nC[b.level].nice_length, b.max_chain_length = nC[b.level].max_chain, b.strstart = 0, b.block_start = 0, b.lookahead = 0, b.insert = 0, b.match_length = b.prev_length = T - 1, b.match_available = 0, b.ins_h = 0;
  }
  function h() {
    this.strm = null, this.status = 0, this.pending_buf = null, this.pending_buf_size = 0, this.pending_out = 0, this.pending = 0, this.wrap = 0, this.gzhead = null, this.gzindex = 0, this.method = S, this.last_flush = -1, this.w_size = 0, this.w_bits = 0, this.w_mask = 0, this.window = null, this.window_size = 0, this.prev = null, this.head = null, this.ins_h = 0, this.hash_size = 0, this.hash_bits = 0, this.hash_mask = 0, this.hash_shift = 0, this.block_start = 0, this.match_length = 0, this.prev_match = 0, this.match_available = 0, this.strstart = 0, this.match_start = 0, this.lookahead = 0, this.prev_length = 0, this.max_chain_length = 0, this.max_lazy_match = 0, this.level = 0, this.strategy = 0, this.good_match = 0, this.nice_match = 0, this.dyn_ltree = new l.Buf16(_ * 2), this.dyn_dtree = new l.Buf16((2 * X + 1) * 2), this.bl_tree = new l.Buf16((2 * O + 1) * 2), fg(this.dyn_ltree), fg(this.dyn_dtree), fg(this.bl_tree), this.l_desc = null, this.d_desc = null, this.bl_desc = null, this.bl_count = new l.Buf16(p + 1), this.heap = new l.Buf16(2 * E + 1), fg(this.heap), this.heap_len = 0, this.heap_max = 0, this.depth = new l.Buf16(2 * E + 1), fg(this.depth), this.l_buf = 0, this.lit_bufsize = 0, this.last_lit = 0, this.d_buf = 0, this.opt_len = 0, this.static_len = 0, this.matches = 0, this.insert = 0, this.bi_buf = 0, this.bi_valid = 0;
  }
  function v(b) {
    var k;
    return !b || !b.state ? Xg(b, G) : (b.total_in = b.total_out = 0, b.data_type = w, k = b.state, k.pending = 0, k.pending_out = 0, k.wrap < 0 && (k.wrap = -k.wrap), k.status = k.wrap ? SI : bI, b.adler = k.wrap === 2 ? 0 : 1, k.last_flush = d, I._tr_init(k), s);
  }
  function P(b) {
    var k = v(b);
    return k === s && mA(b.state), k;
  }
  function gI(b, k) {
    return !b || !b.state || b.state.wrap !== 2 ? G : (b.state.gzhead = k, s);
  }
  function D(b, k, K, o, J, H) {
    if (!b)
      return G;
    var lI = 1;
    if (k === R && (k = 6), o < 0 ? (lI = 0, o = -o) : o > 15 && (lI = 2, o -= 16), J < 1 || J > Y || K !== S || o < 8 || o > 15 || k < 0 || k > 9 || H < 0 || H > e)
      return Xg(b, G);
    o === 8 && (o = 9);
    var $ = new h();
    return b.state = $, $.strm = b, $.wrap = lI, $.gzhead = null, $.w_bits = o, $.w_size = 1 << $.w_bits, $.w_mask = $.w_size - 1, $.hash_bits = J + 7, $.hash_size = 1 << $.hash_bits, $.hash_mask = $.hash_size - 1, $.hash_shift = ~~(($.hash_bits + T - 1) / T), $.window = new l.Buf8($.w_size * 2), $.head = new l.Buf16($.hash_size), $.prev = new l.Buf16($.w_size), $.lit_bufsize = 1 << J + 6, $.pending_buf_size = $.lit_bufsize * 4, $.pending_buf = new l.Buf8($.pending_buf_size), $.d_buf = 1 * $.lit_bufsize, $.l_buf = 3 * $.lit_bufsize, $.level = k, $.strategy = H, $.method = K, P(b);
  }
  function L(b, k) {
    return D(b, k, S, M, y, N);
  }
  function a(b, k) {
    var K, o, J, H;
    if (!b || !b.state || k > F || k < 0)
      return b ? Xg(b, G) : G;
    if (o = b.state, !b.output || !b.input && b.avail_in !== 0 || o.status === BI && k !== B)
      return Xg(b, b.avail_out === 0 ? W : G);
    if (o.strm = b, K = o.last_flush, o.last_flush = k, o.status === SI)
      if (o.wrap === 2)
        b.adler = 0, MI(o, 31), MI(o, 139), MI(o, 8), o.gzhead ? (MI(
          o,
          (o.gzhead.text ? 1 : 0) + (o.gzhead.hcrc ? 2 : 0) + (o.gzhead.extra ? 4 : 0) + (o.gzhead.name ? 8 : 0) + (o.gzhead.comment ? 16 : 0)
        ), MI(o, o.gzhead.time & 255), MI(o, o.gzhead.time >> 8 & 255), MI(o, o.gzhead.time >> 16 & 255), MI(o, o.gzhead.time >> 24 & 255), MI(o, o.level === 9 ? 2 : o.strategy >= n || o.level < 2 ? 4 : 0), MI(o, o.gzhead.os & 255), o.gzhead.extra && o.gzhead.extra.length && (MI(o, o.gzhead.extra.length & 255), MI(o, o.gzhead.extra.length >> 8 & 255)), o.gzhead.hcrc && (b.adler = C(b.adler, o.pending_buf, o.pending, 0)), o.gzindex = 0, o.status = aI) : (MI(o, 0), MI(o, 0), MI(o, 0), MI(o, 0), MI(o, 0), MI(o, o.level === 9 ? 2 : o.strategy >= n || o.level < 2 ? 4 : 0), MI(o, PI), o.status = bI);
      else {
        var lI = S + (o.w_bits - 8 << 4) << 8, $ = -1;
        o.strategy >= n || o.level < 2 ? $ = 0 : o.level < 6 ? $ = 1 : o.level === 6 ? $ = 2 : $ = 3, lI |= $ << 6, o.strstart !== 0 && (lI |= jI), lI += 31 - lI % 31, o.status = bI, Pg(o, lI), o.strstart !== 0 && (Pg(o, b.adler >>> 16), Pg(o, b.adler & 65535)), b.adler = 1;
      }
    if (o.status === aI)
      if (o.gzhead.extra) {
        for (J = o.pending; o.gzindex < (o.gzhead.extra.length & 65535) && !(o.pending === o.pending_buf_size && (o.gzhead.hcrc && o.pending > J && (b.adler = C(b.adler, o.pending_buf, o.pending - J, J)), zg(b), J = o.pending, o.pending === o.pending_buf_size)); )
          MI(o, o.gzhead.extra[o.gzindex] & 255), o.gzindex++;
        o.gzhead.hcrc && o.pending > J && (b.adler = C(b.adler, o.pending_buf, o.pending - J, J)), o.gzindex === o.gzhead.extra.length && (o.gzindex = 0, o.status = eI);
      } else
        o.status = eI;
    if (o.status === eI)
      if (o.gzhead.name) {
        J = o.pending;
        do {
          if (o.pending === o.pending_buf_size && (o.gzhead.hcrc && o.pending > J && (b.adler = C(b.adler, o.pending_buf, o.pending - J, J)), zg(b), J = o.pending, o.pending === o.pending_buf_size)) {
            H = 1;
            break;
          }
          o.gzindex < o.gzhead.name.length ? H = o.gzhead.name.charCodeAt(o.gzindex++) & 255 : H = 0, MI(o, H);
        } while (H !== 0);
        o.gzhead.hcrc && o.pending > J && (b.adler = C(b.adler, o.pending_buf, o.pending - J, J)), H === 0 && (o.gzindex = 0, o.status = zI);
      } else
        o.status = zI;
    if (o.status === zI)
      if (o.gzhead.comment) {
        J = o.pending;
        do {
          if (o.pending === o.pending_buf_size && (o.gzhead.hcrc && o.pending > J && (b.adler = C(b.adler, o.pending_buf, o.pending - J, J)), zg(b), J = o.pending, o.pending === o.pending_buf_size)) {
            H = 1;
            break;
          }
          o.gzindex < o.gzhead.comment.length ? H = o.gzhead.comment.charCodeAt(o.gzindex++) & 255 : H = 0, MI(o, H);
        } while (H !== 0);
        o.gzhead.hcrc && o.pending > J && (b.adler = C(b.adler, o.pending_buf, o.pending - J, J)), H === 0 && (o.status = fI);
      } else
        o.status = fI;
    if (o.status === fI && (o.gzhead.hcrc ? (o.pending + 2 > o.pending_buf_size && zg(b), o.pending + 2 <= o.pending_buf_size && (MI(o, b.adler & 255), MI(o, b.adler >> 8 & 255), b.adler = 0, o.status = bI)) : o.status = bI), o.pending !== 0) {
      if (zg(b), b.avail_out === 0)
        return o.last_flush = -1, s;
    } else if (b.avail_in === 0 && CA(k) <= CA(K) && k !== B)
      return Xg(b, W);
    if (o.status === BI && b.avail_in !== 0)
      return Xg(b, W);
    if (b.avail_in !== 0 || o.lookahead !== 0 || k !== d && o.status !== BI) {
      var II = o.strategy === n ? kC(o, k) : o.strategy === m ? eA(o, k) : nC[o.level].func(o, k);
      if ((II === ng || II === Og) && (o.status = BI), II === AI || II === ng)
        return b.avail_out === 0 && (o.last_flush = -1), s;
      if (II === Ag && (k === Z ? I._tr_align(o) : k !== F && (I._tr_stored_block(o, 0, 0, !1), k === i && (fg(o.head), o.lookahead === 0 && (o.strstart = 0, o.block_start = 0, o.insert = 0))), zg(b), b.avail_out === 0))
        return o.last_flush = -1, s;
    }
    return k !== B ? s : o.wrap <= 0 ? c : (o.wrap === 2 ? (MI(o, b.adler & 255), MI(o, b.adler >> 8 & 255), MI(o, b.adler >> 16 & 255), MI(o, b.adler >> 24 & 255), MI(o, b.total_in & 255), MI(o, b.total_in >> 8 & 255), MI(o, b.total_in >> 16 & 255), MI(o, b.total_in >> 24 & 255)) : (Pg(o, b.adler >>> 16), Pg(o, b.adler & 65535)), zg(b), o.wrap > 0 && (o.wrap = -o.wrap), o.pending !== 0 ? s : c);
  }
  function x(b) {
    var k;
    return !b || !b.state ? G : (k = b.state.status, k !== SI && k !== aI && k !== eI && k !== zI && k !== fI && k !== bI && k !== BI ? Xg(b, G) : (b.state = null, k === bI ? Xg(b, V) : s));
  }
  function GI(b, k) {
    var K = k.length, o, J, H, lI, $, II, rI, tC;
    if (!b || !b.state || (o = b.state, lI = o.wrap, lI === 2 || lI === 1 && o.status !== SI || o.lookahead))
      return G;
    for (lI === 1 && (b.adler = g(b.adler, k, K, 0)), o.wrap = 0, K >= o.w_size && (lI === 0 && (fg(o.head), o.strstart = 0, o.block_start = 0, o.insert = 0), tC = new l.Buf8(o.w_size), l.arraySet(tC, k, K - o.w_size, o.w_size, 0), k = tC, K = o.w_size), $ = b.avail_in, II = b.next_in, rI = b.input, b.avail_in = K, b.next_in = 0, b.input = k, qg(o); o.lookahead >= T; ) {
      J = o.strstart, H = o.lookahead - (T - 1);
      do
        o.ins_h = (o.ins_h << o.hash_shift ^ o.window[J + T - 1]) & o.hash_mask, o.prev[J & o.w_mask] = o.head[o.ins_h], o.head[o.ins_h] = J, J++;
      while (--H);
      o.strstart = J, o.lookahead = T - 1, qg(o);
    }
    return o.strstart += o.lookahead, o.block_start = o.strstart, o.insert = o.lookahead, o.lookahead = 0, o.match_length = o.prev_length = T - 1, o.match_available = 0, b.next_in = II, b.input = rI, b.avail_in = $, o.wrap = lI, s;
  }
  return cC.deflateInit = L, cC.deflateInit2 = D, cC.deflateReset = P, cC.deflateResetKeep = v, cC.deflateSetHeader = gI, cC.deflate = a, cC.deflateEnd = x, cC.deflateSetDictionary = GI, cC.deflateInfo = "pako deflate (from Nodeca project)", cC;
}
var dA = {}, Qi;
function gF() {
  if (Qi) return dA;
  Qi = 1;
  var l = $C(), I = !0, g = !0;
  try {
    String.fromCharCode.apply(null, [0]);
  } catch {
    I = !1;
  }
  try {
    String.fromCharCode.apply(null, new Uint8Array(1));
  } catch {
    g = !1;
  }
  for (var C = new l.Buf8(256), A = 0; A < 256; A++)
    C[A] = A >= 252 ? 6 : A >= 248 ? 5 : A >= 240 ? 4 : A >= 224 ? 3 : A >= 192 ? 2 : 1;
  C[254] = C[254] = 1, dA.string2buf = function(Z) {
    var i, B, F, s, c, G = Z.length, V = 0;
    for (s = 0; s < G; s++)
      B = Z.charCodeAt(s), (B & 64512) === 55296 && s + 1 < G && (F = Z.charCodeAt(s + 1), (F & 64512) === 56320 && (B = 65536 + (B - 55296 << 10) + (F - 56320), s++)), V += B < 128 ? 1 : B < 2048 ? 2 : B < 65536 ? 3 : 4;
    for (i = new l.Buf8(V), c = 0, s = 0; c < V; s++)
      B = Z.charCodeAt(s), (B & 64512) === 55296 && s + 1 < G && (F = Z.charCodeAt(s + 1), (F & 64512) === 56320 && (B = 65536 + (B - 55296 << 10) + (F - 56320), s++)), B < 128 ? i[c++] = B : B < 2048 ? (i[c++] = 192 | B >>> 6, i[c++] = 128 | B & 63) : B < 65536 ? (i[c++] = 224 | B >>> 12, i[c++] = 128 | B >>> 6 & 63, i[c++] = 128 | B & 63) : (i[c++] = 240 | B >>> 18, i[c++] = 128 | B >>> 12 & 63, i[c++] = 128 | B >>> 6 & 63, i[c++] = 128 | B & 63);
    return i;
  };
  function d(Z, i) {
    if (i < 65534 && (Z.subarray && g || !Z.subarray && I))
      return String.fromCharCode.apply(null, l.shrinkBuf(Z, i));
    for (var B = "", F = 0; F < i; F++)
      B += String.fromCharCode(Z[F]);
    return B;
  }
  return dA.buf2binstring = function(Z) {
    return d(Z, Z.length);
  }, dA.binstring2buf = function(Z) {
    for (var i = new l.Buf8(Z.length), B = 0, F = i.length; B < F; B++)
      i[B] = Z.charCodeAt(B);
    return i;
  }, dA.buf2string = function(Z, i) {
    var B, F, s, c, G = i || Z.length, V = new Array(G * 2);
    for (F = 0, B = 0; B < G; ) {
      if (s = Z[B++], s < 128) {
        V[F++] = s;
        continue;
      }
      if (c = C[s], c > 4) {
        V[F++] = 65533, B += c - 1;
        continue;
      }
      for (s &= c === 2 ? 31 : c === 3 ? 15 : 7; c > 1 && B < G; )
        s = s << 6 | Z[B++] & 63, c--;
      if (c > 1) {
        V[F++] = 65533;
        continue;
      }
      s < 65536 ? V[F++] = s : (s -= 65536, V[F++] = 55296 | s >> 10 & 1023, V[F++] = 56320 | s & 1023);
    }
    return d(V, F);
  }, dA.utf8border = function(Z, i) {
    var B;
    for (i = i || Z.length, i > Z.length && (i = Z.length), B = i - 1; B >= 0 && (Z[B] & 192) === 128; )
      B--;
    return B < 0 || B === 0 ? i : B + C[Z[B]] > i ? B : i;
  }, dA;
}
var U0, ti;
function CF() {
  if (ti) return U0;
  ti = 1;
  function l() {
    this.input = null, this.next_in = 0, this.avail_in = 0, this.total_in = 0, this.output = null, this.next_out = 0, this.avail_out = 0, this.total_out = 0, this.msg = "", this.state = null, this.data_type = 2, this.adler = 0;
  }
  return U0 = l, U0;
}
var Ni;
function _G() {
  if (Ni) return tA;
  Ni = 1;
  var l = qG(), I = $C(), g = gF(), C = nZ(), A = CF(), d = Object.prototype.toString, Z = 0, i = 4, B = 0, F = 1, s = 2, c = -1, G = 0, V = 8;
  function W(m) {
    if (!(this instanceof W)) return new W(m);
    this.options = I.assign({
      level: c,
      method: V,
      chunkSize: 16384,
      windowBits: 15,
      memLevel: 8,
      strategy: G,
      to: ""
    }, m || {});
    var e = this.options;
    e.raw && e.windowBits > 0 ? e.windowBits = -e.windowBits : e.gzip && e.windowBits > 0 && e.windowBits < 16 && (e.windowBits += 16), this.err = 0, this.msg = "", this.ended = !1, this.chunks = [], this.strm = new A(), this.strm.avail_out = 0;
    var N = l.deflateInit2(
      this.strm,
      e.level,
      e.method,
      e.windowBits,
      e.memLevel,
      e.strategy
    );
    if (N !== B)
      throw new Error(C[N]);
    if (e.header && l.deflateSetHeader(this.strm, e.header), e.dictionary) {
      var w;
      if (typeof e.dictionary == "string" ? w = g.string2buf(e.dictionary) : d.call(e.dictionary) === "[object ArrayBuffer]" ? w = new Uint8Array(e.dictionary) : w = e.dictionary, N = l.deflateSetDictionary(this.strm, w), N !== B)
        throw new Error(C[N]);
      this._dict_set = !0;
    }
  }
  W.prototype.push = function(m, e) {
    var N = this.strm, w = this.options.chunkSize, S, Y;
    if (this.ended)
      return !1;
    Y = e === ~~e ? e : e === !0 ? i : Z, typeof m == "string" ? N.input = g.string2buf(m) : d.call(m) === "[object ArrayBuffer]" ? N.input = new Uint8Array(m) : N.input = m, N.next_in = 0, N.avail_in = N.input.length;
    do {
      if (N.avail_out === 0 && (N.output = new I.Buf8(w), N.next_out = 0, N.avail_out = w), S = l.deflate(N, Y), S !== F && S !== B)
        return this.onEnd(S), this.ended = !0, !1;
      (N.avail_out === 0 || N.avail_in === 0 && (Y === i || Y === s)) && (this.options.to === "string" ? this.onData(g.buf2binstring(I.shrinkBuf(N.output, N.next_out))) : this.onData(I.shrinkBuf(N.output, N.next_out)));
    } while ((N.avail_in > 0 || N.avail_out === 0) && S !== F);
    return Y === i ? (S = l.deflateEnd(this.strm), this.onEnd(S), this.ended = !0, S === B) : (Y === s && (this.onEnd(B), N.avail_out = 0), !0);
  }, W.prototype.onData = function(m) {
    this.chunks.push(m);
  }, W.prototype.onEnd = function(m) {
    m === B && (this.options.to === "string" ? this.result = this.chunks.join("") : this.result = I.flattenChunks(this.chunks)), this.chunks = [], this.err = m, this.msg = this.strm.msg;
  };
  function R(m, e) {
    var N = new W(e);
    if (N.push(m, !0), N.err)
      throw N.msg || C[N.err];
    return N.result;
  }
  function U(m, e) {
    return e = e || {}, e.raw = !0, R(m, e);
  }
  function n(m, e) {
    return e = e || {}, e.gzip = !0, R(m, e);
  }
  return tA.Deflate = W, tA.deflate = R, tA.deflateRaw = U, tA.gzip = n, tA;
}
var NA = {}, IC = {}, a0, wi;
function $G() {
  if (wi) return a0;
  wi = 1;
  var l = 30, I = 12;
  return a0 = function(C, A) {
    var d, Z, i, B, F, s, c, G, V, W, R, U, n, m, e, N, w, S, Y, M, y, r, z, E, X;
    d = C.state, Z = C.next_in, E = C.input, i = Z + (C.avail_in - 5), B = C.next_out, X = C.output, F = B - (A - C.avail_out), s = B + (C.avail_out - 257), c = d.dmax, G = d.wsize, V = d.whave, W = d.wnext, R = d.window, U = d.hold, n = d.bits, m = d.lencode, e = d.distcode, N = (1 << d.lenbits) - 1, w = (1 << d.distbits) - 1;
    I:
      do {
        n < 15 && (U += E[Z++] << n, n += 8, U += E[Z++] << n, n += 8), S = m[U & N];
        g:
          for (; ; ) {
            if (Y = S >>> 24, U >>>= Y, n -= Y, Y = S >>> 16 & 255, Y === 0)
              X[B++] = S & 65535;
            else if (Y & 16) {
              M = S & 65535, Y &= 15, Y && (n < Y && (U += E[Z++] << n, n += 8), M += U & (1 << Y) - 1, U >>>= Y, n -= Y), n < 15 && (U += E[Z++] << n, n += 8, U += E[Z++] << n, n += 8), S = e[U & w];
              C:
                for (; ; ) {
                  if (Y = S >>> 24, U >>>= Y, n -= Y, Y = S >>> 16 & 255, Y & 16) {
                    if (y = S & 65535, Y &= 15, n < Y && (U += E[Z++] << n, n += 8, n < Y && (U += E[Z++] << n, n += 8)), y += U & (1 << Y) - 1, y > c) {
                      C.msg = "invalid distance too far back", d.mode = l;
                      break I;
                    }
                    if (U >>>= Y, n -= Y, Y = B - F, y > Y) {
                      if (Y = y - Y, Y > V && d.sane) {
                        C.msg = "invalid distance too far back", d.mode = l;
                        break I;
                      }
                      if (r = 0, z = R, W === 0) {
                        if (r += G - Y, Y < M) {
                          M -= Y;
                          do
                            X[B++] = R[r++];
                          while (--Y);
                          r = B - y, z = X;
                        }
                      } else if (W < Y) {
                        if (r += G + W - Y, Y -= W, Y < M) {
                          M -= Y;
                          do
                            X[B++] = R[r++];
                          while (--Y);
                          if (r = 0, W < M) {
                            Y = W, M -= Y;
                            do
                              X[B++] = R[r++];
                            while (--Y);
                            r = B - y, z = X;
                          }
                        }
                      } else if (r += W - Y, Y < M) {
                        M -= Y;
                        do
                          X[B++] = R[r++];
                        while (--Y);
                        r = B - y, z = X;
                      }
                      for (; M > 2; )
                        X[B++] = z[r++], X[B++] = z[r++], X[B++] = z[r++], M -= 3;
                      M && (X[B++] = z[r++], M > 1 && (X[B++] = z[r++]));
                    } else {
                      r = B - y;
                      do
                        X[B++] = X[r++], X[B++] = X[r++], X[B++] = X[r++], M -= 3;
                      while (M > 2);
                      M && (X[B++] = X[r++], M > 1 && (X[B++] = X[r++]));
                    }
                  } else if (Y & 64) {
                    C.msg = "invalid distance code", d.mode = l;
                    break I;
                  } else {
                    S = e[(S & 65535) + (U & (1 << Y) - 1)];
                    continue C;
                  }
                  break;
                }
            } else if (Y & 64)
              if (Y & 32) {
                d.mode = I;
                break I;
              } else {
                C.msg = "invalid literal/length code", d.mode = l;
                break I;
              }
            else {
              S = m[(S & 65535) + (U & (1 << Y) - 1)];
              continue g;
            }
            break;
          }
      } while (Z < i && B < s);
    M = n >> 3, Z -= M, n -= M << 3, U &= (1 << n) - 1, C.next_in = Z, C.next_out = B, C.avail_in = Z < i ? 5 + (i - Z) : 5 - (Z - i), C.avail_out = B < s ? 257 + (s - B) : 257 - (B - s), d.hold = U, d.bits = n;
  }, a0;
}
var o0, Yi;
function IV() {
  if (Yi) return o0;
  Yi = 1;
  var l = $C(), I = 15, g = 852, C = 592, A = 0, d = 1, Z = 2, i = [
    /* Length codes 257..285 base */
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    13,
    15,
    17,
    19,
    23,
    27,
    31,
    35,
    43,
    51,
    59,
    67,
    83,
    99,
    115,
    131,
    163,
    195,
    227,
    258,
    0,
    0
  ], B = [
    /* Length codes 257..285 extra */
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    16,
    17,
    17,
    17,
    17,
    18,
    18,
    18,
    18,
    19,
    19,
    19,
    19,
    20,
    20,
    20,
    20,
    21,
    21,
    21,
    21,
    16,
    72,
    78
  ], F = [
    /* Distance codes 0..29 base */
    1,
    2,
    3,
    4,
    5,
    7,
    9,
    13,
    17,
    25,
    33,
    49,
    65,
    97,
    129,
    193,
    257,
    385,
    513,
    769,
    1025,
    1537,
    2049,
    3073,
    4097,
    6145,
    8193,
    12289,
    16385,
    24577,
    0,
    0
  ], s = [
    /* Distance codes 0..29 extra */
    16,
    16,
    16,
    16,
    17,
    17,
    18,
    18,
    19,
    19,
    20,
    20,
    21,
    21,
    22,
    22,
    23,
    23,
    24,
    24,
    25,
    25,
    26,
    26,
    27,
    27,
    28,
    28,
    29,
    29,
    64,
    64
  ];
  return o0 = function(G, V, W, R, U, n, m, e) {
    var N = e.bits, w = 0, S = 0, Y = 0, M = 0, y = 0, r = 0, z = 0, E = 0, X = 0, O = 0, _, p, T, UI, sI, jI = null, SI = 0, aI, eI = new l.Buf16(I + 1), zI = new l.Buf16(I + 1), fI = null, bI = 0, BI, AI, Ag;
    for (w = 0; w <= I; w++)
      eI[w] = 0;
    for (S = 0; S < R; S++)
      eI[V[W + S]]++;
    for (y = N, M = I; M >= 1 && eI[M] === 0; M--)
      ;
    if (y > M && (y = M), M === 0)
      return U[n++] = 1 << 24 | 64 << 16 | 0, U[n++] = 1 << 24 | 64 << 16 | 0, e.bits = 1, 0;
    for (Y = 1; Y < M && eI[Y] === 0; Y++)
      ;
    for (y < Y && (y = Y), E = 1, w = 1; w <= I; w++)
      if (E <<= 1, E -= eI[w], E < 0)
        return -1;
    if (E > 0 && (G === A || M !== 1))
      return -1;
    for (zI[1] = 0, w = 1; w < I; w++)
      zI[w + 1] = zI[w] + eI[w];
    for (S = 0; S < R; S++)
      V[W + S] !== 0 && (m[zI[V[W + S]]++] = S);
    if (G === A ? (jI = fI = m, aI = 19) : G === d ? (jI = i, SI -= 257, fI = B, bI -= 257, aI = 256) : (jI = F, fI = s, aI = -1), O = 0, S = 0, w = Y, sI = n, r = y, z = 0, T = -1, X = 1 << y, UI = X - 1, G === d && X > g || G === Z && X > C)
      return 1;
    for (; ; ) {
      BI = w - z, m[S] < aI ? (AI = 0, Ag = m[S]) : m[S] > aI ? (AI = fI[bI + m[S]], Ag = jI[SI + m[S]]) : (AI = 96, Ag = 0), _ = 1 << w - z, p = 1 << r, Y = p;
      do
        p -= _, U[sI + (O >> z) + p] = BI << 24 | AI << 16 | Ag | 0;
      while (p !== 0);
      for (_ = 1 << w - 1; O & _; )
        _ >>= 1;
      if (_ !== 0 ? (O &= _ - 1, O += _) : O = 0, S++, --eI[w] === 0) {
        if (w === M)
          break;
        w = V[W + m[S]];
      }
      if (w > y && (O & UI) !== T) {
        for (z === 0 && (z = y), sI += Y, r = w - z, E = 1 << r; r + z < M && (E -= eI[r + z], !(E <= 0)); )
          r++, E <<= 1;
        if (X += 1 << r, G === d && X > g || G === Z && X > C)
          return 1;
        T = O & UI, U[T] = y << 24 | r << 16 | sI - n | 0;
      }
    }
    return O !== 0 && (U[sI + O] = w - z << 24 | 64 << 16 | 0), e.bits = y, 0;
  }, o0;
}
var Si;
function gV() {
  if (Si) return IC;
  Si = 1;
  var l = $C(), I = $B(), g = IF(), C = $G(), A = IV(), d = 0, Z = 1, i = 2, B = 4, F = 5, s = 6, c = 0, G = 1, V = 2, W = -2, R = -3, U = -4, n = -5, m = 8, e = 1, N = 2, w = 3, S = 4, Y = 5, M = 6, y = 7, r = 8, z = 9, E = 10, X = 11, O = 12, _ = 13, p = 14, T = 15, UI = 16, sI = 17, jI = 18, SI = 19, aI = 20, eI = 21, zI = 22, fI = 23, bI = 24, BI = 25, AI = 26, Ag = 27, ng = 28, Og = 29, PI = 30, Xg = 31, CA = 32, fg = 852, zg = 592, Ig = 15, MI = Ig;
  function Pg(D) {
    return (D >>> 24 & 255) + (D >>> 8 & 65280) + ((D & 65280) << 8) + ((D & 255) << 24);
  }
  function aA() {
    this.mode = 0, this.last = !1, this.wrap = 0, this.havedict = !1, this.flags = 0, this.dmax = 0, this.check = 0, this.total = 0, this.head = null, this.wbits = 0, this.wsize = 0, this.whave = 0, this.wnext = 0, this.window = null, this.hold = 0, this.bits = 0, this.length = 0, this.offset = 0, this.extra = 0, this.lencode = null, this.distcode = null, this.lenbits = 0, this.distbits = 0, this.ncode = 0, this.nlen = 0, this.ndist = 0, this.have = 0, this.next = null, this.lens = new l.Buf16(320), this.work = new l.Buf16(288), this.lendyn = null, this.distdyn = null, this.sane = 0, this.back = 0, this.was = 0;
  }
  function HC(D) {
    var L;
    return !D || !D.state ? W : (L = D.state, D.total_in = D.total_out = L.total = 0, D.msg = "", L.wrap && (D.adler = L.wrap & 1), L.mode = e, L.last = 0, L.havedict = 0, L.dmax = 32768, L.head = null, L.hold = 0, L.bits = 0, L.lencode = L.lendyn = new l.Buf32(fg), L.distcode = L.distdyn = new l.Buf32(zg), L.sane = 1, L.back = -1, c);
  }
  function qg(D) {
    var L;
    return !D || !D.state ? W : (L = D.state, L.wsize = 0, L.whave = 0, L.wnext = 0, HC(D));
  }
  function oA(D, L) {
    var a, x;
    return !D || !D.state || (x = D.state, L < 0 ? (a = 0, L = -L) : (a = (L >> 4) + 1, L < 48 && (L &= 15)), L && (L < 8 || L > 15)) ? W : (x.window !== null && x.wbits !== L && (x.window = null), x.wrap = a, x.wbits = L, qg(D));
  }
  function pC(D, L) {
    var a, x;
    return D ? (x = new aA(), D.state = x, x.window = null, a = oA(D, L), a !== c && (D.state = null), a) : W;
  }
  function sC(D) {
    return pC(D, MI);
  }
  var eA = !0, kC, Qg;
  function nC(D) {
    if (eA) {
      var L;
      for (kC = new l.Buf32(512), Qg = new l.Buf32(32), L = 0; L < 144; )
        D.lens[L++] = 8;
      for (; L < 256; )
        D.lens[L++] = 9;
      for (; L < 280; )
        D.lens[L++] = 7;
      for (; L < 288; )
        D.lens[L++] = 8;
      for (A(Z, D.lens, 0, 288, kC, 0, D.work, { bits: 9 }), L = 0; L < 32; )
        D.lens[L++] = 5;
      A(i, D.lens, 0, 32, Qg, 0, D.work, { bits: 5 }), eA = !1;
    }
    D.lencode = kC, D.lenbits = 9, D.distcode = Qg, D.distbits = 5;
  }
  function mA(D, L, a, x) {
    var GI, b = D.state;
    return b.window === null && (b.wsize = 1 << b.wbits, b.wnext = 0, b.whave = 0, b.window = new l.Buf8(b.wsize)), x >= b.wsize ? (l.arraySet(b.window, L, a - b.wsize, b.wsize, 0), b.wnext = 0, b.whave = b.wsize) : (GI = b.wsize - b.wnext, GI > x && (GI = x), l.arraySet(b.window, L, a - x, GI, b.wnext), x -= GI, x ? (l.arraySet(b.window, L, a - x, x, 0), b.wnext = x, b.whave = b.wsize) : (b.wnext += GI, b.wnext === b.wsize && (b.wnext = 0), b.whave < b.wsize && (b.whave += GI))), 0;
  }
  function h(D, L) {
    var a, x, GI, b, k, K, o, J, H, lI, $, II, rI, tC, Cg = 0, TI, sg, tg, Hg, Tl, Ll, Zg, _g, eg = new l.Buf8(4), NC, UC, KZ = (
      /* permutation of code lengths */
      [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]
    );
    if (!D || !D.state || !D.output || !D.input && D.avail_in !== 0)
      return W;
    a = D.state, a.mode === O && (a.mode = _), k = D.next_out, GI = D.output, o = D.avail_out, b = D.next_in, x = D.input, K = D.avail_in, J = a.hold, H = a.bits, lI = K, $ = o, _g = c;
    I:
      for (; ; )
        switch (a.mode) {
          case e:
            if (a.wrap === 0) {
              a.mode = _;
              break;
            }
            for (; H < 16; ) {
              if (K === 0)
                break I;
              K--, J += x[b++] << H, H += 8;
            }
            if (a.wrap & 2 && J === 35615) {
              a.check = 0, eg[0] = J & 255, eg[1] = J >>> 8 & 255, a.check = g(a.check, eg, 2, 0), J = 0, H = 0, a.mode = N;
              break;
            }
            if (a.flags = 0, a.head && (a.head.done = !1), !(a.wrap & 1) || /* check if zlib header allowed */
            (((J & 255) << 8) + (J >> 8)) % 31) {
              D.msg = "incorrect header check", a.mode = PI;
              break;
            }
            if ((J & 15) !== m) {
              D.msg = "unknown compression method", a.mode = PI;
              break;
            }
            if (J >>>= 4, H -= 4, Zg = (J & 15) + 8, a.wbits === 0)
              a.wbits = Zg;
            else if (Zg > a.wbits) {
              D.msg = "invalid window size", a.mode = PI;
              break;
            }
            a.dmax = 1 << Zg, D.adler = a.check = 1, a.mode = J & 512 ? E : O, J = 0, H = 0;
            break;
          case N:
            for (; H < 16; ) {
              if (K === 0)
                break I;
              K--, J += x[b++] << H, H += 8;
            }
            if (a.flags = J, (a.flags & 255) !== m) {
              D.msg = "unknown compression method", a.mode = PI;
              break;
            }
            if (a.flags & 57344) {
              D.msg = "unknown header flags set", a.mode = PI;
              break;
            }
            a.head && (a.head.text = J >> 8 & 1), a.flags & 512 && (eg[0] = J & 255, eg[1] = J >>> 8 & 255, a.check = g(a.check, eg, 2, 0)), J = 0, H = 0, a.mode = w;
          /* falls through */
          case w:
            for (; H < 32; ) {
              if (K === 0)
                break I;
              K--, J += x[b++] << H, H += 8;
            }
            a.head && (a.head.time = J), a.flags & 512 && (eg[0] = J & 255, eg[1] = J >>> 8 & 255, eg[2] = J >>> 16 & 255, eg[3] = J >>> 24 & 255, a.check = g(a.check, eg, 4, 0)), J = 0, H = 0, a.mode = S;
          /* falls through */
          case S:
            for (; H < 16; ) {
              if (K === 0)
                break I;
              K--, J += x[b++] << H, H += 8;
            }
            a.head && (a.head.xflags = J & 255, a.head.os = J >> 8), a.flags & 512 && (eg[0] = J & 255, eg[1] = J >>> 8 & 255, a.check = g(a.check, eg, 2, 0)), J = 0, H = 0, a.mode = Y;
          /* falls through */
          case Y:
            if (a.flags & 1024) {
              for (; H < 16; ) {
                if (K === 0)
                  break I;
                K--, J += x[b++] << H, H += 8;
              }
              a.length = J, a.head && (a.head.extra_len = J), a.flags & 512 && (eg[0] = J & 255, eg[1] = J >>> 8 & 255, a.check = g(a.check, eg, 2, 0)), J = 0, H = 0;
            } else a.head && (a.head.extra = null);
            a.mode = M;
          /* falls through */
          case M:
            if (a.flags & 1024 && (II = a.length, II > K && (II = K), II && (a.head && (Zg = a.head.extra_len - a.length, a.head.extra || (a.head.extra = new Array(a.head.extra_len)), l.arraySet(
              a.head.extra,
              x,
              b,
              // extra field is limited to 65536 bytes
              // - no need for additional size check
              II,
              /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/
              Zg
            )), a.flags & 512 && (a.check = g(a.check, x, II, b)), K -= II, b += II, a.length -= II), a.length))
              break I;
            a.length = 0, a.mode = y;
          /* falls through */
          case y:
            if (a.flags & 2048) {
              if (K === 0)
                break I;
              II = 0;
              do
                Zg = x[b + II++], a.head && Zg && a.length < 65536 && (a.head.name += String.fromCharCode(Zg));
              while (Zg && II < K);
              if (a.flags & 512 && (a.check = g(a.check, x, II, b)), K -= II, b += II, Zg)
                break I;
            } else a.head && (a.head.name = null);
            a.length = 0, a.mode = r;
          /* falls through */
          case r:
            if (a.flags & 4096) {
              if (K === 0)
                break I;
              II = 0;
              do
                Zg = x[b + II++], a.head && Zg && a.length < 65536 && (a.head.comment += String.fromCharCode(Zg));
              while (Zg && II < K);
              if (a.flags & 512 && (a.check = g(a.check, x, II, b)), K -= II, b += II, Zg)
                break I;
            } else a.head && (a.head.comment = null);
            a.mode = z;
          /* falls through */
          case z:
            if (a.flags & 512) {
              for (; H < 16; ) {
                if (K === 0)
                  break I;
                K--, J += x[b++] << H, H += 8;
              }
              if (J !== (a.check & 65535)) {
                D.msg = "header crc mismatch", a.mode = PI;
                break;
              }
              J = 0, H = 0;
            }
            a.head && (a.head.hcrc = a.flags >> 9 & 1, a.head.done = !0), D.adler = a.check = 0, a.mode = O;
            break;
          case E:
            for (; H < 32; ) {
              if (K === 0)
                break I;
              K--, J += x[b++] << H, H += 8;
            }
            D.adler = a.check = Pg(J), J = 0, H = 0, a.mode = X;
          /* falls through */
          case X:
            if (a.havedict === 0)
              return D.next_out = k, D.avail_out = o, D.next_in = b, D.avail_in = K, a.hold = J, a.bits = H, V;
            D.adler = a.check = 1, a.mode = O;
          /* falls through */
          case O:
            if (L === F || L === s)
              break I;
          /* falls through */
          case _:
            if (a.last) {
              J >>>= H & 7, H -= H & 7, a.mode = Ag;
              break;
            }
            for (; H < 3; ) {
              if (K === 0)
                break I;
              K--, J += x[b++] << H, H += 8;
            }
            switch (a.last = J & 1, J >>>= 1, H -= 1, J & 3) {
              case 0:
                a.mode = p;
                break;
              case 1:
                if (nC(a), a.mode = aI, L === s) {
                  J >>>= 2, H -= 2;
                  break I;
                }
                break;
              case 2:
                a.mode = sI;
                break;
              case 3:
                D.msg = "invalid block type", a.mode = PI;
            }
            J >>>= 2, H -= 2;
            break;
          case p:
            for (J >>>= H & 7, H -= H & 7; H < 32; ) {
              if (K === 0)
                break I;
              K--, J += x[b++] << H, H += 8;
            }
            if ((J & 65535) !== (J >>> 16 ^ 65535)) {
              D.msg = "invalid stored block lengths", a.mode = PI;
              break;
            }
            if (a.length = J & 65535, J = 0, H = 0, a.mode = T, L === s)
              break I;
          /* falls through */
          case T:
            a.mode = UI;
          /* falls through */
          case UI:
            if (II = a.length, II) {
              if (II > K && (II = K), II > o && (II = o), II === 0)
                break I;
              l.arraySet(GI, x, b, II, k), K -= II, b += II, o -= II, k += II, a.length -= II;
              break;
            }
            a.mode = O;
            break;
          case sI:
            for (; H < 14; ) {
              if (K === 0)
                break I;
              K--, J += x[b++] << H, H += 8;
            }
            if (a.nlen = (J & 31) + 257, J >>>= 5, H -= 5, a.ndist = (J & 31) + 1, J >>>= 5, H -= 5, a.ncode = (J & 15) + 4, J >>>= 4, H -= 4, a.nlen > 286 || a.ndist > 30) {
              D.msg = "too many length or distance symbols", a.mode = PI;
              break;
            }
            a.have = 0, a.mode = jI;
          /* falls through */
          case jI:
            for (; a.have < a.ncode; ) {
              for (; H < 3; ) {
                if (K === 0)
                  break I;
                K--, J += x[b++] << H, H += 8;
              }
              a.lens[KZ[a.have++]] = J & 7, J >>>= 3, H -= 3;
            }
            for (; a.have < 19; )
              a.lens[KZ[a.have++]] = 0;
            if (a.lencode = a.lendyn, a.lenbits = 7, NC = { bits: a.lenbits }, _g = A(d, a.lens, 0, 19, a.lencode, 0, a.work, NC), a.lenbits = NC.bits, _g) {
              D.msg = "invalid code lengths set", a.mode = PI;
              break;
            }
            a.have = 0, a.mode = SI;
          /* falls through */
          case SI:
            for (; a.have < a.nlen + a.ndist; ) {
              for (; Cg = a.lencode[J & (1 << a.lenbits) - 1], TI = Cg >>> 24, sg = Cg >>> 16 & 255, tg = Cg & 65535, !(TI <= H); ) {
                if (K === 0)
                  break I;
                K--, J += x[b++] << H, H += 8;
              }
              if (tg < 16)
                J >>>= TI, H -= TI, a.lens[a.have++] = tg;
              else {
                if (tg === 16) {
                  for (UC = TI + 2; H < UC; ) {
                    if (K === 0)
                      break I;
                    K--, J += x[b++] << H, H += 8;
                  }
                  if (J >>>= TI, H -= TI, a.have === 0) {
                    D.msg = "invalid bit length repeat", a.mode = PI;
                    break;
                  }
                  Zg = a.lens[a.have - 1], II = 3 + (J & 3), J >>>= 2, H -= 2;
                } else if (tg === 17) {
                  for (UC = TI + 3; H < UC; ) {
                    if (K === 0)
                      break I;
                    K--, J += x[b++] << H, H += 8;
                  }
                  J >>>= TI, H -= TI, Zg = 0, II = 3 + (J & 7), J >>>= 3, H -= 3;
                } else {
                  for (UC = TI + 7; H < UC; ) {
                    if (K === 0)
                      break I;
                    K--, J += x[b++] << H, H += 8;
                  }
                  J >>>= TI, H -= TI, Zg = 0, II = 11 + (J & 127), J >>>= 7, H -= 7;
                }
                if (a.have + II > a.nlen + a.ndist) {
                  D.msg = "invalid bit length repeat", a.mode = PI;
                  break;
                }
                for (; II--; )
                  a.lens[a.have++] = Zg;
              }
            }
            if (a.mode === PI)
              break;
            if (a.lens[256] === 0) {
              D.msg = "invalid code -- missing end-of-block", a.mode = PI;
              break;
            }
            if (a.lenbits = 9, NC = { bits: a.lenbits }, _g = A(Z, a.lens, 0, a.nlen, a.lencode, 0, a.work, NC), a.lenbits = NC.bits, _g) {
              D.msg = "invalid literal/lengths set", a.mode = PI;
              break;
            }
            if (a.distbits = 6, a.distcode = a.distdyn, NC = { bits: a.distbits }, _g = A(i, a.lens, a.nlen, a.ndist, a.distcode, 0, a.work, NC), a.distbits = NC.bits, _g) {
              D.msg = "invalid distances set", a.mode = PI;
              break;
            }
            if (a.mode = aI, L === s)
              break I;
          /* falls through */
          case aI:
            a.mode = eI;
          /* falls through */
          case eI:
            if (K >= 6 && o >= 258) {
              D.next_out = k, D.avail_out = o, D.next_in = b, D.avail_in = K, a.hold = J, a.bits = H, C(D, $), k = D.next_out, GI = D.output, o = D.avail_out, b = D.next_in, x = D.input, K = D.avail_in, J = a.hold, H = a.bits, a.mode === O && (a.back = -1);
              break;
            }
            for (a.back = 0; Cg = a.lencode[J & (1 << a.lenbits) - 1], TI = Cg >>> 24, sg = Cg >>> 16 & 255, tg = Cg & 65535, !(TI <= H); ) {
              if (K === 0)
                break I;
              K--, J += x[b++] << H, H += 8;
            }
            if (sg && !(sg & 240)) {
              for (Hg = TI, Tl = sg, Ll = tg; Cg = a.lencode[Ll + ((J & (1 << Hg + Tl) - 1) >> Hg)], TI = Cg >>> 24, sg = Cg >>> 16 & 255, tg = Cg & 65535, !(Hg + TI <= H); ) {
                if (K === 0)
                  break I;
                K--, J += x[b++] << H, H += 8;
              }
              J >>>= Hg, H -= Hg, a.back += Hg;
            }
            if (J >>>= TI, H -= TI, a.back += TI, a.length = tg, sg === 0) {
              a.mode = AI;
              break;
            }
            if (sg & 32) {
              a.back = -1, a.mode = O;
              break;
            }
            if (sg & 64) {
              D.msg = "invalid literal/length code", a.mode = PI;
              break;
            }
            a.extra = sg & 15, a.mode = zI;
          /* falls through */
          case zI:
            if (a.extra) {
              for (UC = a.extra; H < UC; ) {
                if (K === 0)
                  break I;
                K--, J += x[b++] << H, H += 8;
              }
              a.length += J & (1 << a.extra) - 1, J >>>= a.extra, H -= a.extra, a.back += a.extra;
            }
            a.was = a.length, a.mode = fI;
          /* falls through */
          case fI:
            for (; Cg = a.distcode[J & (1 << a.distbits) - 1], TI = Cg >>> 24, sg = Cg >>> 16 & 255, tg = Cg & 65535, !(TI <= H); ) {
              if (K === 0)
                break I;
              K--, J += x[b++] << H, H += 8;
            }
            if (!(sg & 240)) {
              for (Hg = TI, Tl = sg, Ll = tg; Cg = a.distcode[Ll + ((J & (1 << Hg + Tl) - 1) >> Hg)], TI = Cg >>> 24, sg = Cg >>> 16 & 255, tg = Cg & 65535, !(Hg + TI <= H); ) {
                if (K === 0)
                  break I;
                K--, J += x[b++] << H, H += 8;
              }
              J >>>= Hg, H -= Hg, a.back += Hg;
            }
            if (J >>>= TI, H -= TI, a.back += TI, sg & 64) {
              D.msg = "invalid distance code", a.mode = PI;
              break;
            }
            a.offset = tg, a.extra = sg & 15, a.mode = bI;
          /* falls through */
          case bI:
            if (a.extra) {
              for (UC = a.extra; H < UC; ) {
                if (K === 0)
                  break I;
                K--, J += x[b++] << H, H += 8;
              }
              a.offset += J & (1 << a.extra) - 1, J >>>= a.extra, H -= a.extra, a.back += a.extra;
            }
            if (a.offset > a.dmax) {
              D.msg = "invalid distance too far back", a.mode = PI;
              break;
            }
            a.mode = BI;
          /* falls through */
          case BI:
            if (o === 0)
              break I;
            if (II = $ - o, a.offset > II) {
              if (II = a.offset - II, II > a.whave && a.sane) {
                D.msg = "invalid distance too far back", a.mode = PI;
                break;
              }
              II > a.wnext ? (II -= a.wnext, rI = a.wsize - II) : rI = a.wnext - II, II > a.length && (II = a.length), tC = a.window;
            } else
              tC = GI, rI = k - a.offset, II = a.length;
            II > o && (II = o), o -= II, a.length -= II;
            do
              GI[k++] = tC[rI++];
            while (--II);
            a.length === 0 && (a.mode = eI);
            break;
          case AI:
            if (o === 0)
              break I;
            GI[k++] = a.length, o--, a.mode = eI;
            break;
          case Ag:
            if (a.wrap) {
              for (; H < 32; ) {
                if (K === 0)
                  break I;
                K--, J |= x[b++] << H, H += 8;
              }
              if ($ -= o, D.total_out += $, a.total += $, $ && (D.adler = a.check = /*UPDATE(state.check, put - _out, _out);*/
              a.flags ? g(a.check, GI, $, k - $) : I(a.check, GI, $, k - $)), $ = o, (a.flags ? J : Pg(J)) !== a.check) {
                D.msg = "incorrect data check", a.mode = PI;
                break;
              }
              J = 0, H = 0;
            }
            a.mode = ng;
          /* falls through */
          case ng:
            if (a.wrap && a.flags) {
              for (; H < 32; ) {
                if (K === 0)
                  break I;
                K--, J += x[b++] << H, H += 8;
              }
              if (J !== (a.total & 4294967295)) {
                D.msg = "incorrect length check", a.mode = PI;
                break;
              }
              J = 0, H = 0;
            }
            a.mode = Og;
          /* falls through */
          case Og:
            _g = G;
            break I;
          case PI:
            _g = R;
            break I;
          case Xg:
            return U;
          case CA:
          /* falls through */
          default:
            return W;
        }
    return D.next_out = k, D.avail_out = o, D.next_in = b, D.avail_in = K, a.hold = J, a.bits = H, (a.wsize || $ !== D.avail_out && a.mode < PI && (a.mode < Ag || L !== B)) && mA(D, D.output, D.next_out, $ - D.avail_out), lI -= D.avail_in, $ -= D.avail_out, D.total_in += lI, D.total_out += $, a.total += $, a.wrap && $ && (D.adler = a.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/
    a.flags ? g(a.check, GI, $, D.next_out - $) : I(a.check, GI, $, D.next_out - $)), D.data_type = a.bits + (a.last ? 64 : 0) + (a.mode === O ? 128 : 0) + (a.mode === aI || a.mode === T ? 256 : 0), (lI === 0 && $ === 0 || L === B) && _g === c && (_g = n), _g;
  }
  function v(D) {
    if (!D || !D.state)
      return W;
    var L = D.state;
    return L.window && (L.window = null), D.state = null, c;
  }
  function P(D, L) {
    var a;
    return !D || !D.state || (a = D.state, !(a.wrap & 2)) ? W : (a.head = L, L.done = !1, c);
  }
  function gI(D, L) {
    var a = L.length, x, GI, b;
    return !D || !D.state || (x = D.state, x.wrap !== 0 && x.mode !== X) ? W : x.mode === X && (GI = 1, GI = I(GI, L, a, 0), GI !== x.check) ? R : (b = mA(D, L, a, a), b ? (x.mode = Xg, U) : (x.havedict = 1, c));
  }
  return IC.inflateReset = qg, IC.inflateReset2 = oA, IC.inflateResetKeep = HC, IC.inflateInit = sC, IC.inflateInit2 = pC, IC.inflate = h, IC.inflateEnd = v, IC.inflateGetHeader = P, IC.inflateSetDictionary = gI, IC.inflateInfo = "pako inflate (from Nodeca project)", IC;
}
var e0, Ji;
function AF() {
  return Ji || (Ji = 1, e0 = {
    /* Allowed flush values; see deflate() and inflate() below for details */
    Z_NO_FLUSH: 0,
    Z_PARTIAL_FLUSH: 1,
    Z_SYNC_FLUSH: 2,
    Z_FULL_FLUSH: 3,
    Z_FINISH: 4,
    Z_BLOCK: 5,
    Z_TREES: 6,
    /* Return codes for the compression/decompression functions. Negative values
    * are errors, positive values are used for special but normal events.
    */
    Z_OK: 0,
    Z_STREAM_END: 1,
    Z_NEED_DICT: 2,
    Z_ERRNO: -1,
    Z_STREAM_ERROR: -2,
    Z_DATA_ERROR: -3,
    //Z_MEM_ERROR:     -4,
    Z_BUF_ERROR: -5,
    //Z_VERSION_ERROR: -6,
    /* compression levels */
    Z_NO_COMPRESSION: 0,
    Z_BEST_SPEED: 1,
    Z_BEST_COMPRESSION: 9,
    Z_DEFAULT_COMPRESSION: -1,
    Z_FILTERED: 1,
    Z_HUFFMAN_ONLY: 2,
    Z_RLE: 3,
    Z_FIXED: 4,
    Z_DEFAULT_STRATEGY: 0,
    /* Possible values of the data_type field (though see inflate()) */
    Z_BINARY: 0,
    Z_TEXT: 1,
    //Z_ASCII:                1, // = Z_TEXT (deprecated)
    Z_UNKNOWN: 2,
    /* The deflate compression method */
    Z_DEFLATED: 8
    //Z_NULL:                 null // Use -1 or null inline, depending on var type
  }), e0;
}
var m0, Di;
function CV() {
  if (Di) return m0;
  Di = 1;
  function l() {
    this.text = 0, this.time = 0, this.xflags = 0, this.os = 0, this.extra = null, this.extra_len = 0, this.name = "", this.comment = "", this.hcrc = 0, this.done = !1;
  }
  return m0 = l, m0;
}
var ui;
function AV() {
  if (ui) return NA;
  ui = 1;
  var l = gV(), I = $C(), g = gF(), C = AF(), A = nZ(), d = CF(), Z = CV(), i = Object.prototype.toString;
  function B(c) {
    if (!(this instanceof B)) return new B(c);
    this.options = I.assign({
      chunkSize: 16384,
      windowBits: 0,
      to: ""
    }, c || {});
    var G = this.options;
    G.raw && G.windowBits >= 0 && G.windowBits < 16 && (G.windowBits = -G.windowBits, G.windowBits === 0 && (G.windowBits = -15)), G.windowBits >= 0 && G.windowBits < 16 && !(c && c.windowBits) && (G.windowBits += 32), G.windowBits > 15 && G.windowBits < 48 && (G.windowBits & 15 || (G.windowBits |= 15)), this.err = 0, this.msg = "", this.ended = !1, this.chunks = [], this.strm = new d(), this.strm.avail_out = 0;
    var V = l.inflateInit2(
      this.strm,
      G.windowBits
    );
    if (V !== C.Z_OK)
      throw new Error(A[V]);
    if (this.header = new Z(), l.inflateGetHeader(this.strm, this.header), G.dictionary && (typeof G.dictionary == "string" ? G.dictionary = g.string2buf(G.dictionary) : i.call(G.dictionary) === "[object ArrayBuffer]" && (G.dictionary = new Uint8Array(G.dictionary)), G.raw && (V = l.inflateSetDictionary(this.strm, G.dictionary), V !== C.Z_OK)))
      throw new Error(A[V]);
  }
  B.prototype.push = function(c, G) {
    var V = this.strm, W = this.options.chunkSize, R = this.options.dictionary, U, n, m, e, N, w = !1;
    if (this.ended)
      return !1;
    n = G === ~~G ? G : G === !0 ? C.Z_FINISH : C.Z_NO_FLUSH, typeof c == "string" ? V.input = g.binstring2buf(c) : i.call(c) === "[object ArrayBuffer]" ? V.input = new Uint8Array(c) : V.input = c, V.next_in = 0, V.avail_in = V.input.length;
    do {
      if (V.avail_out === 0 && (V.output = new I.Buf8(W), V.next_out = 0, V.avail_out = W), U = l.inflate(V, C.Z_NO_FLUSH), U === C.Z_NEED_DICT && R && (U = l.inflateSetDictionary(this.strm, R)), U === C.Z_BUF_ERROR && w === !0 && (U = C.Z_OK, w = !1), U !== C.Z_STREAM_END && U !== C.Z_OK)
        return this.onEnd(U), this.ended = !0, !1;
      V.next_out && (V.avail_out === 0 || U === C.Z_STREAM_END || V.avail_in === 0 && (n === C.Z_FINISH || n === C.Z_SYNC_FLUSH)) && (this.options.to === "string" ? (m = g.utf8border(V.output, V.next_out), e = V.next_out - m, N = g.buf2string(V.output, m), V.next_out = e, V.avail_out = W - e, e && I.arraySet(V.output, V.output, m, e, 0), this.onData(N)) : this.onData(I.shrinkBuf(V.output, V.next_out))), V.avail_in === 0 && V.avail_out === 0 && (w = !0);
    } while ((V.avail_in > 0 || V.avail_out === 0) && U !== C.Z_STREAM_END);
    return U === C.Z_STREAM_END && (n = C.Z_FINISH), n === C.Z_FINISH ? (U = l.inflateEnd(this.strm), this.onEnd(U), this.ended = !0, U === C.Z_OK) : (n === C.Z_SYNC_FLUSH && (this.onEnd(C.Z_OK), V.avail_out = 0), !0);
  }, B.prototype.onData = function(c) {
    this.chunks.push(c);
  }, B.prototype.onEnd = function(c) {
    c === C.Z_OK && (this.options.to === "string" ? this.result = this.chunks.join("") : this.result = I.flattenChunks(this.chunks)), this.chunks = [], this.err = c, this.msg = this.strm.msg;
  };
  function F(c, G) {
    var V = new B(G);
    if (V.push(c, !0), V.err)
      throw V.msg || A[V.err];
    return V.result;
  }
  function s(c, G) {
    return G = G || {}, G.raw = !0, F(c, G);
  }
  return NA.Inflate = B, NA.inflate = F, NA.inflateRaw = s, NA.ungzip = F, NA;
}
var h0, Mi;
function lV() {
  if (Mi) return h0;
  Mi = 1;
  var l = $C().assign, I = _G(), g = AV(), C = AF(), A = {};
  return l(A, I, g, C), h0 = A, h0;
}
var dV = lV();
const Ed = /* @__PURE__ */ fG(dV);
var yi = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", Zl = new Uint8Array(256);
for (var fl = 0; fl < yi.length; fl++)
  Zl[yi.charCodeAt(fl)] = fl;
var ZV = function(l) {
  var I = l.length * 0.75, g = l.length, C, A = 0, d, Z, i, B;
  l[l.length - 1] === "=" && (I--, l[l.length - 2] === "=" && I--);
  var F = new Uint8Array(I);
  for (C = 0; C < g; C += 4)
    d = Zl[l.charCodeAt(C)], Z = Zl[l.charCodeAt(C + 1)], i = Zl[l.charCodeAt(C + 2)], B = Zl[l.charCodeAt(C + 3)], F[A++] = d << 2 | Z >> 4, F[A++] = (Z & 15) << 4 | i >> 2, F[A++] = (i & 3) << 6 | B & 63;
  return F;
}, iV = function(l) {
  for (var I = "", g = 0; g < l.length; g++)
    I += String.fromCharCode(l[g]);
  return I;
}, lF = function(l) {
  return iV(Ed.inflate(ZV(l)));
}, BV = function(l, I, g) {
  for (var C = "", A = 0, d = I - l.length; A < d; A++)
    C += g;
  return C + l;
};
const FV = "eJyFWdtyGjkQ/RVqnnar8Bb4lpg3jEnCxgEvGDtxKg9iphm01oyILrZxKv++mrGd3az6KC8UnNa0+nrUGr5lI11VVLtskF198FaU1Dns9w9OOkf7/ePDrJu90bWbiorCgpH2RpLZO9WqaCReqZ8lnReJqKTa/SwL8DXJctPs9Lxs4oSS+bAuVVjXC7/tG/lAxYV0+SYbOOOpm402wojckVlQ8+T4wVFdUDHXlaifrTs91Q/Z4PNeMLu7t3/U6746POm+7vW/dLNlWGuUrOlCW+mkrrPBXr/X+4/gciPz25qszQbhyeyKjG2XZb3ewR+9Xi/sMdVO5k+ebHemcaHzW/57p3/y+qQbPk967We//TxoP191hoVeUWexs44q25nUuTZbbYSj4o9OZ6hUZ97osZ05WTJ3AQ37jMOqQtblIt9QG7lWycKJuhCmeJGGhSOxffccyqPj/W728eXX4cFJNxvavAmRyQbH++HnGf34vdc/etXNFq54d50NXh+2X6/C137v+CnQH8gZmYdQfP6WXX8MCppQTYMlditCBL53/wfTQ65EFeNfvQ6erlQsqX21akJc1rGs0EoJE+NbMnlToZFAVEFkQ3iABW2uGH3CUK1ojUTgMWEbjfaWeUp5G6N5aCwRw5vddkOM98EVqRlPrBJ2E8OPZHSM6prJkrtnVrqNIWbtOjQrg8o7Zq2VDwxId5x3xMe0lpzBuVaa0WGpkkCkmgaON/3qBVODpaHQiIybXz3ZliTi3DO2D2PoNIZGMXQWQ+MYehNDb2PoXQxNYujPGHofQ+cx9CGGpjE0i6GLGPorhuYxtIihyxhaxtBVDF3H0McY+hRDNzG0CqfQLTmeNlZBBvr0+TnIKbmUuTS5Z1jUN6xtw8nBtEjLb7wxDOesmB5j+JfpIIYLmIZiWC6GZAz9HUMMvTItzESL6VqG9rZMKGOI4QaGXpjY+xi6i6H7GGKYdMeQPl9foBBW3GHark9Vo5OqgEd9oe+ZOPOnc3NcqmZgiUuomehYnt1xZ8daaSPZ8wBoyb0Jx3jOBLBtGyvbiRNOLXw0Sy+DpNKAAhpxq/gXYhD6NdMda6bwwyTH0kwhypI70p5wdhR7Gjia3JEhpvfDLCRKI7YcqYXJnxgv/g3vSthEhNNSEKIfCQByUkpurWQaNXjqNtqjSfHp0OdLOwSAG31E7h03uLRMvlbEtDPoq0rkhqvhlSFu40I7kfP9VoRLFrH+G7YLcypCQLkJ1delML5SwjPb6DIMmQxL54L1gyq+YIfMyKNNsQ4zHj8UnoMDdoZwfoMqkJxX7A6Cj3czWzLdqcC+GuGM9tCa4RobSp5J2gTnk0D5CVA0Pp1RAqn7hC0o5J3kqvkTsGyY6gwBHlqmHtqBh2x77UI9QimVS75PljgMAjXDEljn0QNjvMlZIAju/pF0NH95VcFshSgnB3Ug+LhMkwYoVKOAUS+T2kZIG2DVcYInLXDTQkKUYHelH6kuGcEcbPE26aRPNklKOEQpNcCQHPp6k4jc5UYbRtkM7T4HcVsAvADWLtEGnq/M9t2G9e2Aw8xEM1CCQ4QDWq28cnKrmDHTAwcvgYNh1HJSqEKumdvVDlPDFOwjU8UyTpZZ4tTBohzYUSMaRAmdggBNgKLmzVsYGLjXbyujb6lm70CGSmnB1PsWJHuSYhQfupq/ioxBTRngkEaRuQEP3ICIPb/kAq/Axo6ZUEaQFFSStxwa/eDpiARDND4kqhIE+BG1Btp7hjKCjh6UKYt2xk7MkmMJ8PCMlGNy5XiSdvc6wYjYtIp5pSGBRTo9Z45R6Asw4bQ8HgrYhEJmTFsk6pWvyPfJOj4HiXNGFFQJw1hOCVaYgChNUOGcA6tD0DZCMSdDczMBDa5TFVWDqWn5i/yB+BByqARcGhx6ziqXVD4Ii2TqZmnLi8AS3L8dGqRoBIzwkM0LmXNpOAOKTNKbKciPBvg8XdZJ6RDoHEKO5meuGdDzmOiQMTrt0d63SVfAIDBJtgIwwaUvN7ps8l1r7v0I5lKPRUEV+rcqfaHlDvJH4FSdVBVCjk8IiXp87Jv/Ib90s/dk6gshTfPv8Zfv/wDUfBK2", sV = "eJyFWdtyGjkQ/RVqnnarcAo7vuE3jEnCxgEvGDtxKg9iRgxaa0ZEF9s4lX/fnrGdTVZ9lBcKTmvU96PW8C0bmqqStc9OsqsPwYlSdnaPDvb6naP+3v5+1s3emNpPRCVpwdAEq6TdOTW6mC61+hpksyBo/euCTrOg89MKUSm9/XUNwddSletGcbOcfo+90Cof1KWmdTu7e4S4N+pBFhfK5+vsxNsgu9lwLazIvbRz2Tw7evCyLmQxM5Won809PTUP2cnnnYOj7s7eQa97fNjvHvd2v3SzBS21WtXywjjllakbRb3eT4LLtcpva+lcdkJPZlfSunZZ1uu9ftXr9UjFxHiVP7my2drGh84f+Z+d3f5xv0uf/V77udt+vm4/jzqDwixlZ751XlauM65zYzfGCi+LV53OQOvOrNnHdWbSSXtHKOkZ0apC1eU8X8s2dO0mcy/qQtjiRUoLh2Lz7jmWB4cUto8vv/Zf97vZwOVNhGx2crhHP8/kj987uxShbO6Ld9fZyfF++/WKvu72Dp/i/EF6q3IKxedv2fVH2qAJ1YQscRtBEfje/R8sH3Itqhj/Ggx5utSxpA7VsglxWceywmgtbIxvpM2bio0EoiKRo/AAC9pcMfsJK2stV0gEHhOu2dHdMk/p4GI0p0YTMbzebtaS8Z5cUYbxxGnh1jH8KK2JUVMzWfL3zEq/tpJZu6JuZVB1x6x16oEB5R3nneRjWivO4Nxow+zhZKWASDcNHCv9GgRTg6WV1IiMm8ReriWJOPeM7YMYOo2hYQydxdAoht7E0NsYehdD4xj6K4bex9B5DH2IoUkMTWPoIob+jqFZDM1j6DKGFjF0FUPXMfQxhj7F0E0MLekQupWep40lyUCfPj8HOSVXKlc2DwyLhoa1HZ0cTIu0/MYbw3DOkukxhn+ZDmK4gGkohuViSMXQPzHE0CvTwky0mK5laG/DhDKGGG5g6IWJfYihuxi6jyGGSbcM6fP1BQphyR2m7fpUNXqlC3jUF+aeiTN/OjfHpW4GlriEmoGO5dktd3astLGKPQ/ALnmwdIznTADbtnGqHTnh1MJHswyKJJUBFNCI241/IwahXzHdsWIKnyY5lmYKUZbckfaEs6PY08DR5E5ayfQ+zUKitGLDkRpdASTjxX/hXQqXiHBaCkL0IwFALrVWG6eYRiVP/doENCk+Hfp8aVMAuNFH5MFzg0vL5CstmXYGfVWJ3HI1vLSSU1wYL3K+3wq6ZUnWf8t2YS4LCig3oYa6FDZUWgRGjSlpyGRYOhesH7LiC3bAjDzGFiua8fih8BwcsFOE8woqIrmgWQ2Cj3czWzLdqYFeg3Bmd2pNusVSyTNJG+N8SlB+AhRNSGdUgtR9whYU6k5x1fwJWDZIdYYADy1SD23BQ669dqEekaktF3yfLHAYBGqGBbAuoAdGWMkZEQR3/0g6mr+8qmBUIcrJQR0IPi6TpAEa1Shg1MvkbkO0G2DVUYInHXDTQUJUQLs2j7IuGcEMqHibdDIkmyQlHKCUWmBIDn29SUTucm0ss9kUaZ+BuM0BXgBrF0hB4CuzfbfhQjvgMDPRFJTgAOGAVqugvdpoZswMwMFL4CCNWl4JXagVc7vaYmqYAD0qVSyjZJklTh0syoEdNaJBlNAJCNAYbNS8eaOBgXv9trTmVtbsHcjKUjkw9b4FyR6nGCVQV/NXkRGoKQscMigyN+CBGxCx55dc4BXYyDMTyhCSgk7ylkejHzwdkWCAxodEVYIAP6LWQLqnKCPo6EGZckgzdmKaHEuAh2dSeyZXnidpf28SjIhNq5hXGgpYZNJz5giFvgATTsvjVMCWCpkxbZ6oV74i3yfr+BwkzltRyEpYxnKZYIUxiNIYFc45sJqCthaaORmamwlocJOqqBpMTYvf5A/ERyKHSsCl5NBzVrmk8kGYJ1M3TVteEEtw/3YYkKIhMCJANi9UzqXhDGxkk95MQH4MwGfpsk5KB2DPAeRofuaagn0eEx0yQqc90n2bdAUMAuNkKwATfPpyY8om37Xh3o9gLg1YRFuhf6vSF1ruIH8ETtXJrSjk+IRQqMdHofkf8ks3ey9tfSGUbf49/vL9XxrnGMA=", cV = "eJyFWVtT2zgU/isZP+3OhE5Iy/UtDaHNFhI2IdDS4UGxFUeLbKW6AKHT/77Hhnbb1fnUFw98x9K5fzpyvmZDU1Wy9tlxdnUenChlZ3e//+awc7B32D/Kutmpqf1EVJJeGJpglbQ706VWX4JshEHrX4Wdn4SiUnr7q5jga6nKdaPvXBYqVISMvdAqH9Slpjd3dvuEuFP1KIsL5fN1duxtkN1suBZW5F7auWxWjx69rAtZzEwl6hc73741j9nx553+QXenv9frHr456h729m672YJetVrV8sI45ZWpG0W93k+Cy7XK72rpXHZMK7MraV37WtbrvX7V6/VIxcR4lT87s9naxovOH/mfnd2jw6MuPY967XO3ffbb5+v2edAZFGYpO/Ot87JynXGdG7sxVnhZvOp0Blp3Zs1urjOTTtp7QknbiN4qVF3O87VsQ9huMveiLoQtvkvpxaHYvH+J6d4+Be/j9//e9Pe72cDlTZxsdrzfP+pmJ/LH/zu7ewfdbO6L99e0crf98+rlzybY59JblVM8Pn/Nrj/S+iZeEzLEbQSF4Vv3f7B8zLWoYvxLMOToUseSOlTLJs5lHcsKo7WwMb6RNm/qNRKIikSOogMsaBPG7CesrLVcIRFYJlyzo7tjVungYjSnNhMxvN5u1pLxnlxRhvHEaeHWMfwkrYlRUzNZ8g/Mm35tJfPuipqWQdU9865Tjwwo7znvJB/TWnEG50YbZg8nKwVEuuniWOmXIJgaLK2kPmTcJBJzLVPEuWdsH8TQ2xgaxtBJDI1i6DSG3sXQ+xgax9BfMfQhhs5i6DyGJjE0jaGLGPo7hmYxNI+hyxhaxNBVDF3H0McY+hRDNzG0pJPoTnqeNpYkA336sg5ySq5UrmweGBYNDWk7OjiYFmn5jTeG4Zwl02MM/zIdxHAB01AMy8WQiqF/YoihV6aFmWgxXcvQ3oYJZQwx3MDQCxP7EEP3MfQQQwyTbhnS5+sLFMKSO0zb91PV6JUu4FFfmAcmzvzp3ByXuplX4hJqpjqWZ7fc2bHSxir2PAC75MHSMZ4zAWzbxql27oRTCx/NMiiSVAZQQCNuN/6NGIR+xXTHiil8GuRYmilEWXJH2jPOjmLPA0eTO2kl0/s0C4nSig1HanQJkIwX/4V3KVwiwmkpCNGPBAC51FptnGIalTz1axPQpPh86POlTQHgRh+RB88NLi2Tr7Rk2hn0VSVyy9Xw0kpOcWG8yPl+K+iyJVn/LduFOV3GaOBmuDvUpbCh0iIwakxJQybD0rlg/ZAVX7ADZuQxtljRjMcPhWfggJ0inFdQEckFzWoQfLyb2ZLpTg30GoQzu1Nr0lWWSp5J2hjnU4LyE6BoQjqjEqTuE7agUPeKq+ZPwLJBqjMEWLRILdqCRa69dqEekaktF3yfLHAYBGqGBbAuoAUjrOSECIK7fyQdzb9/r2BUIcrJQR0IPi6TpAEa1Shg1MvkbkO0G2DVUYInHXDTQUJUQLs2T7IuGcEMqHiXdDIkmyQlHKCUWmBIDn29SUTucm0ss9kUaZ+BuM0BXgBrF0hB4Cuz/bbhQjvgMDPRFJTgAOGAVqugvdpoZswMwMFL4CCNWl4JXagVc7vaYmqYAD0qVSyjZJklTh0syoEdNaJBlNAJCNAYbNR8eaOBgfv8trTmTtbsHcjKUjkw9b4DyR6nGCVQV/NXkRGoKQscMigyN2DBDYjYy0cu8Als5JkJZQhJQSd5y6PRD56OSDBA40OiKkGAn1BrIN1TlBF09KBMOaQZOzFNjiXAwxOpPZMrz5O0fzAJRsSmVcwnDQUsMuk5c4RCX4AJp+VxKmBLhcyYNk/UK1+RH5J1fAYS560oZCUsY7lMsMIYRGmMCucMWE1BWwvNnAzNzQQ0uElVVA2mpsVv8gfiI5FDJeBScuglq1xS+SDMk6mbpi0viCW4XzsMSNEQGBEgmxcq59JwAjaySW8mID8G4LN0WSelA7DnAHI0P3NNwT5PiQ4ZodMe6b5LugIGgXGyFYAJPn25MWWT79pw30cwlwYsoq3Qr1XpCy13kD8Bp+rkVhRyfEIo1OOj0PwOedvNPkhbXwhlm1+Pb7/9C/NFF2U=", GV = "eJyFWdtSGzkQ/RXXPO1WmZSBEAJvjnESb8AmGENCKg+ypj3Wohk5ugAmlX9fzUCyW6s+ysuUfVqXvh61Zr4XI1PX1PjiuLg6C05U1Ns/Ojx42TsYHB4eFf3irWn8VNQUB4xMsIpsCwatU1DUSm8T+JpUtW7XP6NShToiEy+0ksOm0nHkIP53b9UDlefKy3Vx7G2gfjFaCyukJzundu74wVNTUnlhatE8a/XmjXkojr/s7O33d/YOBv3D3YP+68HB136xiEOtVg2dG6e8Mk1xvLM7GPxHcLlW8rYh54rjOLO4Iuu6YcVgsP9iMBjELabGK/lkymZrWxt6f8g/e7tHr4/68Xk06J673XOve+53z8PesDRL6s23zlPtepNGGrsxVngqX/R6Q617F+1qrndBjuxdRONu4ziqVE01l2vqHNgtMveiKYUtf0rjwJHYvH/26MGrvX7x6ee/l3uv+sXQydZPtjh+tXfUL07o1/+d3YPDfjH35fvrOHO3+3n1/LN19hl5q2T0x5fvxfWnOL/11zQq4jYiuuFH/38wPUgt6hT/Fkw0dKlTSRPqZevnqkllpdFa2BTfkJVtdiYCUUeRi94BGnQBY9YTlhpNKyQC04RrV3S3zCwdXIrKWFQihdfbzZoY66MpyjCWOC3cOoUfyZoUNQ0TJX/PjPRrS8zYVSxZBlV3zFinHhiQ7jjriPdpoziFpdGGWcNRrYBIt1WcbvotCCYHK0uxDhkzvwVyHVOksWd0H6bQmxQapdBJCo1T6G0KvUuh9yk0SaG/UuhDCp2m0FkKTVNolkLnKfQxhS5SaJ5Clym0SKGrFLpOoU8p9DmFblJoGU+iW/I8bSyjDNTp8zzIKVIpqawMDIuGlrRdPDiYEun4jVeG4ZwlU2MM/zIVxHABU1AMy6WQSqG/U4ihV6aEGW8xVcvQ3oZxZQox3MDQC+P7kEJ3KXSfQgyTbhnS5/MLJMKSO0y78bls9EqX8KgvzT3jZ/50bo9L3fYraQq1XR3Ls1vu7FhpYxV7HoBVZLDxGJeMA7uycarrOmHXwnuzCipKagMooBV3C/9GDFy/YqpjxSR+bORYmilFVXFH2hPOtmJPDUcbO7LE1H7shURlxYYjtdj6E2PFv+5dCpfxcF4KXPQrAEBOWquNU0yhRkv92gTUKT4d+nxqRwdwrY+QwXONS8fkK01MOYO6qoW0XA4vLXEbl8YLyddbGa9axNpv2SqU8SoWG26Gu0NTCRtqLQKzjalik8mwtBSsHVTzCTtkWh5jy1Xs8fim8BQcsDOE8xvUkeSCZncQvL/b3pKpTg32NQhnVo+lGa+yMeWZoE1wPAmknwBJE/IRJRC6z1iDUt0pLps/A82GucoQYNIiN2kLJrnu2oVqhHJLLvg6WWA3CFQMC6BdQBPGeJOTSBDc/SNrqPz5voLZClGOBHkgeL9MswpolKOAUS+zq43QaoBVxxmedMBMBwlRgd21eaSmYgQXYIt3WSNDtkhywiEKqQWKSGjrTcZzl2tjmcVmaPcL4Lc5wEug7QJtEPjM7N5tuNA1OExPNAMpOEQ4oNU6aK82mmkzAzDwEhgYWy2vhC7VirldbTE1TME+Kpcs42yaZU4dLJJAjwbRIAroFDhoAhZq37zFhoF7/ba05pYa9g5kqVIOdL3vQLAnOUYJsar5q8gY5JQFBhnkmRsw4QZ47PklF3gFNvZMhzKCpKCzvOVR6wdPRyQYovYhk5XAwY+oNNDeMxQRdPSgSDm0MzZilm1LgIUnpD0TK8+TtL83GUbEqtXMKw0FNDL5PnOMXF+CDqfj8ZjANiYyo9o8k698Rn7I5vEpCJy3oqRaWEZzyrDCBHhpghLnFGgdnbYWmjkZ2psJKHCTy6gGdE2L38QP+IeQQRXg0mjQc1S5oPJOmGdDN8trXkaW4L52GBCiEVAiQDYvleTCcAIWsllrpiA+BuAX+bTOSodgzSHkaL7nmoF1HjMVMkanPdr7NmsKaAQm2VIAKvj85cZUbbwbw70fwVwasCguhb5W5S+03EH+CIxqsktFl+MTQqEaH4f2O+TXfvGBbHMulG2/Hn/98Q/b2xEO", VV = /* @__PURE__ */ JSON.parse('""'), WV = /* @__PURE__ */ JSON.parse('""'), bV = /* @__PURE__ */ JSON.parse('""'), RV = /* @__PURE__ */ JSON.parse('""'), nV = /* @__PURE__ */ JSON.parse('""'), UV = /* @__PURE__ */ JSON.parse('""'), aV = /* @__PURE__ */ JSON.parse('""'), oV = /* @__PURE__ */ JSON.parse('"eJyFnVtzG0mOhf+Kgk+7Ee5ZSdbN/aa+ebzuMdvupmjORD9QUlnmmmJpSMoSZ2L++9YNwMEBkn5xuL6TdUkkgLxUFvXv0Y/1/X212o6+H1397XEzv6sOTl6+Onx1cHry6uXJ6MXol3q1fTe/r5oCfyzuq813H+r7+aoVHpdLFA5UmN8vljuUGjitFnef27tIqTfb+XJxc7m6WzbFDpvjzS+L5+r2t8X25vPo++36sXox+vHzfD2/2Vbr36v21J+ft9XqtrrVGzWP9sMP9fPo+398d3R28eK746OLF0eHh4cvLl5d/PliNGkKr5eLVfVbvVlsF/Vq9P13jQzCH58XN19W1WYz+v604VfVetMVGx0eHv+luVBzk3f1dnHT1uTH+mG3bitx8F83/31w9Ori9EX773n376v231eH3b8vu3/PDy5v6+vq4PfdZlvdbw7erG7q9UO9nm+r278cHFwulwcf2qs1dqs21fprQ3szLjYH84Pten5b3c/XXw7qTwe/Llb1dvdQfffXqjnr8vXBfHX7P/X6YNGcvHm83ixuF/P1otr8pXncn5vb3C5Wd7/ffK66Buie4vdtc8p8fStqU/DH+cNfhzY5Ozt+MfooRyetJS43N62p14148fLF6KdKjxsjn78Y/b69/et09P3xRfffq+a/Fyd9e/2t2q4XN41B//Hv0fRjU6S93LvmQTYP88aO/3nR45cvX/a4er5Zzu+Vnxxe9Pyfj3VjqeulKqeHw4VWj/fXbUPdraJ2Wy+X87XyC7nLQ7W+ab1chPPz4Tbz+0baNNaJT9Y9QdfiUXuYr6vVsvpUkvxp+njzTXvFzRdTzk6Gs5aPG6Vqs5smOOfxFp93D5+rVSzeVGVRW02OpZKb5XzzOT7Nv6p1HWm9qiLcPiUlt5/XVVL2U/24Tujia1J2s3hOYPW1Stq2ym26WsADa5Vv6mW9SixR3S+8pC2wbNNAoNU/H+fLiO/WVRPIVs2TkxNxmmrTpRpRXh0fDW0P3nd83LNLRWdn5z36IaIf44k/Wamj4fo/21OenvXol3ji64j+Gh3sjaEmtXXof+OJb+ND/GqhJyf+LZ74LqJxfPrfYqn30Tgf4om/x+f6I15rEtGVtZq05zSW+hjRLN7x79Gq101n9qXaurShnnndaD5O+TyfU07OXklOuVksbhbrm0fLohocj23S3jQ9T5J5u/zmHka9eB6vdB1L3ST5N5ZK7vwpnngX0edopEVE/xdP/BJLWQhr5k+slSSdJO09RPTPWEfLDRpCm/hcST57jOhr9LinWCrJpLvYHP8ydHFo/uUd4VhbHTpTX556uJMj8MbtYnlb7Opv66fEzq53tp5g243TzDmOJOw/tQNDzLNW56zv+LSs14uEb6rCVW4e1003fmMGPJLad2GzWXQD1yT996MWZ01z8sdFo9zX23zk0Mrdhb8hk+kl7X1aJCwZPzUDuXQ4cDu/u6uSnrvnOBSjAUfbdtW6gtg/tbHQ/G49f4CkJqdeN9OHKqmlmfd6vtlj4f1qYfylDeD1bs7Q22a5XDxsFptEauq6/Vw/urFi6Padc1vLredfk3iY3zxuE9zn8k/L6jlqhci6n9+s6+TG1+squ/FtvZ3fuIgzadG0JBrAEhrGoT1sdduYNBujPq7u5uvH++X8MblNfdcMM78kl5tjPaBd7p3P6uDi0kY9x+eDz9fr20/NMM+NC22A4vtYG394rjcY2w1eHh3qDe6bPPe4dHeQzDRPRqO3bchvNkn3tSyMzevCc9bJILqJzmZC3Hh90mpvQoNax+z9zzp/7zXWMaVNapfzbWdjo/AEOoq+XXxdgDvbKf7JbLichIY9duGkSXKSdRYUg9pVdzMvChKoaryk3c8FiuFyQ8wpGuwc/3TWEnSCzQHCTWzG0GQImIL4KSZV9PxMxWHNI7kV5RwbFXo/sFrmdnmXPYCFR8lHfUq1cX52NZtIla7m0yqYMyZK8xBXTeCUEW3wSnc/H+6yrP9Vre6STPKhEFGvs0qac+wNkn2ee1nqRtaFJr3hutrsJ1pOxyR/fK7XSa3GdHczA0WBTvOIX0iyLZhtQjcwi/muzS1vbB67Mc46eV7vgmbFEqe0Kknw/nG5XTwsd8lz+QqCk/vmkI6vGW1tF/Pl7eJTMsHalVPDO38fc9jEWSw29rrZnl6nLN0U0t2qlAapQSGnzFM/fkMXwsW3ZsCAK3A6AVrXX6oVToM0Oa6ru8XGD3wtRAsjrzcxLs50LvLYRLWbjZixCyPIdcEyNceSxmXBpf7uLXZ68kpGrt06l18F01r+vLURiiXZYgJcZnnr5fHgvdtCkqmKvWNJuCwNH/Z4pTewzZZLoVG697jUIqWuh3Ou9iOlO5fjeLx3WMI9powLquU2We7ZuiRtOfGp3pMR40hPzrt/TGrin8hMlY4zLRbI9DZP9SOc81PM440DrxtHhkfTbiRMYaRtloWO5G06yNAZhm+4V7JuoK90spxYnpC9KYT+m1KI/0pPLWZojPZ5voSeQWK8nZnQMrc2xb6x88qPmszTvtF+hUioSt3znc+lWKGhVbNG9fnMeDbcVQfOZzjqYE2WyF541BRalgnn+XiDks2pZvPbxU2WZ38q9GfrvbV559vHHpdGuzbc3OvWe+91WfCFy2KOzmcDY38dy8NJv2kjkUJvX0oUX9Lxs47H3EDArrY3FPwj2PLu3jst67u2vVd1Moqvy7n0MUoSys2lCpF8t3fOUEFHbjYvuO8q7cbh9WHoISzll2L858f2VeSfL0Zvq/Xqt/li3b5A/sfosn1RPXrx3cnhny+Goz57ONQ/p0dDTkf42h/1WcUhrBgK4+bo9FSP5BEAgXM4rk3laB//DrnM45TBZI71i0MO9YGD6L07+qM5Ojo60kMxmmOu/qBM3KUm0QCTggEmqQEm0QCTogEmiQFk6OdYl1GQXLWVeKmH0+bwlbbprBUPVZxJnZDBwwOGfQHOSF+bw/MTOXpq73YsRzt/JDcDBPca6FAIA0ARRYFyCgXjHA+ivE4QRYbyNDxEhRhRRH6iPHMWFaPHqERuozz3HZXZgVSgMFJOsST8fUQYVco4tExI40vkSbw8R5ryfRZMYk6lggUL0adyyYIhDlXwwSgYI1IYhKUgjE1lHKAqJFEqWhqqIkK8CoKgFbRLEIWv8hjDQyhhDCuiGFZOMWycY1iU1wmiGFaexrCoEMOKyAOVZx6oYvRAlcgDleceqDJ7oAoUw8ophoW/jwhjWBnHsAlpDIs8iZfnGFa+z4JJDKtUsGAhhlUuWTDEsAo+hgVjDAuDGBaEMayMY1iFJIZFS2NYRIhhQRDDgnYJohhWHmMY2wkD2XOKZi9SSJPIce3k1yVOEe7FNMxdEYh1z8ldvZj5rC8RHdfr5L1ezF3Yl2E/9iqlAy9STnDi+wLH7OAFThGkpnnClZkUbskZw4vfbIIkd3h9XxMUsogvs7cJQj7xqk8qTsPM4gRIL45jjvECJxqvJtnGFUhTjisBecdxSD6O70qc0pAXYy4ygpkIKeUhlCgLOYlzEIivc0r5B6U0+0AByD1Iye1Rypwe9ejyqJLDo5S7O5ZgZ0eNsg1KlGtAep9SzDOIOcs4Lc0xUGKS3orzC0rfMHSSW1AtG7qQV7DEHkOHnIKazyigYD4BDNkEKOYSxJxJUEvyCMhpFgEdcghQyCBAdzml7IFSzB1D42DiUERZQzmlDOOcL0R5nSDKFMrTNCEq5AhF5LfKM6dVMXqsSuSuynNfVZkdVQVKB8opFwh/HxFmAWWcAkxI41/kSbw8R77yfRZMYl6lggUL0a5yyYIhzlXwQS4YI1wYhLcgjG1lHNgqJFEtWhrSIkI8C4JgFrRLEIWx8hjDYjgMYmMUxSZQGIPAcazS64xRJJuQhrLKEMvGyBVNyHzR1OiMppE3mpC7o+nsj6ZQSJtAMa3C+4RhVBvksAYljWvVJ8ktOLJN2GvOJLZNK5mzEN2mF80Z4tsUH+DKMcIVQogrwxg3yEFuShLlKqZhrirEuTIIdGW7jFGomxBjXWyFsW6MYt0EinUQONZVep0xinUT0lhXGWLdGDmnCZlzmhqd0zRyThNy5zSdndMUinUTKNZVeJ8wjHWDHOugpLGu+iS5Bce6CXvNmcS6aSVzFmLd9KI5Q6yb4mNdOca6Qoh1ZRjrBjnWTUliXcU01lWFWFfWxvopheguY9pMLGBD9Np6+CjbAkoIxblginLFHOOD8DoSim/BaXQPIsS2EHJFwZkjihbdUBRyQsG5C4rKDiicolkwxfKA3weCcSyIo1h5GsODOgmX5vgVvMdoSeyKkhutELeiFowWYla4j9iBYrwOCKJ1IBirgjhShSdxOkhplA4axOhAoDceyC4S6okFx3548BgMTkUUncopPI1zfIryOkEUocrTEBUVYlQR+ZvyzOFUjB6nErmc8tznVGanU4FCVTnFqvD3EWG0KuNwNSGNV5En8fIcscr3WTCJWZUKFixErcolC4a4VcEHrmCMXGEQuoIwdpVx8KqQRK9oafiKCPErCAJY0C5BFMLKQwz/0NDL5qivcnck5wKSeAPk2hc43AGotCogbTFg2ljAhnYCIs5vaNJZVo+sIRS5xwXumkapPC4g8j9QtCLAtCLAhor05KfB7id25DPmT2h3QK4iwKEiQKUigPRxgenjAhseF4jY3dCVO2rj5KUezTS4fsLgABSywLCb11lGEZlHOdlIeWYoFaO1VCKTKWe7qcDGU8FbUDGZUfhVRGBQQbNoLDat8sS+3XcA3r6C2L7C2b7CU/uKmNhXJLav8GBfEYJ9RSD7Cmb7DvwqIrTvgGbRWMG+woN9fxlM2+fsX9CqgMSggJwtgcMdgIoFAanxgKndgA0mAyLWMtSOwY60PnNNpoakBoB8fjWO+dWo5ldDlkWNWRY1JlnUiNTAUP/jUC++uzgUUju9jnWqCxWo0wrUsQI1dxCmJFWrZWAHKNZj+NUqqcj/Du51ZkdSEUDSOIBc3YBD3YBK3QBpDYBp4wAbGgeIVKpHb0f9MPylHelow5AfWhjHoYVRHVoYoqYAxQYdxqQpAOkIQ1F7dHyqR/LUgGRMjQgrAhwqglQ/5HBY6gdIawFMm8NYrWOkt+j0gJJB3FtyeqB+EPc2cXpQaHj3Fp0ekB/LtehRQ6A78qHaoSRUOx5CtaM+VDuUhmqnUKh2jLJQx1wWasnOWX4X/WMXG91NtjAuSKAQITWLFioSA4cKUAyRmocTFeLIIpmCjFSKN69WJYtxFJJKAclqEptU5FstlkUslaDgJZXjmGQOaS9DdJNAgU5qFvNUJIY/FaBMQGqeFKgQ5weSKVWQSlnDq5BASKBcQmqWVqhIzDBUgJINqXneoUKcgkjmbESyT0xe3JVcidMVqSEOfh3160r9EkJ3JMGGyK0lmdAtsRweyuFUB5+/jmRhRUVYUzHm5uyK3UqK3a17/6BPvfNj+V+pegPFb1iGK4VPWALPauu+7hgeFb/uGOrtv+7wxYIF8q87vJbZAj/boHqyVbLPNgZJJpfZHUTbxeJ8B+XJHZzzQROQQA3BatYcvgw2ilegabwwK54SmonkpLF8idSgIXxTGwXjFsN3KDAkVzSuIjKr8cygoqIphYERBc2SYsFwKiQmEy0zlmi7WE82kPJgmncjXA7tjnxv2iG/HNqhpFfteOhKO+r7zw5Rf9gxWg7tmFsO7YjvDN9J8F4miOqinCqkPKuVirFqKlH9lHMlVeCaquCrq5jqjOuGjKjOYd2QeVbnbN2QJapzXDdkgevM64aMuc4uyi+LAtffq2wFr6a28EUSi/gCbBevBut4OdjIy2QpL5K95B3IZYLIRsrJOsozu6gYLaIS2UI5W0EFrr8KvuaKfZ3HrrrjWNNxrOS4UL9xWrVxrNU4qdA4qcs4VGOc16DtpfqF2zF2UIiS177joVs61aOpu+pHV3LmStqKryHsKnoaE+24kGjHhUQ73pdox+VEOy4k2nEp0Y5LiXacJ9pxIdEqhzYJI+PAs9bBkTHZcxpv9zGeOIsncrNlI+VBcl8TQQN6Tq3oRWpKL2bt6UvERvU6tawXuXm9ym3sVd/QXqPWDp/7nSTW43bf97FfVuSq0CrTwnN8LFxnVrgOe0Xxg7dBh09FwDGQklugRE6BUuYSqEeHQJXcASV2BtTYFVDzjoAKuQF9i3US7MQuUP4SKxa4Si0/Te/+Mb3CLL0CN3vh66RBlQ8LoMUVUXMrp7ZWnjW0irGVVaImVs7tqwI3rgq+ZRVTs+KXNSfeDNyghe9qSL2K9pzG232MJ87iidx82Tcog+RX1bAJWaGWZJkalOWsXblMbF4uQa3MMjc269zmrPumZ5U8gGRwBFbIH4KcuQUVuiq22LT4RB+LV5sVr8aew3J0IP3UAFzHGDmNCeQuJmSOYmp0EdPIOUxgtzCFHcIU7wrGyQnctzgnZBFu+NKXOCxfJdadJvf8mJw7S87lRk2/Vhk0Wd2B1lREjamc2lJ51pQqxpZUiRpSObejCtyMKvhWVEyNiCt6J94M3ISFFT1Sr6I9p/F2H+OJs3giN162wjdIcZI+LkzSx4VJ+njfJH1cnqSPC5P0cWmSPi5N0sf5JH1cmqTjTt0TbwZuu8I+XVKvoj2n8XYf44mzeCK3XbantZd+G5qtX479DVsMkDQWINdOwMNe1d+wdQBpwwDTNgE2NAcQaQlDtvmpO/JvDDvkNz91KHlz2PHwurCj/h1hh+idX8foRV/H3Nu9jvhNQy2SzU/DZuIW6T6igb0f4ZbZ7shvme1QsmW242HLbEf9ltkOpVtmO4W2zHaMtsx2zG2Z/TDqN0mc2JHfs9ihZFtix8OOxI76zYgdoqcGhXYodkzeUwPy+w8/DJF9ZkcS1IhcPJswcdeZxPpOCvWdpPWdxPpyK4GS1HdCmzE/QCsZaRPQhR61uad/u/JhyDFndqQb2AzhrrSeykIOtL4iMonyzC4qRuOoRBZSnptJZbaVCuQgyslLcGHtjBD5S2FhjdRJvDa7j/J9tkocSaWCrQoupXLJVsG5VPAehmuHFx6Br+FCIfkRe122UDhI8vYFXE8RmVN5Zk4VozlVInMqz82pMptTBXI95eR6wsH1FJHrGc9cT9RJvDa7nvJ9tkpcT6WCrQqup3LJVsH1VPCuh5v1LzwC18PN+uRH7HrZZn2RwvZAeYh8e2CupgYubg/MC7Cx924PzAsFw+fbA3OVHTbsEDlLBXbefTtE0jKT0j2DO3v12zbPXNsX2Gvzkpv7QvttHl3ey+T4YevMRSZgEISdM6lfh4Ao7pvpC/wxGqYZL/VIpxmGdJphyE8zjOM0w6hOMwzZNMOYTTOMyTTDiE4zFLXRfHShRzr6NuRH38Zx9G1UR9+GePRtio2+jen3CIZ0aqHIvqnojuSpAYndAbmKAA8R0FHv9h0iN+6Y2h0uONgdiM8bLer/wrVMWXvST5f6rUotac84V103GQOSxILIfcFjPGy97ilsHIbC+mGPIdpW3TH7sEfZ8HfPZSbbosVIpvzdkV896RCtW7SsdgasYwvXhebEPcNApUaAyC9B0boCE78EJK1qSOe31ohrV611rP1aGhGR6xJMsL+NLtmtpe0+4xM70i7BkO8HjKPrG1XXN8Rp3hQLCmOW0I1JFlfy5Cy380exvXexXXGz1ZDRwmYr5pSP881WLMbMHDZbMeccHTdbseCzddhsRRzydpgGMM8yeDYNYIlyeWkawDJn9TANYE75Xfg8tjRneuWU7pVnSULFmPhVouyvnLsAFbgfUMF3BoqpRxBO3YJh1zcIhhStiHoJ5dRVGI9f7ZgYOw2TYs+hGnUfyrkPUYE7EhG4NxEOXYoiyqzKuXMRoY6twt2M8n1ulHQ4KlGvozzvelTm/kcF6oSUU08knLsj4etoDe6YlFPvZDzrokRN+imRoLNSRD2W8qzbUjH2XSpRB6Y878VU5q5MBe7PVPCdmuCn2BK7BBWcLevowg5b6Q3yHba5yl3fnh22eZGkG8x32OZq6BILO2xzmbrHfIdtqmJXmS9Y5GrabRYXLPIC3IXuXbDIC4XuNF+wyFXuWp06L3lY6Ga9yp2tV9Nc6YskHa8vwN2vV0Mn7OXQFXuZOmQvcrfsVO6cSfRdtP+CEro2L3B37VXutEnNum5fJOnAqUDSjfsS/pNcVu33HlI5dOxODt27U7GT9wL3VV4NHb7/ZLPU9qHz9+q33TobCPgCPBzwamFQ4AuFoYGXeYDgVR4mODUMFpy6LtkzDBy8ysMHUtNBhCuTDSVcARxQeIGHFV5NBxe+SDLE8AV4oOHVwnDDFwqDDi+HoYeXaQDixKdSS++Kwt4QiAOTyTAaObEjvx49wXEHoGRdekIjDKC+N5i4sQQwWkaewKgBiM/wsn6O1QjfTjCnCuXfTrAYqxa+nWDOlYzfTrDgqxu+nRh4+OYg5VT7/JuDVMzsUPzmINXJIoVvDlKVbZN+c5BqZCXafp9QslC2/T6RMusUtt8nKlkm3X6faGyVZPt9opBFcG86I7JF2JvOPLNCtjedJap/3JvOAtec96Yzpjone7oLClmgtKe7IGf22LOnu1CCrFPc013Q2VaFPd0FlSznNjMHRtaKm5mDkFko3cwcNLJKspk5KGyJsJk5cKq9/pL0Zcao9iZQ7U3Iam9qrL1pVHsTuPamcO1N8bU3TrUffqn3MhKquWCqt+Cs1qLFOotCNRbM9RXOtRXu6yrU1/RqqOXwS61XWEVkulcTmF9fAAFXFQDrWgIwWxwAaBsYAcoORkC6OGCs/Y3jIzvyW0w75IfsJoydTWgvSIeSxux4aMiO+kbsULrXoFOoaTvmd3J0KLYd7E/tDrXtgKkRgPm3rMbxdxKN6nq4IZs3G7N2gztJuwHSX0pUJBOkfurWk2Hz7fErQVSHKqmrLTgAyqtapVV16wl44WiCKjFBlZlAVwmGH99oWbs2cGZHunXDkP9ZLeP4G0JG9eexDNlvYhmjnxpsWe2NbL/oCMxHOgg4ozKqywSGeKUQrmErAsZ0URDK6eRfke3GtmI43TZvaufY5xrqOrEG5L3EOHqJUfUGQ1RDUMxPjNm6kjH5SdGOTCUx9603dYkZmAY3MGouEzAxA9bEDMwSM0DzboAS4IA0MRvrFrHtyO+Sn4b0Cjzskp9iegWU7pKfuvQKTF3MkD62Ilthno7CsvJ0FNaSpyG3Ag/LD1PMrYBojWw6iovC0xGvBE8xsxqSWHh5bqTPrP2a5XRIrHZGFWupaRVRXssq9IZTTqtQ2HeSU5dVgSWV16R6puGycCctfA8+denPWO2uWse6ZwunU859RmNz5uui01FcDJ2OwgrodBSWPaeY+awRMfFZY7eJ71RP08QHyP95AePhs6QpJj5A/PcETLE/JWDM/oqAMfkDAkraBb7zl3qk6doQpuWOzny+nCX5cpbky1kpX87yfDlL8uUsy5ezLF/OYr6cJflyNsIfMZ1hvgSUvD2ZUb4E6t+CzJJ8CQrtc5hhvgTkf2x0NuTLYZQzw4SJTFsAGOV+E3DXqlH/w8ozlzOBwYdQBvVLKEP+p5VnkDX78JqNwnh0NqRNuEyVVFYTp2OFylZpZf2IFEpHI1SJEarMCDYi7UepsyF79u8nZpg9AdEfAJkN2fPoSK9rg0dgvrogYAwb9XtvZkkCxWvQ67sZZlAsp1MORTx4nFEOtaZ/9IZ6pHnHLGRRFMIsY4ZpFFCopEk00Zi5PIoF/VxrpuvnkFrCy4EgcIbMXw8ENcmV4QVBEELWjK8IgkL5M7wkYAEyafjWjXmWU7Nv3Vii7Fr61o1lzrPhWzfmlHGFY9pVxulIBU7AKqSJSdWYnVSiVKSc85EKISmpQulZOeVo4RSthn22Fp5VO+RtFTh5m7DPUEkaNynJ5SoWrBiyugpFK4b8LgIkeUWU6ZVzuhcBc74yTvwqpNlf1dgFqET9gPJCZ6A69wgqcLegAvUNwkMHIULSS4j0mNg89BcqpJ2GqrHnUIm6D+WFPkR17khUCL2JKtSl0EtFybXZW8VM476l+F4xK5D0MNmbxUwL/Uz6bjETqbfJ3i4mGvQ5SKnbQSnreVCPnQ+q1P+glHdBWIJ7IdSoI0KJ+iKQsDtCzIkWNe6UUEvTLRaIGRdVyqsocWpFLWRXFKmbQslWkYJGWcMpvsMCqXCt0G2hxj2X075hzaT/cmrShaFetnboyFDbZ+3QnYEGPRpS6tRQ4n4NNOzaEHPvhlrawWGB2MehSt0cSoWeDotwZ4ca93eoUZcHUuj1QEs6PlAf8wYK3R9qaQ+IBWIniCr1gygVukIswr0haqFDRNH3iU3Ydn9fsu8F2qN241r/YlFSHhYQBKWG5IelBEEpt9sHijoO5eGRoTRQKCvbR6CgICiluwWgmDIo5/629VDO/W3roRz8dd2hFPx13aEM/gnPoRD+Cc++1DV6br+4ez245LEdiScCSt6yXZPfAfVv2a4TPwOF3r9dO7cCNniTka9arZtRvxYKRxpNhnBc1FNxsV2C6ALK41Xw2w9GdJXs2w+R5M8Ru+sY5CuZEq/Vd5L9Hy24vV7K3y3os5hTvdRW0H7uqTvyOwM6lO0MUM/Toyd39OxK7vyRr1puZenG8fkU0UMqT5/UpRqPniJ6jifuEkRVKHuLDDmwHoqoHsrTeogK9cAPkwg9xxN3CaJ6lP3VDY9cZRznGjkxr1bI3gl/KvDnwnV2Jc71dWKsNHQKdzmlCqOUVpc7n0CfUvqcXmGXU6okSkkVbdzq6oiYK4laXksogdUE/JTj5/wiuwLmqqIW6ypd912CqI7K0/q5YYFHTxE9xxN3CaK6KI/10LHFXcaoJiakVfFjF2JPCXtOzt1ljOpjQqyQDoLuMkYVMiGtkB9kEXtK2HNy7i5jVCETQoU+jWS2r0d+Z0eHbG6vKNns0fGw2aOjfrNHh2hLR8fohw875n74sCN+l0eLmmhaVptNN5VU+Ekt2B4tdITWHfmR5CcadfQTy7vBNnagk1IlYhkj/nW8Ynwbr1BfxiuxN+6KbLqrSN63KxCT9ESmHvNIfA0U+2ooTuqiWqiQKr5Wiqlqyql+yl0llfqaxs9JU+5rXfiYNBUTC5Q/JU11b43Sh6SpSpbJPyNNNWcl/VNgeuDsEf78VwsXLi0t4tB0URgOLdJxwyL2Q4skny+SlNgeWbR3Rz5DdcjWywzFDNXxkKF66lbFFPvE1SFKXB2jxNWy2h/FZ64LD1inD1jHJwnrS6Ykz1j7/XId8pnUdydJR5J3IV/il8bD9QpfGucqteC+L43zItFse740zkuQjUtfGucy+0D86jcX9poldZLyV795gb3VKnhR6avfXCbfKnz1m6q7kiOx85W/Be0LLIdRU3+XpVul61H8OnUQ5GfYDUleOtEje85kzJiPFleYNocrxbn6qjBXX5Xn6iucYg8XjpPnVWHyvCpPnlfeRHj5QqOxwLf6RqOtcHVwuJWgXSzFl1ceLlyPcB2udiPqWi5+qEc+CGu+ZE+xOYfrxgWa2rWwP5Fvk7ZwL4XudbhhYbWhjqsKyXX4/uVVhV6nvnx4hHQNoObZfrgC37w02+9VHDAM940T19rNUv2JfLt0ltpL9B0h3JIUuDMpu+LV+DlYjo/jBkbDgyQT3dpPaulcvm0+qe01SX9wP8yIxx7t4ol8s+yvyg4SxvtwL3wbcOzRLp7I90pTQCc9uAs8xHMf8tOG1xCFVWove03OWFaf5Fvdi1SQ58hV/0kCq8l2di4CdcoL+E3urNKudpZpMz/L7qMGFv1O+E7NjbXHUnvM9C0b7TfQHuvsM80+u5SN8m2LwP+HL6HQ5Ubtm7LTw4ibB5xvc22pTu6xDwuv0dJVUsIP/pzmYyTWYZ0/p/6kS6bJRCHV3MMmJboJ7mnEfruB1/SGmSZvu3LVP05S4mF+U+Wm6ax9ETG1RyzxVWveWFf3pZwoudPTuiNd2zOU3aIVdBvHsV5M39n2lZOG49u6d2QXHtEDlN6ReZUfJez5G56Hf79yeB73ruvCI3qe0rsur/LzhB9AlOdJf7JLnsqJ+Gxe4Cf0av6c+c9eHWc3pmcefLRL0ER81CjWFTWP/Vqa13D9ySu6fuaxrZx5TpuDlMtqmae6TubwH2o3Jbo6QTixtYj2t6eEdH96ypH2t+BfeSI2JQwG6pUmzLsFz37E1B3porYhaQpAfseEcdwxYVR3TBiyfRHGbF+EMdkXYUTMbUgi4EyJze66Iz/h65C2BaD4Z6c6HqaFPcWFIMP+r1F1iP4aVcfor1G1rNZQ6o78y4UOJdtUOh62qXTUb1PpULpNpVNom0rHpEsGpLZXpHHeG/9phK+CntChAPlXQU/BoYCHkfUTOhQgWlx6cg4FzL0KekKHMuQd6mmEK29Po7Dc9hQaB3hagTpWIF9CexrFdbOnUVgsexqFFbKn2DjPLjKeY2Q8x8h4LkTGcxoZz3lkPMfIeE4i4zmJjF1ojl2s2I5HDIS5eLLlNip40p//+X+DG1I7"'), eV = "eJx9WFlv2zgQ/iuGnnYBt5DkS85bmk13g27SoEkPbNEHWqIlIhSpklSuov99R7JIkSLtFyGZjxzN8c0h/4oueF1jpqKz6Mt1K1GJZ4s4S+PZYrvdbqJ59J4zdYNqDAfuXuodp52spdSToZrQl6n0KyZl1Sm/xgVpa5BcKURJfs5KCgdj+F++J8+4uCUqr6IzJVo8jy4qJFCusLjD3d27BucE0cGYd+/4c3T2/U2SxfM36XYxT+JtDI8k/jGPPrMCC0oYvuWSKMJZdPYmiWMLuK9I/sCwlNHZCuRfsJD9sSiOk7dxnMFbbrgieefGBW9eROfA7I/8z1myzVbz7rnpn9vuCW/unpvZecF3eHb3IhWu5eyK5Vw0XCCFi7ezc0pnvRo5E1hi8QhCeM0lHCoIK+/yCvdR67zrfd2THPA7VfzzNTrbpv2fX+BPeH8fm2usBMnBg++/oq/forO08+QGNMgGgeG/5wfxYrE4iPFzTlFt5JtkkLeMPIL/EFoNreJBE2vrXReako3YcqvVEXCTKWJdzPS7Gizyjk/mZZvsAKC66d7FCgMtF4NC2eaVqpDyLW+QwIzi/TGoD6tvPQL7BJEPNVKVb39DW2mkJnY5FALyD9eEhU6DL4SPrqTaS0mRrHyDXrHgvpQz7AvVU+CkqgQOnN3zVgSkkFVfKslzQIgfMfPFOBxWRiyDjcs5p5wFIoFr4kImprQrP59WP1ubiVpcCgxlNLq5XC4PwM8Wy77EvSs5ZyU0EpuFaXqAzmlTjVlerzcH8TuskH/4oiLj0WQQ/oWpdXadJAfxZSOJ7exmPfD01lYSD8K/kU0288JLS7Mh+hW337dINCPA5MRX8QE1jXU8Wx/E/6J6V4zyLBtCdd36Km4Cso+QTOG4N6T5dvRusxxsu6/scK5Wgw2fKovZ20HxHSnrQDjv0WjEejvw7/MkxmMD6ZQkvnEfa1xayperg/ibZfN2kN1K4lvxHw4lZAfD6QErpy1lOt2QF4H3XATa8HDP7VnrVWY6SoNZQfKWokBRt90Ak7mt2GACwTVE8bNPE+Tw3VTIzkmQqRuLqsvtUGaFw3cTcjzJxSod3tjYSnQgS4fvpgyc8KaDZuLwXR8FtYlv8YPD9rHBuGxfbQYG1q1vL2v9+3zC9nF0EF+BqoLBFBbbjRfSYbsJprLYboxtpx1Fj23esXoMhqlx7rB9uR2OPxP/aCMDmX61/Vhm8cha7HA91bzbWUR1z0/m8tLUKSyJ1qWNHqeXrTUf16lb76Or6XIzTmWFA4mHyeLOkUS3+H23UpJQPAnbE0bUS2CSUi6IdWM13Mhpu/OlBUE1t/YbA1QYCeWLYVsrRh+SeDm0RCQEf9pxa3Xpds4RcpJhqNVDbXPkzqTpOJcK/mT1VO17gUtn57C3J3cpMlUucW77Px3hRwZ83VJFGvriJ6YRHJboLmnWPUNXWAC7FbQg+/0IrjUL4RMFBxhYkEdSBLxiXB0xD8TkEZorywPXoP0I/jxhXGzWKEoJUFgeiTvs3srq2eO9Hq2Aeq92S9eDIgeYwIeawKoVY+KyVOumuBmpY0r+CgrgQVn7ohl9n6aIoc4TJjB0lEDWvmaGa05ETrGfPRd3lm1jI64b9SKtBJlbhAFTgEhuqWoUvlhCFdwRBW613cNWqnGYyDAdj+OQfdnugpBWHUa14jAKbbN2tlDrfR6mXUT9p7F3peyGvHNBb0UCl933GHgmyN6Hc/0R6+KZxiG7Ba6ReJjg6RiAos0DpTRsHWNz1s284Mr58DI+UF52N8B7vyIGzP4+nGJcWLXiNMtiR0/0S0BPtExAj3ZNwE42zh11e6duTZS/YlZaK6DebfrkOsb4aURMnsqiA+viHpPowDrwsoX1y6moRTZ20cMXtmpOgFYf8sGd8kFrRw4ptuCQagu2lJvwmpXEUu2DNSlOoEf12vY4aXOZkG6WY8OC4hzrwHRcjVhWepjd4KdYKK7jrx5H89WjRxPWoycydlS3jZ/I2VS/G9yp9gB6PG1T1aY4YAp3LfPHPPqABbtFRHS/jf34/T82FAfb", mV = "eJxtmNtu20YQhl+F4FULyMGeD7pz3AY1ChtG7NpFA18w1NomIlECSRcxgrx7SVk7+wOdG8H5OJydf2Z2d5gf9cV+t0v9VK/r+6vXsXlOlbHe28paq229qj/t++m62aXZ4J/m8PRb1z9/baZxefK63Z6eXN5dVMvTCh83u277xr/6kLrnl2XNq7TpXnczuZyabdee98/b2VzM/x4/dd/T5qab2pd6PQ2vaVVfvDRD005puE3Lu7eH1HbN9hTjx4/77/X6y5lcnUmjVzHIVVDicVX/1W/SsO36dLMfu6nb9/X6TAoBD+5euvZbn8axXtuZ36dhPJrVQqgPQoh5hev91LWLkIv94W1Ygq9+aX+tZAx2tfz64284/sblN/rqfLP/mqrbt3FKu7G67Nv9cNgPzZQ2H6rz7bb6vLgZq89pTMO/M/xfEqturJpqSM/d7GJIm2oamk3aNcO3av80O5xh3yyKmm1193ZIT02bqovTKjP+MAf++7zsZvZ3276kYyWWXB0z99S18/PbafPHQ71W4fjn/fxnFO+ZvkrT0LVzTr78qB/+nk38bHM9exgP8zr1z9U7jt6840YW5uSJKcZOCaBBnKgm5mU8MVNYyMwWFvO7Ukagkmgg6sDWQ5yFFqjzUrLEaQ3BEmiwNsMSaZS0vgWfOkPHWQowNeTUc0kumnxZvsgPxlGai6VTGUqAVCTQ6QkWnc77DKEiLktSUBJKqHIQZ86d8gCpHYoiEzMsb1ubYy8vW50DChB5ZhGqrijD0EqUIeiaEHIfCg5Kpuu0ApiToaGPSY0uaQsyr65L2oKi1yFt1PLaQ3lzfXTgXodGoJYzglndSLDMPg1sTPJpQJHJigw0QrGERqD9YhyTOgONQDUyuF1zaxuokc/BW2ztXCMrGZ9WMW1oQZHIXWNBkSCfRZEL5BMUiZw6CzVSFCfUSGZFNjIldoKDkonTKQiJIGzWmFd3BizJJ9SINoLDriOfUCOZS+zg+KGD1qGiLNMLxtJD1/ns00ON6EzyUCM6vbxhoBKaqbG3DFQCNiL1iHccBPV0DHhQH/JW8EW90dkyFKGywCJU0WkVSvSGeiSUODWFFD0HYdPQVoiRgfPMA+/nnRgiAyNYSjpWNQcNSMrtFCUH4ZIRpSCWocFCSuhCEY6hoUClc0WC52BJlCYYLQdhN+hygRRRlo5BKRRLS6oihSqh+ZzzRGG1Mo4Iz1LoP0qsxDGFzk0JE42ji0jCPejomJKCuwil4m5CiRMEUMVSzVLDUstSx1Juc0oVWMpqY295qVltmtWmWW2a1aZZbZrVplltmtWmWW2G1WZYbYbVZlhthtVmWG2G1WZYbYbVZlhtltVmWW2W1WZZbZbVZlltltVmWW2W1QYjQCh7E2aAQHeGhCFgPoNoy8KNb2wxBhmGKBxoUZXlLGsLI6AsftEDHV0wIURVbANLcTKlGGBIKPOAxCmhePCKUwFzAmpDFRQvjA9R06Hq8TONvshgKDCuRAZTXigUxjxNFfKRo3CLhnIJBMFRvMZpqpNBMlQJzGT5WFQMVQI/AikPMIhEU1aDjqJvQwmjSHB05cC9jbYwc5UtAHNLhDw41ha+lEqF4JaH3gmB61SYcqInxTDmQK8v08vjqv4zDf1N0w3Lf4A8/vwPpfK11w==";
var hV = {
  Courier: GV,
  "Courier-Bold": FV,
  "Courier-Oblique": cV,
  "Courier-BoldOblique": sV,
  Helvetica: RV,
  "Helvetica-Bold": VV,
  "Helvetica-Oblique": bV,
  "Helvetica-BoldOblique": WV,
  "Times-Roman": oV,
  "Times-Bold": nV,
  "Times-Italic": aV,
  "Times-BoldItalic": UV,
  Symbol: eV,
  ZapfDingbats: mV
}, Nl;
(function(l) {
  l.Courier = "Courier", l.CourierBold = "Courier-Bold", l.CourierOblique = "Courier-Oblique", l.CourierBoldOblique = "Courier-BoldOblique", l.Helvetica = "Helvetica", l.HelveticaBold = "Helvetica-Bold", l.HelveticaOblique = "Helvetica-Oblique", l.HelveticaBoldOblique = "Helvetica-BoldOblique", l.TimesRoman = "Times-Roman", l.TimesRomanBold = "Times-Bold", l.TimesRomanItalic = "Times-Italic", l.TimesRomanBoldItalic = "Times-BoldItalic", l.Symbol = "Symbol", l.ZapfDingbats = "ZapfDingbats";
})(Nl || (Nl = {}));
var Xi = {}, QV = (
  /** @class */
  function() {
    function l() {
      var I = this;
      this.getWidthOfGlyph = function(g) {
        return I.CharWidths[g];
      }, this.getXAxisKerningForPair = function(g, C) {
        return (I.KernPairXAmounts[g] || {})[C];
      };
    }
    return l.load = function(I) {
      var g = Xi[I];
      if (g)
        return g;
      var C = lF(hV[I]), A = Object.assign(new l(), JSON.parse(C));
      return A.CharWidths = A.CharMetrics.reduce(function(d, Z) {
        return d[Z.N] = Z.WX, d;
      }, {}), A.KernPairXAmounts = A.KernPairs.reduce(function(d, Z) {
        var i = Z[0], B = Z[1], F = Z[2];
        return d[i] || (d[i] = {}), d[i][B] = F, d;
      }, {}), Xi[I] = A, A;
    }, l;
  }()
);
const tV = "eJztWsuy48iN/Ret74KZfHtX47meqfGjPHaXx4/wgpJ4JbooUU1JVXXb0f9u4JwESF13R7TD29koIpFi8gCJBHDA/Pvm+nraTuPmZ3/f5HHzs7/k8WlzvXS7fvPXp02eqyR/2vRfd2N3gqhUUfm0Od9P236+DoczxLWK66fNpZ93/fkGWaOy5mnTnUR67c57lRaZSItM/tnN/XnsX/DfIqg0JOk8HI4UK4BCAFzG+xWCQgXF02Y3nU4dJJVKKrx5mPgKBVMImOvYXY+QKJRCoHzXzxMErQrap810hqaloioF1e0L5kvFUwqe23Hu+Q+1TinWeZnuMwSKrRRsL8Nn/kOxlYLtOnzFWE1Viqmu/eceVioVaylYe1OwVKilQD0PCYgiLRtVcJz4kEItW13mNLi0UsCVAB77KyxTKeJKEPff3rsREkVcCeLD3He3HqArBV0J6G/v/fU2cK1WH23l0e3c7T71N9uUVv/c5i73bWlVs1Y0u5/3srO7aQb2EPUB+eUTva0TYgG5mGbbzZSUkJTpn75ygF4PThhq1SMGMds4HYZdN54n/rdWc8rv02bfH9I2hbqGsKbPnIYzHSc0qmTIxI6nuwpiAIQmU8F4Gy7jK8RwntAI1v3wedj39FmFECp508s4zUOyGmwpKrwbL8eOIlVU//Yf/S1J9C212Pa/uuSwbVDYlWzxf/aj/UtfWgm258t1GG1X1BVawfdnX0xdoRbjPCdBVGs1svo3R/tPVD1r2YL3k0kUfC04f9ldLkmk0NVwv+pO232SKXa126/vHAO5wPxNGivsRsZ/HDhWzLVg/iBuOSfMUTGrTX+b/qSIG0H8u+NEl1J4jcD7/XBI9kDcUYN/0/FNCDuNAP64skYOeLrykUsjElWC9+cmAEAB9NtrEijCplaE/YHvKuC5Iup8zxBAWtFrayakC2QC8uCbhggSskx9zXYNQSRkeuZWQBFKQowabNIfS/qeqOgSOFTINcC4DKcnE70H2zqElJAJ3k++dwgrIRPA47J5iCwr724RWELINFBTAAWiCL7SOogrIQj6abWBOH8hCPoL/4a4EoJgn9MWIq40lcY52cJAGbCHMgkpA3g9t7e0sRWgB1HnvjJYRez6yrSTlYJvRZmdCQhe80Pa24roNYL75uLo10WyKYHVeFLjYnImilM0qPDOJOKWNGlFCJsIrw/qsNv7OPY3SnNYSQ9DP46DLHylvGCcEFU08Nz6JIVx9Chd+93ENNhEWroSuC8SAi0WNznNpqH9+c5k1RQ0nIbi9/LnTzdmoKZAaAwaib/0g0Ti29wxG8gUgLey/O8eHmmqt4eiKTNYo416LPrLkcIWa2u06eZ5+mLBXCaoTp4m7pckBm41P8Qe0mUG6DUCYWY/fTmnCQbwkCa2043vrhA2gqakncwM3aGfe9GAj1Vw9qiuzPW2o4Or4PcxhmUu4atwAGKMy8wCscJhiDFfJh1lhY2K6mo250DrTJXOC82EUgVIkTMmOd0moqC5Dd24H15e0hRKJS0Cvg7Xm9RKgz9ErdWrTpfb6zV5Wx2ytwlDZLplUQ/8Ye72Qyq5RI5kqY4t6fe0iHOItdCYbo8zKOi0vLjvjrdjZ2IYRAPUZZ72910SI7vEiL9LaHSvrZFkipKOf02y8gc9vEbmKHQjRP95uH6ShZI9c9pao41otTPLICMETXSC5jLNupbP8bxo2Dy/DOfh9prk8BKNk935MPIo1jiKUSNQqiVSVSozBWYan5nmNMGz1+r6AleO8KJJwXdk2H8XwgVVP31AticBhdvqIZPwNPcvqWhqah74iIB6GsYuvbdGeYFS93yY775hPNh6giUlzNNXr/eaJmNYKrnLKznOt4ZsEQ6f5ZCfWVvJFK2Xs5BcP8ND23r5uJqDyaPmM90Oscl9a87aIC3HLCxz+uOzNFgOhA+P4XRq8hPTjP3Xhzn4oiYIm1svybSpOX03zDuJX4kqyAx3rrKZdZ3XNMggGh9lsUt/Fm+7m+1bGCxqOttPN/fOFiExKh+xnb1d0gz8qiiXmS0r5YxLaaULN/TaOsu4WEgTS3Fd1TCvlsvj9F1/PvQpPzHAZqiN9yZEntcyaDfet0mGOKLl5LGX6EMhU5ZGkf3QnVIWqvJA5FoG7KbLK1BcBcyLTfNYZGr7g8ar+WEWm63VgmSefX/q5k+r6Rplrdo/Heb+q00gKzcWUiVy3pY5RkGL7kept7/zSRS8Uc+Kw+nOV5ukqeu1KqtZ2Ds2a6yrWZghX/NS7q3OwQZ5WM0tgGCBPK7muPM6B2fP8wditayKMKG5YzW7rIvzkJcPs8vKOBGaRJxo+boMocrFfe407G0SJlJS7pO+KOrwqKkAcw4lp28Xi28vU7AM2Lfz9gUITKM8fJlcnoRtlJIvkwsSRtD2kXkuC8M2ytbX08vSME4ZHqd9cTQgojL5hXr60uhDxDJfTy7WQ3kXy2I9q+t+L7V+d3nZD+fDtrtdf7iZ8gPUNhVNSLOdFKmrqgg5UGR5ktUWkERW4ETnYSnQpK5PsqU2k3I5yZbCTGhJki0lmbJ2ypxOd8rYKXM23Slnp6yxclZkVZK1li1EVlMWmY0yyJokC5bIRdYm6sDCW/9X54knZEYnurpKJCEzNtHVdYqTmdGJrm6SiJRMsdWJmTS1MYWuSZwAHg3D5dSJO6tnpqPiNXIHapSQHkL9WNCyDwEZymTtQzyGcfx/rQVukWUP4RgGS29oG5RieEMSVKm67GISoHZUs0g6TKImlZMdbde2cDMFUCZBSBWevKlNIlRrBNQkEVpt0CXUSYTWGvzG1q5TldeFIklgFfiMvQ6tNXgMtk5IM+qSAjbJSpOh4wdUtYnQYgOqxkRosgFVayK02SJsYCJ02tRw9HkVodUG00UTodcG4+UmQrdN0dPhVYR2m8KPBhX1t/bkumgaofzWplwXDT2Oo9K2Lhp6dogUvT+HBpGC98fQxlDs/lSVCr/OVGZ7CGY3lXEIKyD3fylyrQS63P4VjTl0uRkGJxB+l5th2CBS5LkZhg0iRZ6bYdgPUqC5aYMEh8CSmzrsCinU3PRBKkNYyQ0qTgSiSmFQcSAQVAqDimSFmFIYVPaKFGphUNktUqiFQUVaUvLVFbaHSEZK47vC0LNfpOgLQ8+OkaIvDD2SjZbOXWHokWBQgJeGHkmlwaEz9EglKHFKQ48og8qmNPQgJEp0u9LQg4mAjJeGnm0rRV8aeratFH1p6EE8tBnQlYYebSutwLrS0KNrhRZYZegRbpV3dpWhR8tKSU9XGXr2rJTsdJXBTz0ruLjhT00rVaAyBVLTSjWoTIPUs1IVKlOBbSulAV1lOrBzpZS2q0wJNq8yhH7TovIOb1cb5tSXUny14Ut9KUYQUyS1phRgbaDZmEIiFrKThCnpIMMYGrZh0JBo7M01e+H65sZeUpPp6ZsbX4+dcH1xa1YgxYsIAWYF9rXBI1p/L9tiiL6ZmYGtrYpZybaz8caUCA1iA4iIPcEN0ZAQIuq70g2ZPCOQ7R+yE5riIjTojfMRESbsge1zHMhgsSlk5PR4u0WnQDraMOdEE7JTj7dbhAqpw4K3W4wKGZv3eHtempBkA+nHQldgrwXHM1jwCgj0pB7BwlcIbI7BnhbAAmsvHNJgISyw+MIxDRbEAqsvHNRgYSyw/GqZSE0j1l84rMFCWWABhuMaLJgFVmA4sMHCWUi8CRpZQAvkSzizwUJaIE/CoQ0W1ALpEU5tsLDGDzqg6yI0jaKzfxGaRuRBOLjBglsgAcpYHZhG5D04usECXCDdQd0WLMQFshwc6GBBLqQOETSyMBdIa3DMgwW6QD6Dcx4s1AXyDpSRYmoTsrpmzWKQyDJw0GWjTci2GCBZIAtkFDj+wSJZIJPA+Q8WygIJRCQkw8meFCJAsGAWCu8BiNAsjzTAXkKwEBfYg2IQqM3y7EFFauT/ZAcUGlk0DAU7nyzETPeSHBIa1aZmSe4IjWpTsyRphEa1qVmSTFMjU7Mki4ZGreEsSZ+hUWO6s7+bc4/8cdJlaNSYQdjTRbEbM3+c5BgaWTgOSA7stkSLiqFiCwbgLUiHinQX4C1Kh4pEl+BN94oEl+DNdBWJLcH74yS0AG8RPeCjRmRZ3JiR0ZWKrItbW7MmZWVlbG+vSVWxHY2tyW+lJTUy0yEVgdTKmmYlNplKagSDCMFlTIaH8GmVMWkpIj6sMsQv+Ae3UmUIX3AP6q0yRC94x/IOBC84B4+VyhC7yHTIELQRhGgM32hchmAM14hMRCpEMIZrNC6DJvAMWkxl0ASOQYOpDJqACrX+EmgCX9EQ8f3T5stwlggXf/otCfss8O19uvX7LfqmP3Z1AiRPP2JPY2pA/vTbFIhHqhFedB2s0/2v3bIAG1z14yH8CVcvwJFFoePr5cgbDv9/G+Pfvo2BUIP6ix0r8EO9ZYARuKFeMMAIvFA/gWMESqifiTACG9QrBTpCBFGK9wuMQKz0UgJGoH+C7L8xAvPTL40Y4au7gPkfjEAB9SYBRmB/eokAIxA/vT6AETifXh7ACHRPrwroqAFX0i/5GIEmCZb/xQj8Tu8LYARqp5cFMAKr03sCGIHQ6SUBjMDlBMsfMLIP//+HERicXlzACORNsPxJR2iW4I4FRj92EQa8TTuGInY3/vHrMSBwuoPX3TDot4c7osKPXJtBm0XLvsPc0XfRZkHNhxE4nLZsMQJ902/jDOQIkriXkAL7JhEyNh1ZemtZ98IxCZvebeCYZE3AHjkmUdMPGRyTpAm6v3FMgqY3EjgmOdPPZhyTmOlFBIwZxHEPgWNeJ9BbBxyz+af9c45J2PRMcEyyph8EOSZP03PMMTmaXjLgmN0+vWLAMfBpFfeZY7838AVjNilxLYJj4NOy7ZVjUju9zcHxv3/FiVcKULCpf9yGcb9qEOPL/6pp7GyO2cU+S7N2AaOzDMHKBXxO4/goyYBiZ3S7+yxxf0fNKud0r31a0gnddp4+9WfTpHJOt/r4yfIlfVDq5z7dgWABg8amf4SBnLxZQ9A0718keFqMZSGDNurhPoxjf5r84LGeQY/77d0vb3QvyYc1DTrd9nWo56movd196uyqy792faz2prfkJHyAHPiBONTe+kZ2ephrlhb4Ll0HSRfRNOLxqk5onB1LWu4kCPAGRmicIDOZ6j67Ro0T5V2/F6t1lDpTlkz6iMTpspj/JI53H83+jZNmt/+ybY2TZ1lRctmcUldonEDLxLEbGV5aZ9AwRnqAJmydSFu6c2dunU6/8yDIL5Og0+8W67VOp98xsL6kr1H8FglO/W45Uq1z6ncPXto6rX432zlpnVW/e6bAGfXPV0aOmXPqZwcbM+fUzw42Zs6pnx/BxsyJ9fMaV8ycW79fre3c+v1qbefW79+u7QT7/ePazrGf+UE7Zk6wf+Mmi8EJ9ocFQnCC/WGBEJxgf3gDgddNNIp/WC3Mb12i24cHXIEfkcs3FzGDM/UPnnJjcKb+cQXOmfrHFThn6h/fgItO1z8+4IjO2P+0LBOdsX9znHgBKUYn7Id+Pkklvh3TCgtpX9DFhbSvll1I+1t0C3NfTBcX5v4IeSHv5sYxX7g7H86dt+/Wbpw7c+8XsLkz934Bmztz79+AzZ2+9w+4cmfww2ptZ/DDam1n8MPbtZ3GDw9rs9ui3KZPblw4tz8vJiuc208LhMK5/bRAKJzbT28gFE7wp9XCTvCnR1zO8ZeLw7Fwjj8tTlw4x78v0Ern+PcFWukc//4GWulE//6AonSu/7paxrn+zZ2YnRclRK/rBXJsCAjxh2cKEAWVJ02ku/wOoFv2+12XkmnODwHgW4uQGVbZ0uM7mAJ1b/68/JlpUMnWdy5MF6/Vd5eL19YYSPd6FqPwBkNQo/h2NQxdQQ3bn/dpCxrGrqCW7U8rKZl/mfi0Xytk3Am66ZhYbg4y+KAVslDwbXdNL2d5qU5hnYBlTZaa6hs2t1qWdaeeTptcLco+hl5R7w4H5uOGcQbtEkpT18GusOI2xT9dYcVJf7zCSjmbD+Iud2s1NPRb9E+0UICmizb8ZK/+5JOLOulSqwaw5VJr2vB8dSFn89fvv/8H0oq1dA==";
var NV = lF(tV), Q0 = JSON.parse(NV), t0 = (
  /** @class */
  /* @__PURE__ */ function() {
    function l(I, g) {
      var C = this;
      this.canEncodeUnicodeCodePoint = function(A) {
        return A in C.unicodeMappings;
      }, this.encodeUnicodeCodePoint = function(A) {
        var d = C.unicodeMappings[A];
        if (!d) {
          var Z = String.fromCharCode(A), i = "0x" + BV(A.toString(16), 4, "0"), B = C.name + ' cannot encode "' + Z + '" (' + i + ")";
          throw new Error(B);
        }
        return { code: d[0], name: d[1] };
      }, this.name = I, this.supportedCodePoints = Object.keys(g).map(Number).sort(function(A, d) {
        return A - d;
      }), this.unicodeMappings = g;
    }
    return l;
  }()
), Pl = {
  Symbol: new t0("Symbol", Q0.symbol),
  ZapfDingbats: new t0("ZapfDingbats", Q0.zapfdingbats),
  WinAnsi: new t0("WinAnsi", Q0.win1252)
}, jd = function(l) {
  return Object.keys(l).map(function(I) {
    return l[I];
  });
}, wV = jd(Nl), Hi = function(l) {
  return wV.includes(l);
}, ql = function(l, I) {
  return l.x === I.x && l.y === I.y && l.width === I.width && l.height === I.height;
}, Vg = function(l) {
  return "`" + l + "`";
}, YV = function(l) {
  return "'" + l + "'";
}, pi = function(l) {
  var I = typeof l;
  return I === "string" ? YV(l) : I === "undefined" ? Vg(l) : l;
}, SV = function(l, I, g) {
  for (var C = new Array(g.length), A = 0, d = g.length; A < d; A++) {
    var Z = g[A];
    C[A] = pi(Z);
  }
  var i = C.join(" or ");
  return Vg(I) + " must be one of " + i + ", but was actually " + pi(l);
}, LC = function(l, I, g) {
  Array.isArray(g) || (g = jd(g));
  for (var C = 0, A = g.length; C < A; C++)
    if (l === g[C])
      return;
  throw new TypeError(SV(l, I, g));
}, gC = function(l, I, g) {
  Array.isArray(g) || (g = jd(g)), LC(l, I, g.concat(void 0));
}, JV = function(l, I, g) {
  Array.isArray(g) || (g = jd(g));
  for (var C = 0, A = l.length; C < A; C++)
    LC(l[C], I, g);
}, DV = function(l) {
  return l === null ? "null" : l === void 0 ? "undefined" : typeof l == "string" ? "string" : isNaN(l) ? "NaN" : typeof l == "number" ? "number" : typeof l == "boolean" ? "boolean" : typeof l == "symbol" ? "symbol" : typeof l == "bigint" ? "bigint" : l.constructor && l.constructor.name ? l.constructor.name : l.name ? l.name : l.constructor ? String(l.constructor) : String(l);
}, uV = function(l, I) {
  return I === "null" ? l === null : I === "undefined" ? l === void 0 : I === "string" ? typeof l == "string" : I === "number" ? typeof l == "number" && !isNaN(l) : I === "boolean" ? typeof l == "boolean" : I === "symbol" ? typeof l == "symbol" : I === "bigint" ? typeof l == "bigint" : I === Date ? l instanceof Date : I === Array ? l instanceof Array : I === Uint8Array ? l instanceof Uint8Array : I === ArrayBuffer ? l instanceof ArrayBuffer : I === Function ? l instanceof Function : l instanceof I[0];
}, MV = function(l, I, g) {
  for (var C = new Array(g.length), A = 0, d = g.length; A < d; A++) {
    var Z = g[A];
    Z === "null" && (C[A] = Vg("null")), Z === "undefined" && (C[A] = Vg("undefined")), Z === "string" ? C[A] = Vg("string") : Z === "number" ? C[A] = Vg("number") : Z === "boolean" ? C[A] = Vg("boolean") : Z === "symbol" ? C[A] = Vg("symbol") : Z === "bigint" ? C[A] = Vg("bigint") : Z === Array ? C[A] = Vg("Array") : Z === Uint8Array ? C[A] = Vg("Uint8Array") : Z === ArrayBuffer ? C[A] = Vg("ArrayBuffer") : C[A] = Vg(Z[1]);
  }
  var i = C.join(" or ");
  return Vg(I) + " must be of type " + i + ", but was actually of type " + Vg(DV(l));
}, u = function(l, I, g) {
  for (var C = 0, A = g.length; C < A; C++)
    if (uV(l, g[C]))
      return;
  throw new TypeError(MV(l, I, g));
}, f = function(l, I, g) {
  u(l, I, g.concat("undefined"));
}, dF = function(l, I, g) {
  for (var C = 0, A = l.length; C < A; C++)
    u(l[C], I, g);
}, Eg = function(l, I, g, C) {
  if (u(l, I, ["number"]), u(g, "min", ["number"]), u(C, "max", ["number"]), C = Math.max(g, C), l < g || l > C)
    throw new Error(Vg(I) + " must be at least " + g + " and at most " + C + ", but was actually " + l);
}, GC = function(l, I, g, C) {
  u(l, I, ["number", "undefined"]), typeof l == "number" && Eg(l, I, g, C);
}, ZF = function(l, I, g) {
  if (u(l, I, ["number"]), l % g !== 0)
    throw new Error(Vg(I) + " must be a multiple of " + g + ", but was actually " + l);
}, yV = function(l, I) {
  if (!Number.isInteger(l))
    throw new Error(Vg(I) + " must be an integer, but was actually " + l);
}, vd = function(l, I) {
  if (![1, 0].includes(Math.sign(l)))
    throw new Error(Vg(I) + " must be a positive number or 0, but was actually " + l);
}, QI = new Uint16Array(256);
for (var _l = 0; _l < 256; _l++)
  QI[_l] = _l;
QI[22] = oI("");
QI[24] = oI("˘");
QI[25] = oI("ˇ");
QI[26] = oI("ˆ");
QI[27] = oI("˙");
QI[28] = oI("˝");
QI[29] = oI("˛");
QI[30] = oI("˚");
QI[31] = oI("˜");
QI[127] = oI("�");
QI[128] = oI("•");
QI[129] = oI("†");
QI[130] = oI("‡");
QI[131] = oI("…");
QI[132] = oI("—");
QI[133] = oI("–");
QI[134] = oI("ƒ");
QI[135] = oI("⁄");
QI[136] = oI("‹");
QI[137] = oI("›");
QI[138] = oI("−");
QI[139] = oI("‰");
QI[140] = oI("„");
QI[141] = oI("“");
QI[142] = oI("”");
QI[143] = oI("‘");
QI[144] = oI("’");
QI[145] = oI("‚");
QI[146] = oI("™");
QI[147] = oI("ﬁ");
QI[148] = oI("ﬂ");
QI[149] = oI("Ł");
QI[150] = oI("Œ");
QI[151] = oI("Š");
QI[152] = oI("Ÿ");
QI[153] = oI("Ž");
QI[154] = oI("ı");
QI[155] = oI("ł");
QI[156] = oI("œ");
QI[157] = oI("š");
QI[158] = oI("ž");
QI[159] = oI("�");
QI[160] = oI("€");
QI[173] = oI("�");
var iF = function(l) {
  for (var I = new Array(l.length), g = 0, C = l.length; g < C; g++)
    I[g] = QI[l[g]];
  return String.fromCodePoint.apply(String, I);
}, DC = (
  /** @class */
  function() {
    function l(I) {
      this.populate = I, this.value = void 0;
    }
    return l.prototype.getValue = function() {
      return this.value;
    }, l.prototype.access = function() {
      return this.value || (this.value = this.populate()), this.value;
    }, l.prototype.invalidate = function() {
      this.value = void 0;
    }, l.populatedBy = function(I) {
      return new l(I);
    }, l;
  }()
), dC = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C) {
      var A = this, d = "Method " + g + "." + C + "() not implemented";
      return A = l.call(this, d) || this, A;
    }
    return I;
  }(Error)
), UZ = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g) {
      var C = this, A = "Cannot construct " + g + " - it has a private constructor";
      return C = l.call(this, A) || this, C;
    }
    return I;
  }(Error)
), Ud = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C) {
      var A = this, d = function(B) {
        var F, s;
        return (F = B?.name) !== null && F !== void 0 ? F : (s = B?.constructor) === null || s === void 0 ? void 0 : s.name;
      }, Z = Array.isArray(g) ? g.map(d) : [d(g)], i = "Expected instance of " + Z.join(" or ") + ", " + ("but got instance of " + (C && d(C)));
      return A = l.call(this, i) || this, A;
    }
    return I;
  }(Error)
), XV = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g) {
      var C = this, A = g + " stream encoding not supported";
      return C = l.call(this, A) || this, C;
    }
    return I;
  }(Error)
), aZ = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C) {
      var A = this, d = "Cannot call " + g + "." + C + "() more than once";
      return A = l.call(this, d) || this, A;
    }
    return I;
  }(Error)
);
(function(l) {
  q(I, l);
  function I(g) {
    var C = this, A = "Missing catalog (ref=" + g + ")";
    return C = l.call(this, A) || this, C;
  }
  return I;
})(Error);
var HV = (
  /** @class */
  function(l) {
    q(I, l);
    function I() {
      var g = this, C = "Can't embed page with missing Contents";
      return g = l.call(this, C) || this, g;
    }
    return I;
  }(Error)
), pV = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g) {
      var C, A, d, Z = this, i = (d = (A = (C = g?.contructor) === null || C === void 0 ? void 0 : C.name) !== null && A !== void 0 ? A : g?.name) !== null && d !== void 0 ? d : g, B = "Unrecognized stream type: " + i;
      return Z = l.call(this, B) || this, Z;
    }
    return I;
  }(Error)
), kV = (
  /** @class */
  function(l) {
    q(I, l);
    function I() {
      var g = this, C = "Found mismatched contexts while embedding pages. All pages in the array passed to `PDFDocument.embedPages()` must be from the same document.";
      return g = l.call(this, C) || this, g;
    }
    return I;
  }(Error)
), KV = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g) {
      var C = this, A = "Attempted to convert PDFArray with " + g + " elements to rectangle, but must have exactly 4 elements.";
      return C = l.call(this, A) || this, C;
    }
    return I;
  }(Error)
), BF = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g) {
      var C = this, A = 'Attempted to convert "' + g + '" to a date, but it does not match the PDF date string format.';
      return C = l.call(this, A) || this, C;
    }
    return I;
  }(Error)
), ki = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C) {
      var A = this, d = "Invalid targetIndex specified: targetIndex=" + g + " must be less than Count=" + C;
      return A = l.call(this, d) || this, A;
    }
    return I;
  }(Error)
), Ki = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C) {
      var A = this, d = "Failed to " + C + " at targetIndex=" + g + " due to corrupt page tree: It is likely that one or more 'Count' entries are invalid";
      return A = l.call(this, d) || this, A;
    }
    return I;
  }(Error)
), ad = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C, A) {
      var d = this, Z = "index should be at least " + C + " and at most " + A + ", but was actually " + g;
      return d = l.call(this, Z) || this, d;
    }
    return I;
  }(Error)
), oZ = (
  /** @class */
  function(l) {
    q(I, l);
    function I() {
      var g = this, C = "Attempted to set invalid field value";
      return g = l.call(this, C) || this, g;
    }
    return I;
  }(Error)
), rV = (
  /** @class */
  function(l) {
    q(I, l);
    function I() {
      var g = this, C = "Attempted to select multiple values for single-select field";
      return g = l.call(this, C) || this, g;
    }
    return I;
  }(Error)
), zV = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g) {
      var C = this, A = "No /DA (default appearance) entry found for field: " + g;
      return C = l.call(this, A) || this, C;
    }
    return I;
  }(Error)
), TV = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g) {
      var C = this, A = "No Tf operator found for DA of field: " + g;
      return C = l.call(this, A) || this, C;
    }
    return I;
  }(Error)
), ri = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C) {
      var A = this, d = "Failed to parse number " + ("(line:" + g.line + " col:" + g.column + " offset=" + g.offset + '): "' + C + '"');
      return A = l.call(this, d) || this, A;
    }
    return I;
  }(Error)
), IA = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C) {
      var A = this, d = "Failed to parse PDF document " + ("(line:" + g.line + " col:" + g.column + " offset=" + g.offset + "): " + C);
      return A = l.call(this, d) || this, A;
    }
    return I;
  }(Error)
), LV = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C, A) {
      var d = this, Z = "Expected next byte to be " + C + " but it was actually " + A;
      return d = l.call(this, g, Z) || this, d;
    }
    return I;
  }(IA)
), EV = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C) {
      var A = this, d = "Failed to parse PDF object starting with the following byte: " + C;
      return A = l.call(this, g, d) || this, A;
    }
    return I;
  }(IA)
), jV = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g) {
      var C = this, A = "Failed to parse invalid PDF object";
      return C = l.call(this, g, A) || this, C;
    }
    return I;
  }(IA)
), vV = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g) {
      var C = this, A = "Failed to parse PDF stream";
      return C = l.call(this, g, A) || this, C;
    }
    return I;
  }(IA)
), xV = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g) {
      var C = this, A = "Failed to parse PDF literal string due to unbalanced parenthesis";
      return C = l.call(this, g, A) || this, C;
    }
    return I;
  }(IA)
), OV = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g) {
      var C = this, A = "Parser stalled";
      return C = l.call(this, g, A) || this, C;
    }
    return I;
  }(IA)
), fV = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g) {
      var C = this, A = "No PDF header found";
      return C = l.call(this, g, A) || this, C;
    }
    return I;
  }(IA)
), PV = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C) {
      var A = this, d = "Did not find expected keyword '" + vB(C) + "'";
      return A = l.call(this, g, d) || this, A;
    }
    return I;
  }(IA)
), K0;
(function(l) {
  l[l.Null = 0] = "Null", l[l.Backspace = 8] = "Backspace", l[l.Tab = 9] = "Tab", l[l.Newline = 10] = "Newline", l[l.FormFeed = 12] = "FormFeed", l[l.CarriageReturn = 13] = "CarriageReturn", l[l.Space = 32] = "Space", l[l.ExclamationPoint = 33] = "ExclamationPoint", l[l.Hash = 35] = "Hash", l[l.Percent = 37] = "Percent", l[l.LeftParen = 40] = "LeftParen", l[l.RightParen = 41] = "RightParen", l[l.Plus = 43] = "Plus", l[l.Minus = 45] = "Minus", l[l.Dash = 45] = "Dash", l[l.Period = 46] = "Period", l[l.ForwardSlash = 47] = "ForwardSlash", l[l.Zero = 48] = "Zero", l[l.One = 49] = "One", l[l.Two = 50] = "Two", l[l.Three = 51] = "Three", l[l.Four = 52] = "Four", l[l.Five = 53] = "Five", l[l.Six = 54] = "Six", l[l.Seven = 55] = "Seven", l[l.Eight = 56] = "Eight", l[l.Nine = 57] = "Nine", l[l.LessThan = 60] = "LessThan", l[l.GreaterThan = 62] = "GreaterThan", l[l.A = 65] = "A", l[l.D = 68] = "D", l[l.E = 69] = "E", l[l.F = 70] = "F", l[l.O = 79] = "O", l[l.P = 80] = "P", l[l.R = 82] = "R", l[l.LeftSquareBracket = 91] = "LeftSquareBracket", l[l.BackSlash = 92] = "BackSlash", l[l.RightSquareBracket = 93] = "RightSquareBracket", l[l.a = 97] = "a", l[l.b = 98] = "b", l[l.d = 100] = "d", l[l.e = 101] = "e", l[l.f = 102] = "f", l[l.i = 105] = "i", l[l.j = 106] = "j", l[l.l = 108] = "l", l[l.m = 109] = "m", l[l.n = 110] = "n", l[l.o = 111] = "o", l[l.r = 114] = "r", l[l.s = 115] = "s", l[l.t = 116] = "t", l[l.u = 117] = "u", l[l.x = 120] = "x", l[l.LeftCurly = 123] = "LeftCurly", l[l.RightCurly = 125] = "RightCurly", l[l.Tilde = 126] = "Tilde";
})(K0 || (K0 = {}));
const t = K0;
var xd = (
  /** @class */
  function() {
    function l(I, g) {
      this.major = String(I), this.minor = String(g);
    }
    return l.prototype.toString = function() {
      var I = JC(129);
      return "%PDF-" + this.major + "." + this.minor + `
%` + I + I + I + I;
    }, l.prototype.sizeInBytes = function() {
      return 12 + this.major.length + this.minor.length;
    }, l.prototype.copyBytesInto = function(I, g) {
      var C = g;
      return I[g++] = t.Percent, I[g++] = t.P, I[g++] = t.D, I[g++] = t.F, I[g++] = t.Dash, g += mg(this.major, I, g), I[g++] = t.Period, g += mg(this.minor, I, g), I[g++] = t.Newline, I[g++] = t.Percent, I[g++] = 129, I[g++] = 129, I[g++] = 129, I[g++] = 129, g - C;
    }, l.forVersion = function(I, g) {
      return new l(I, g);
    }, l;
  }()
), Mg = (
  /** @class */
  function() {
    function l() {
    }
    return l.prototype.clone = function(I) {
      throw new dC(this.constructor.name, "clone");
    }, l.prototype.toString = function() {
      throw new dC(this.constructor.name, "toString");
    }, l.prototype.sizeInBytes = function() {
      throw new dC(this.constructor.name, "sizeInBytes");
    }, l.prototype.copyBytesInto = function(I, g) {
      throw new dC(this.constructor.name, "copyBytesInto");
    }, l;
  }()
), RI = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g) {
      var C = l.call(this) || this;
      return C.numberValue = g, C.stringValue = OG(g), C;
    }
    return I.prototype.asNumber = function() {
      return this.numberValue;
    }, I.prototype.value = function() {
      return this.numberValue;
    }, I.prototype.clone = function() {
      return I.of(this.numberValue);
    }, I.prototype.toString = function() {
      return this.stringValue;
    }, I.prototype.sizeInBytes = function() {
      return this.stringValue.length;
    }, I.prototype.copyBytesInto = function(g, C) {
      return C += mg(this.stringValue, g, C), this.stringValue.length;
    }, I.of = function(g) {
      return new I(g);
    }, I;
  }(Mg)
), LI = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g) {
      var C = l.call(this) || this;
      return C.array = [], C.context = g, C;
    }
    return I.prototype.size = function() {
      return this.array.length;
    }, I.prototype.push = function(g) {
      this.array.push(g);
    }, I.prototype.insert = function(g, C) {
      this.array.splice(g, 0, C);
    }, I.prototype.indexOf = function(g) {
      var C = this.array.indexOf(g);
      return C === -1 ? void 0 : C;
    }, I.prototype.remove = function(g) {
      this.array.splice(g, 1);
    }, I.prototype.set = function(g, C) {
      this.array[g] = C;
    }, I.prototype.get = function(g) {
      return this.array[g];
    }, I.prototype.lookupMaybe = function(g) {
      for (var C, A = [], d = 1; d < arguments.length; d++)
        A[d - 1] = arguments[d];
      return (C = this.context).lookupMaybe.apply(C, kI([this.get(g)], A));
    }, I.prototype.lookup = function(g) {
      for (var C, A = [], d = 1; d < arguments.length; d++)
        A[d - 1] = arguments[d];
      return (C = this.context).lookup.apply(C, kI([this.get(g)], A));
    }, I.prototype.asRectangle = function() {
      if (this.size() !== 4)
        throw new KV(this.size());
      var g = this.lookup(0, RI).asNumber(), C = this.lookup(1, RI).asNumber(), A = this.lookup(2, RI).asNumber(), d = this.lookup(3, RI).asNumber(), Z = g, i = C, B = A - g, F = d - C;
      return { x: Z, y: i, width: B, height: F };
    }, I.prototype.asArray = function() {
      return this.array.slice();
    }, I.prototype.clone = function(g) {
      for (var C = I.withContext(g || this.context), A = 0, d = this.size(); A < d; A++)
        C.push(this.array[A]);
      return C;
    }, I.prototype.toString = function() {
      for (var g = "[ ", C = 0, A = this.size(); C < A; C++)
        g += this.get(C).toString(), g += " ";
      return g += "]", g;
    }, I.prototype.sizeInBytes = function() {
      for (var g = 3, C = 0, A = this.size(); C < A; C++)
        g += this.get(C).sizeInBytes() + 1;
      return g;
    }, I.prototype.copyBytesInto = function(g, C) {
      var A = C;
      g[C++] = t.LeftSquareBracket, g[C++] = t.Space;
      for (var d = 0, Z = this.size(); d < Z; d++)
        C += this.get(d).copyBytesInto(g, C), g[C++] = t.Space;
      return g[C++] = t.RightSquareBracket, C - A;
    }, I.prototype.scalePDFNumbers = function(g, C) {
      for (var A = 0, d = this.size(); A < d; A++) {
        var Z = this.lookup(A);
        if (Z instanceof RI) {
          var i = A % 2 === 0 ? g : C;
          this.set(A, RI.of(Z.asNumber() * i));
        }
      }
    }, I.withContext = function(g) {
      return new I(g);
    }, I;
  }(Mg)
), N0 = {}, wl = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C) {
      var A = this;
      if (g !== N0)
        throw new UZ("PDFBool");
      return A = l.call(this) || this, A.value = C, A;
    }
    return I.prototype.asBoolean = function() {
      return this.value;
    }, I.prototype.clone = function() {
      return this;
    }, I.prototype.toString = function() {
      return String(this.value);
    }, I.prototype.sizeInBytes = function() {
      return this.value ? 4 : 5;
    }, I.prototype.copyBytesInto = function(g, C) {
      return this.value ? (g[C++] = t.t, g[C++] = t.r, g[C++] = t.u, g[C++] = t.e, 4) : (g[C++] = t.f, g[C++] = t.a, g[C++] = t.l, g[C++] = t.s, g[C++] = t.e, 5);
    }, I.True = new I(N0, !0), I.False = new I(N0, !1), I;
  }(Mg)
), FC = new Uint8Array(256);
FC[t.LeftParen] = 1;
FC[t.RightParen] = 1;
FC[t.LessThan] = 1;
FC[t.GreaterThan] = 1;
FC[t.LeftSquareBracket] = 1;
FC[t.RightSquareBracket] = 1;
FC[t.LeftCurly] = 1;
FC[t.RightCurly] = 1;
FC[t.ForwardSlash] = 1;
FC[t.Percent] = 1;
var yC = new Uint8Array(256);
yC[t.Null] = 1;
yC[t.Tab] = 1;
yC[t.Newline] = 1;
yC[t.FormFeed] = 1;
yC[t.CarriageReturn] = 1;
yC[t.Space] = 1;
var eZ = new Uint8Array(256);
for (var _A = 0, qV = 256; _A < qV; _A++)
  eZ[_A] = yC[_A] || FC[_A] ? 1 : 0;
eZ[t.Hash] = 1;
var _V = function(l) {
  return l.replace(/#([\dABCDEF]{2})/g, function(I, g) {
    return YG(g);
  });
}, $V = function(l) {
  return l >= t.ExclamationPoint && l <= t.Tilde && !eZ[l];
}, zi = {}, Ti = /* @__PURE__ */ new Map(), Q = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C) {
      var A = this;
      if (g !== zi)
        throw new UZ("PDFName");
      A = l.call(this) || this;
      for (var d = "/", Z = 0, i = C.length; Z < i; Z++) {
        var B = C[Z], F = oI(B);
        d += $V(F) ? B : "#" + Ld(F);
      }
      return A.encodedName = d, A;
    }
    return I.prototype.asBytes = function() {
      for (var g = [], C = "", A = !1, d = function(c) {
        c !== void 0 && g.push(c), A = !1;
      }, Z = 1, i = this.encodedName.length; Z < i; Z++) {
        var B = this.encodedName[Z], F = oI(B), s = this.encodedName[Z + 1];
        A ? F >= t.Zero && F <= t.Nine || F >= t.a && F <= t.f || F >= t.A && F <= t.F ? (C += B, (C.length === 2 || !(s >= "0" && s <= "9" || s >= "a" && s <= "f" || s >= "A" && s <= "F")) && (d(parseInt(C, 16)), C = "")) : d(F) : F === t.Hash ? A = !0 : d(F);
      }
      return new Uint8Array(g);
    }, I.prototype.decodeText = function() {
      var g = this.asBytes();
      return String.fromCharCode.apply(String, Array.from(g));
    }, I.prototype.asString = function() {
      return this.encodedName;
    }, I.prototype.value = function() {
      return this.encodedName;
    }, I.prototype.clone = function() {
      return this;
    }, I.prototype.toString = function() {
      return this.encodedName;
    }, I.prototype.sizeInBytes = function() {
      return this.encodedName.length;
    }, I.prototype.copyBytesInto = function(g, C) {
      return C += mg(this.encodedName, g, C), this.encodedName.length;
    }, I.of = function(g) {
      var C = _V(g), A = Ti.get(C);
      return A || (A = new I(zi, C), Ti.set(C, A)), A;
    }, I.Length = I.of("Length"), I.FlateDecode = I.of("FlateDecode"), I.Resources = I.of("Resources"), I.Font = I.of("Font"), I.XObject = I.of("XObject"), I.ExtGState = I.of("ExtGState"), I.Contents = I.of("Contents"), I.Type = I.of("Type"), I.Parent = I.of("Parent"), I.MediaBox = I.of("MediaBox"), I.Page = I.of("Page"), I.Annots = I.of("Annots"), I.TrimBox = I.of("TrimBox"), I.ArtBox = I.of("ArtBox"), I.BleedBox = I.of("BleedBox"), I.CropBox = I.of("CropBox"), I.Rotate = I.of("Rotate"), I.Title = I.of("Title"), I.Author = I.of("Author"), I.Subject = I.of("Subject"), I.Creator = I.of("Creator"), I.Keywords = I.of("Keywords"), I.Producer = I.of("Producer"), I.CreationDate = I.of("CreationDate"), I.ModDate = I.of("ModDate"), I;
  }(Mg)
), IW = (
  /** @class */
  function(l) {
    q(I, l);
    function I() {
      return l !== null && l.apply(this, arguments) || this;
    }
    return I.prototype.asNull = function() {
      return null;
    }, I.prototype.clone = function() {
      return this;
    }, I.prototype.toString = function() {
      return "null";
    }, I.prototype.sizeInBytes = function() {
      return 4;
    }, I.prototype.copyBytesInto = function(g, C) {
      return g[C++] = t.n, g[C++] = t.u, g[C++] = t.l, g[C++] = t.l, 4;
    }, I;
  }(Mg)
);
const rg = new IW();
var tI = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C) {
      var A = l.call(this) || this;
      return A.dict = g, A.context = C, A;
    }
    return I.prototype.keys = function() {
      return Array.from(this.dict.keys());
    }, I.prototype.values = function() {
      return Array.from(this.dict.values());
    }, I.prototype.entries = function() {
      return Array.from(this.dict.entries());
    }, I.prototype.set = function(g, C) {
      this.dict.set(g, C);
    }, I.prototype.get = function(g, C) {
      C === void 0 && (C = !1);
      var A = this.dict.get(g);
      if (!(A === rg && !C))
        return A;
    }, I.prototype.has = function(g) {
      var C = this.dict.get(g);
      return C !== void 0 && C !== rg;
    }, I.prototype.lookupMaybe = function(g) {
      for (var C, A = [], d = 1; d < arguments.length; d++)
        A[d - 1] = arguments[d];
      var Z = A.includes(rg), i = (C = this.context).lookupMaybe.apply(C, kI([this.get(g, Z)], A));
      if (!(i === rg && !Z))
        return i;
    }, I.prototype.lookup = function(g) {
      for (var C, A = [], d = 1; d < arguments.length; d++)
        A[d - 1] = arguments[d];
      var Z = A.includes(rg), i = (C = this.context).lookup.apply(C, kI([this.get(g, Z)], A));
      if (!(i === rg && !Z))
        return i;
    }, I.prototype.delete = function(g) {
      return this.dict.delete(g);
    }, I.prototype.asMap = function() {
      return new Map(this.dict);
    }, I.prototype.uniqueKey = function(g) {
      g === void 0 && (g = "");
      for (var C = this.keys(), A = Q.of(this.context.addRandomSuffix(g, 10)); C.includes(A); )
        A = Q.of(this.context.addRandomSuffix(g, 10));
      return A;
    }, I.prototype.clone = function(g) {
      for (var C = I.withContext(g || this.context), A = this.entries(), d = 0, Z = A.length; d < Z; d++) {
        var i = A[d], B = i[0], F = i[1];
        C.set(B, F);
      }
      return C;
    }, I.prototype.toString = function() {
      for (var g = `<<
`, C = this.entries(), A = 0, d = C.length; A < d; A++) {
        var Z = C[A], i = Z[0], B = Z[1];
        g += i.toString() + " " + B.toString() + `
`;
      }
      return g += ">>", g;
    }, I.prototype.sizeInBytes = function() {
      for (var g = 5, C = this.entries(), A = 0, d = C.length; A < d; A++) {
        var Z = C[A], i = Z[0], B = Z[1];
        g += i.sizeInBytes() + B.sizeInBytes() + 2;
      }
      return g;
    }, I.prototype.copyBytesInto = function(g, C) {
      var A = C;
      g[C++] = t.LessThan, g[C++] = t.LessThan, g[C++] = t.Newline;
      for (var d = this.entries(), Z = 0, i = d.length; Z < i; Z++) {
        var B = d[Z], F = B[0], s = B[1];
        C += F.copyBytesInto(g, C), g[C++] = t.Space, C += s.copyBytesInto(g, C), g[C++] = t.Newline;
      }
      return g[C++] = t.GreaterThan, g[C++] = t.GreaterThan, C - A;
    }, I.withContext = function(g) {
      return new I(/* @__PURE__ */ new Map(), g);
    }, I.fromMapWithContext = function(g, C) {
      return new I(g, C);
    }, I;
  }(Mg)
), vg = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g) {
      var C = l.call(this) || this;
      return C.dict = g, C;
    }
    return I.prototype.clone = function(g) {
      throw new dC(this.constructor.name, "clone");
    }, I.prototype.getContentsString = function() {
      throw new dC(this.constructor.name, "getContentsString");
    }, I.prototype.getContents = function() {
      throw new dC(this.constructor.name, "getContents");
    }, I.prototype.getContentsSize = function() {
      throw new dC(this.constructor.name, "getContentsSize");
    }, I.prototype.updateDict = function() {
      var g = this.getContentsSize();
      this.dict.set(Q.Length, RI.of(g));
    }, I.prototype.sizeInBytes = function() {
      return this.updateDict(), this.dict.sizeInBytes() + this.getContentsSize() + 18;
    }, I.prototype.toString = function() {
      this.updateDict();
      var g = this.dict.toString();
      return g += `
stream
`, g += this.getContentsString(), g += `
endstream`, g;
    }, I.prototype.copyBytesInto = function(g, C) {
      this.updateDict();
      var A = C;
      C += this.dict.copyBytesInto(g, C), g[C++] = t.Newline, g[C++] = t.s, g[C++] = t.t, g[C++] = t.r, g[C++] = t.e, g[C++] = t.a, g[C++] = t.m, g[C++] = t.Newline;
      for (var d = this.getContents(), Z = 0, i = d.length; Z < i; Z++)
        g[C++] = d[Z];
      return g[C++] = t.Newline, g[C++] = t.e, g[C++] = t.n, g[C++] = t.d, g[C++] = t.s, g[C++] = t.t, g[C++] = t.r, g[C++] = t.e, g[C++] = t.a, g[C++] = t.m, C - A;
    }, I;
  }(Mg)
), Yl = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C) {
      var A = l.call(this, g) || this;
      return A.contents = C, A;
    }
    return I.prototype.asUint8Array = function() {
      return this.contents.slice();
    }, I.prototype.clone = function(g) {
      return I.of(this.dict.clone(g), this.contents.slice());
    }, I.prototype.getContentsString = function() {
      return vB(this.contents);
    }, I.prototype.getContents = function() {
      return this.contents;
    }, I.prototype.getContentsSize = function() {
      return this.contents.length;
    }, I.of = function(g, C) {
      return new I(g, C);
    }, I;
  }(vg)
), Li = {}, Ei = /* @__PURE__ */ new Map(), OI = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C, A) {
      var d = this;
      if (g !== Li)
        throw new UZ("PDFRef");
      return d = l.call(this) || this, d.objectNumber = C, d.generationNumber = A, d.tag = C + " " + A + " R", d;
    }
    return I.prototype.clone = function() {
      return this;
    }, I.prototype.toString = function() {
      return this.tag;
    }, I.prototype.sizeInBytes = function() {
      return this.tag.length;
    }, I.prototype.copyBytesInto = function(g, C) {
      return C += mg(this.tag, g, C), this.tag.length;
    }, I.of = function(g, C) {
      C === void 0 && (C = 0);
      var A = g + " " + C + " R", d = Ei.get(A);
      return d || (d = new I(Li, g, C), Ei.set(A, d)), d;
    }, I;
  }(Mg)
), HI = (
  /** @class */
  function() {
    function l(I, g) {
      this.name = I, this.args = g || [];
    }
    return l.prototype.clone = function(I) {
      for (var g = new Array(this.args.length), C = 0, A = g.length; C < A; C++) {
        var d = this.args[C];
        g[C] = d instanceof Mg ? d.clone(I) : d;
      }
      return l.of(this.name, g);
    }, l.prototype.toString = function() {
      for (var I = "", g = 0, C = this.args.length; g < C; g++)
        I += String(this.args[g]) + " ";
      return I += this.name, I;
    }, l.prototype.sizeInBytes = function() {
      for (var I = 0, g = 0, C = this.args.length; g < C; g++) {
        var A = this.args[g];
        I += (A instanceof Mg ? A.sizeInBytes() : A.length) + 1;
      }
      return I += this.name.length, I;
    }, l.prototype.copyBytesInto = function(I, g) {
      for (var C = g, A = 0, d = this.args.length; A < d; A++) {
        var Z = this.args[A];
        Z instanceof Mg ? g += Z.copyBytesInto(I, g) : g += mg(Z, I, g), I[g++] = t.Space;
      }
      return g += mg(this.name, I, g), g - C;
    }, l.of = function(I, g) {
      return new l(I, g);
    }, l;
  }()
), r0;
(function(l) {
  l.NonStrokingColor = "sc", l.NonStrokingColorN = "scn", l.NonStrokingColorRgb = "rg", l.NonStrokingColorGray = "g", l.NonStrokingColorCmyk = "k", l.NonStrokingColorspace = "cs", l.StrokingColor = "SC", l.StrokingColorN = "SCN", l.StrokingColorRgb = "RG", l.StrokingColorGray = "G", l.StrokingColorCmyk = "K", l.StrokingColorspace = "CS", l.BeginMarkedContentSequence = "BDC", l.BeginMarkedContent = "BMC", l.EndMarkedContent = "EMC", l.MarkedContentPointWithProps = "DP", l.MarkedContentPoint = "MP", l.DrawObject = "Do", l.ConcatTransformationMatrix = "cm", l.PopGraphicsState = "Q", l.PushGraphicsState = "q", l.SetFlatness = "i", l.SetGraphicsStateParams = "gs", l.SetLineCapStyle = "J", l.SetLineDashPattern = "d", l.SetLineJoinStyle = "j", l.SetLineMiterLimit = "M", l.SetLineWidth = "w", l.SetTextMatrix = "Tm", l.SetRenderingIntent = "ri", l.AppendRectangle = "re", l.BeginInlineImage = "BI", l.BeginInlineImageData = "ID", l.EndInlineImage = "EI", l.ClipEvenOdd = "W*", l.ClipNonZero = "W", l.CloseAndStroke = "s", l.CloseFillEvenOddAndStroke = "b*", l.CloseFillNonZeroAndStroke = "b", l.ClosePath = "h", l.AppendBezierCurve = "c", l.CurveToReplicateFinalPoint = "y", l.CurveToReplicateInitialPoint = "v", l.EndPath = "n", l.FillEvenOddAndStroke = "B*", l.FillEvenOdd = "f*", l.FillNonZeroAndStroke = "B", l.FillNonZero = "f", l.LegacyFillNonZero = "F", l.LineTo = "l", l.MoveTo = "m", l.ShadingFill = "sh", l.StrokePath = "S", l.BeginText = "BT", l.EndText = "ET", l.MoveText = "Td", l.MoveTextSetLeading = "TD", l.NextLine = "T*", l.SetCharacterSpacing = "Tc", l.SetFontAndSize = "Tf", l.SetTextHorizontalScaling = "Tz", l.SetTextLineHeight = "TL", l.SetTextRenderingMode = "Tr", l.SetTextRise = "Ts", l.SetWordSpacing = "Tw", l.ShowText = "Tj", l.ShowTextAdjusted = "TJ", l.ShowTextLine = "'", l.ShowTextLineAndSpace = '"', l.Type3D0 = "d0", l.Type3D1 = "d1", l.BeginCompatibilitySection = "BX", l.EndCompatibilitySection = "EX";
})(r0 || (r0 = {}));
const KI = r0;
var mZ = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C) {
      var A = l.call(this, g) || this;
      return A.computeContents = function() {
        var d = A.getUnencodedContents();
        return A.encode ? Ed.deflate(d) : d;
      }, A.encode = C, C && g.set(Q.of("Filter"), Q.of("FlateDecode")), A.contentsCache = DC.populatedBy(A.computeContents), A;
    }
    return I.prototype.getContents = function() {
      return this.contentsCache.access();
    }, I.prototype.getContentsSize = function() {
      return this.contentsCache.access().length;
    }, I.prototype.getUnencodedContents = function() {
      throw new dC(this.constructor.name, "getUnencodedContents");
    }, I;
  }(vg)
), Rl = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C, A) {
      A === void 0 && (A = !0);
      var d = l.call(this, g, A) || this;
      return d.operators = C, d;
    }
    return I.prototype.push = function() {
      for (var g, C = [], A = 0; A < arguments.length; A++)
        C[A] = arguments[A];
      (g = this.operators).push.apply(g, C);
    }, I.prototype.clone = function(g) {
      for (var C = new Array(this.operators.length), A = 0, d = this.operators.length; A < d; A++)
        C[A] = this.operators[A].clone(g);
      var Z = this, i = Z.dict, B = Z.encode;
      return I.of(i.clone(g), C, B);
    }, I.prototype.getContentsString = function() {
      for (var g = "", C = 0, A = this.operators.length; C < A; C++)
        g += this.operators[C] + `
`;
      return g;
    }, I.prototype.getUnencodedContents = function() {
      for (var g = new Uint8Array(this.getUnencodedContentsSize()), C = 0, A = 0, d = this.operators.length; A < d; A++)
        C += this.operators[A].copyBytesInto(g, C), g[C++] = t.Newline;
      return g;
    }, I.prototype.getUnencodedContentsSize = function() {
      for (var g = 0, C = 0, A = this.operators.length; C < A; C++)
        g += this.operators[C].sizeInBytes() + 1;
      return g;
    }, I.of = function(g, C, A) {
      return A === void 0 && (A = !0), new I(g, C, A);
    }, I;
  }(mZ)
), gW = (
  /** @class */
  function() {
    function l(I) {
      this.seed = I;
    }
    return l.prototype.nextInt = function() {
      var I = Math.sin(this.seed++) * 1e4;
      return I - Math.floor(I);
    }, l.withSeed = function(I) {
      return new l(I);
    }, l;
  }()
), CW = function(l, I) {
  var g = l[0], C = I[0];
  return g.objectNumber - C.objectNumber;
}, z0 = (
  /** @class */
  function() {
    function l() {
      this.largestObjectNumber = 0, this.header = xd.forVersion(1, 7), this.trailerInfo = {}, this.indirectObjects = /* @__PURE__ */ new Map(), this.rng = gW.withSeed(1);
    }
    return l.prototype.assign = function(I, g) {
      this.indirectObjects.set(I, g), I.objectNumber > this.largestObjectNumber && (this.largestObjectNumber = I.objectNumber);
    }, l.prototype.nextRef = function() {
      return this.largestObjectNumber += 1, OI.of(this.largestObjectNumber);
    }, l.prototype.register = function(I) {
      var g = this.nextRef();
      return this.assign(g, I), g;
    }, l.prototype.delete = function(I) {
      return this.indirectObjects.delete(I);
    }, l.prototype.lookupMaybe = function(I) {
      for (var g = [], C = 1; C < arguments.length; C++)
        g[C - 1] = arguments[C];
      var A = g.includes(rg), d = I instanceof OI ? this.indirectObjects.get(I) : I;
      if (!(!d || d === rg && !A)) {
        for (var Z = 0, i = g.length; Z < i; Z++) {
          var B = g[Z];
          if (B === rg) {
            if (d === rg)
              return d;
          } else if (d instanceof B)
            return d;
        }
        throw new Ud(g, d);
      }
    }, l.prototype.lookup = function(I) {
      for (var g = [], C = 1; C < arguments.length; C++)
        g[C - 1] = arguments[C];
      var A = I instanceof OI ? this.indirectObjects.get(I) : I;
      if (g.length === 0)
        return A;
      for (var d = 0, Z = g.length; d < Z; d++) {
        var i = g[d];
        if (i === rg) {
          if (A === rg)
            return A;
        } else if (A instanceof i)
          return A;
      }
      throw new Ud(g, A);
    }, l.prototype.getObjectRef = function(I) {
      for (var g = Array.from(this.indirectObjects.entries()), C = 0, A = g.length; C < A; C++) {
        var d = g[C], Z = d[0], i = d[1];
        if (i === I)
          return Z;
      }
    }, l.prototype.enumerateIndirectObjects = function() {
      return Array.from(this.indirectObjects.entries()).sort(CW);
    }, l.prototype.obj = function(I) {
      if (I instanceof Mg)
        return I;
      if (I == null)
        return rg;
      if (typeof I == "string")
        return Q.of(I);
      if (typeof I == "number")
        return RI.of(I);
      if (typeof I == "boolean")
        return I ? wl.True : wl.False;
      if (Array.isArray(I)) {
        for (var g = LI.withContext(this), C = 0, A = I.length; C < A; C++)
          g.push(this.obj(I[C]));
        return g;
      } else {
        for (var d = tI.withContext(this), Z = Object.keys(I), C = 0, A = Z.length; C < A; C++) {
          var i = Z[C], B = I[i];
          B !== void 0 && d.set(Q.of(i), this.obj(B));
        }
        return d;
      }
    }, l.prototype.stream = function(I, g) {
      return g === void 0 && (g = {}), Yl.of(this.obj(g), k0(I));
    }, l.prototype.flateStream = function(I, g) {
      return g === void 0 && (g = {}), this.stream(Ed.deflate(k0(I)), mI(mI({}, g), { Filter: "FlateDecode" }));
    }, l.prototype.contentStream = function(I, g) {
      return g === void 0 && (g = {}), Rl.of(this.obj(g), I);
    }, l.prototype.formXObject = function(I, g) {
      return g === void 0 && (g = {}), this.contentStream(I, mI(mI({ BBox: this.obj([0, 0, 0, 0]), Matrix: this.obj([1, 0, 0, 1, 0, 0]) }, g), { Type: "XObject", Subtype: "Form" }));
    }, l.prototype.getPushGraphicsStateContentStream = function() {
      if (this.pushGraphicsStateContentStreamRef)
        return this.pushGraphicsStateContentStreamRef;
      var I = this.obj({}), g = HI.of(KI.PushGraphicsState), C = Rl.of(I, [g]);
      return this.pushGraphicsStateContentStreamRef = this.register(C), this.pushGraphicsStateContentStreamRef;
    }, l.prototype.getPopGraphicsStateContentStream = function() {
      if (this.popGraphicsStateContentStreamRef)
        return this.popGraphicsStateContentStreamRef;
      var I = this.obj({}), g = HI.of(KI.PopGraphicsState), C = Rl.of(I, [g]);
      return this.popGraphicsStateContentStreamRef = this.register(C), this.popGraphicsStateContentStreamRef;
    }, l.prototype.addRandomSuffix = function(I, g) {
      return g === void 0 && (g = 4), I + "-" + Math.floor(this.rng.nextInt() * Math.pow(10, g));
    }, l.create = function() {
      return new l();
    }, l;
  }()
), uC = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C, A) {
      A === void 0 && (A = !0);
      var d = l.call(this, g, C) || this;
      return d.normalized = !1, d.autoNormalizeCTM = A, d;
    }
    return I.prototype.clone = function(g) {
      for (var C = I.fromMapWithContext(/* @__PURE__ */ new Map(), g || this.context, this.autoNormalizeCTM), A = this.entries(), d = 0, Z = A.length; d < Z; d++) {
        var i = A[d], B = i[0], F = i[1];
        C.set(B, F);
      }
      return C;
    }, I.prototype.Parent = function() {
      return this.lookupMaybe(Q.Parent, tI);
    }, I.prototype.Contents = function() {
      return this.lookup(Q.of("Contents"));
    }, I.prototype.Annots = function() {
      return this.lookupMaybe(Q.Annots, LI);
    }, I.prototype.BleedBox = function() {
      return this.lookupMaybe(Q.BleedBox, LI);
    }, I.prototype.TrimBox = function() {
      return this.lookupMaybe(Q.TrimBox, LI);
    }, I.prototype.ArtBox = function() {
      return this.lookupMaybe(Q.ArtBox, LI);
    }, I.prototype.Resources = function() {
      var g = this.getInheritableAttribute(Q.Resources);
      return this.context.lookupMaybe(g, tI);
    }, I.prototype.MediaBox = function() {
      var g = this.getInheritableAttribute(Q.MediaBox);
      return this.context.lookup(g, LI);
    }, I.prototype.CropBox = function() {
      var g = this.getInheritableAttribute(Q.CropBox);
      return this.context.lookupMaybe(g, LI);
    }, I.prototype.Rotate = function() {
      var g = this.getInheritableAttribute(Q.Rotate);
      return this.context.lookupMaybe(g, RI);
    }, I.prototype.getInheritableAttribute = function(g) {
      var C;
      return this.ascend(function(A) {
        C || (C = A.get(g));
      }), C;
    }, I.prototype.setParent = function(g) {
      this.set(Q.Parent, g);
    }, I.prototype.addContentStream = function(g) {
      var C = this.normalizedEntries().Contents || this.context.obj([]);
      this.set(Q.Contents, C), C.push(g);
    }, I.prototype.wrapContentStreams = function(g, C) {
      var A = this.Contents();
      return A instanceof LI ? (A.insert(0, g), A.push(C), !0) : !1;
    }, I.prototype.addAnnot = function(g) {
      var C = this.normalizedEntries().Annots;
      C.push(g);
    }, I.prototype.removeAnnot = function(g) {
      var C = this.normalizedEntries().Annots, A = C.indexOf(g);
      A !== void 0 && C.remove(A);
    }, I.prototype.setFontDictionary = function(g, C) {
      var A = this.normalizedEntries().Font;
      A.set(g, C);
    }, I.prototype.newFontDictionaryKey = function(g) {
      var C = this.normalizedEntries().Font;
      return C.uniqueKey(g);
    }, I.prototype.newFontDictionary = function(g, C) {
      var A = this.newFontDictionaryKey(g);
      return this.setFontDictionary(A, C), A;
    }, I.prototype.setXObject = function(g, C) {
      var A = this.normalizedEntries().XObject;
      A.set(g, C);
    }, I.prototype.newXObjectKey = function(g) {
      var C = this.normalizedEntries().XObject;
      return C.uniqueKey(g);
    }, I.prototype.newXObject = function(g, C) {
      var A = this.newXObjectKey(g);
      return this.setXObject(A, C), A;
    }, I.prototype.setExtGState = function(g, C) {
      var A = this.normalizedEntries().ExtGState;
      A.set(g, C);
    }, I.prototype.newExtGStateKey = function(g) {
      var C = this.normalizedEntries().ExtGState;
      return C.uniqueKey(g);
    }, I.prototype.newExtGState = function(g, C) {
      var A = this.newExtGStateKey(g);
      return this.setExtGState(A, C), A;
    }, I.prototype.ascend = function(g) {
      g(this);
      var C = this.Parent();
      C && C.ascend(g);
    }, I.prototype.normalize = function() {
      if (!this.normalized) {
        var g = this.context, C = this.get(Q.Contents), A = this.context.lookup(C);
        A instanceof vg && this.set(Q.Contents, g.obj([C])), this.autoNormalizeCTM && this.wrapContentStreams(this.context.getPushGraphicsStateContentStream(), this.context.getPopGraphicsStateContentStream());
        var d = this.getInheritableAttribute(Q.Resources), Z = g.lookupMaybe(d, tI) || g.obj({});
        this.set(Q.Resources, Z);
        var i = Z.lookupMaybe(Q.Font, tI) || g.obj({});
        Z.set(Q.Font, i);
        var B = Z.lookupMaybe(Q.XObject, tI) || g.obj({});
        Z.set(Q.XObject, B);
        var F = Z.lookupMaybe(Q.ExtGState, tI) || g.obj({});
        Z.set(Q.ExtGState, F);
        var s = this.Annots() || g.obj([]);
        this.set(Q.Annots, s), this.normalized = !0;
      }
    }, I.prototype.normalizedEntries = function() {
      this.normalize();
      var g = this.Annots(), C = this.Resources(), A = this.Contents();
      return {
        Annots: g,
        Resources: C,
        Contents: A,
        Font: C.lookup(Q.Font, tI),
        XObject: C.lookup(Q.XObject, tI),
        ExtGState: C.lookup(Q.ExtGState, tI)
      };
    }, I.InheritableEntries = [
      "Resources",
      "MediaBox",
      "CropBox",
      "Rotate"
    ], I.withContextAndParent = function(g, C) {
      var A = /* @__PURE__ */ new Map();
      return A.set(Q.Type, Q.Page), A.set(Q.Parent, C), A.set(Q.Resources, g.obj({})), A.set(Q.MediaBox, g.obj([0, 0, 612, 792])), new I(A, g, !1);
    }, I.fromMapWithContext = function(g, C, A) {
      return A === void 0 && (A = !0), new I(g, C, A);
    }, I;
  }(tI)
), ji = (
  /** @class */
  function() {
    function l(I, g) {
      var C = this;
      this.traversedObjects = /* @__PURE__ */ new Map(), this.copy = function(A) {
        return A instanceof uC ? C.copyPDFPage(A) : A instanceof tI ? C.copyPDFDict(A) : A instanceof LI ? C.copyPDFArray(A) : A instanceof vg ? C.copyPDFStream(A) : A instanceof OI ? C.copyPDFIndirectObject(A) : A.clone();
      }, this.copyPDFPage = function(A) {
        for (var d = A.clone(), Z = uC.InheritableEntries, i = 0, B = Z.length; i < B; i++) {
          var F = Q.of(Z[i]), s = d.getInheritableAttribute(F);
          !d.get(F) && s && d.set(F, s);
        }
        return d.delete(Q.of("Parent")), C.copyPDFDict(d);
      }, this.copyPDFDict = function(A) {
        if (C.traversedObjects.has(A))
          return C.traversedObjects.get(A);
        var d = A.clone(C.dest);
        C.traversedObjects.set(A, d);
        for (var Z = A.entries(), i = 0, B = Z.length; i < B; i++) {
          var F = Z[i], s = F[0], c = F[1];
          d.set(s, C.copy(c));
        }
        return d;
      }, this.copyPDFArray = function(A) {
        if (C.traversedObjects.has(A))
          return C.traversedObjects.get(A);
        var d = A.clone(C.dest);
        C.traversedObjects.set(A, d);
        for (var Z = 0, i = A.size(); Z < i; Z++) {
          var B = A.get(Z);
          d.set(Z, C.copy(B));
        }
        return d;
      }, this.copyPDFStream = function(A) {
        if (C.traversedObjects.has(A))
          return C.traversedObjects.get(A);
        var d = A.clone(C.dest);
        C.traversedObjects.set(A, d);
        for (var Z = A.dict.entries(), i = 0, B = Z.length; i < B; i++) {
          var F = Z[i], s = F[0], c = F[1];
          d.dict.set(s, C.copy(c));
        }
        return d;
      }, this.copyPDFIndirectObject = function(A) {
        var d = C.traversedObjects.has(A);
        if (!d) {
          var Z = C.dest.nextRef();
          C.traversedObjects.set(A, Z);
          var i = C.src.lookup(A);
          if (i) {
            var B = C.copy(i);
            C.dest.assign(Z, B);
          }
        }
        return C.traversedObjects.get(A);
      }, this.src = I, this.dest = g;
    }
    return l.for = function(I, g) {
      return new l(I, g);
    }, l;
  }()
), FF = (
  /** @class */
  function() {
    function l(I) {
      this.subsections = I ? [[I]] : [], this.chunkIdx = 0, this.chunkLength = I ? 1 : 0;
    }
    return l.prototype.addEntry = function(I, g) {
      this.append({ ref: I, offset: g, deleted: !1 });
    }, l.prototype.addDeletedEntry = function(I, g) {
      this.append({ ref: I, offset: g, deleted: !0 });
    }, l.prototype.toString = function() {
      for (var I = `xref
`, g = 0, C = this.subsections.length; g < C; g++) {
        var A = this.subsections[g];
        I += A[0].ref.objectNumber + " " + A.length + `
`;
        for (var d = 0, Z = A.length; d < Z; d++) {
          var i = A[d];
          I += bC(String(i.offset), 10, "0"), I += " ", I += bC(String(i.ref.generationNumber), 5, "0"), I += " ", I += i.deleted ? "f" : "n", I += ` 
`;
        }
      }
      return I;
    }, l.prototype.sizeInBytes = function() {
      for (var I = 5, g = 0, C = this.subsections.length; g < C; g++) {
        var A = this.subsections[g], d = A.length, Z = A[0];
        I += 2, I += String(Z.ref.objectNumber).length, I += String(d).length, I += 20 * d;
      }
      return I;
    }, l.prototype.copyBytesInto = function(I, g) {
      var C = g;
      return I[g++] = t.x, I[g++] = t.r, I[g++] = t.e, I[g++] = t.f, I[g++] = t.Newline, g += this.copySubsectionsIntoBuffer(this.subsections, I, g), g - C;
    }, l.prototype.copySubsectionsIntoBuffer = function(I, g, C) {
      for (var A = C, d = I.length, Z = 0; Z < d; Z++) {
        var i = this.subsections[Z], B = String(i[0].ref.objectNumber);
        C += mg(B, g, C), g[C++] = t.Space;
        var F = String(i.length);
        C += mg(F, g, C), g[C++] = t.Newline, C += this.copyEntriesIntoBuffer(i, g, C);
      }
      return C - A;
    }, l.prototype.copyEntriesIntoBuffer = function(I, g, C) {
      for (var A = I.length, d = 0; d < A; d++) {
        var Z = I[d], i = bC(String(Z.offset), 10, "0");
        C += mg(i, g, C), g[C++] = t.Space;
        var B = bC(String(Z.ref.generationNumber), 5, "0");
        C += mg(B, g, C), g[C++] = t.Space, g[C++] = Z.deleted ? t.f : t.n, g[C++] = t.Space, g[C++] = t.Newline;
      }
      return 20 * A;
    }, l.prototype.append = function(I) {
      if (this.chunkLength === 0) {
        this.subsections.push([I]), this.chunkIdx = 0, this.chunkLength = 1;
        return;
      }
      var g = this.subsections[this.chunkIdx], C = g[this.chunkLength - 1];
      I.ref.objectNumber - C.ref.objectNumber > 1 ? (this.subsections.push([I]), this.chunkIdx += 1, this.chunkLength = 1) : (g.push(I), this.chunkLength += 1);
    }, l.create = function() {
      return new l({
        ref: OI.of(0, 65535),
        offset: 0,
        deleted: !0
      });
    }, l.createEmpty = function() {
      return new l();
    }, l;
  }()
), hZ = (
  /** @class */
  function() {
    function l(I) {
      this.lastXRefOffset = String(I);
    }
    return l.prototype.toString = function() {
      return `startxref
` + this.lastXRefOffset + `
%%EOF`;
    }, l.prototype.sizeInBytes = function() {
      return 16 + this.lastXRefOffset.length;
    }, l.prototype.copyBytesInto = function(I, g) {
      var C = g;
      return I[g++] = t.s, I[g++] = t.t, I[g++] = t.a, I[g++] = t.r, I[g++] = t.t, I[g++] = t.x, I[g++] = t.r, I[g++] = t.e, I[g++] = t.f, I[g++] = t.Newline, g += mg(this.lastXRefOffset, I, g), I[g++] = t.Newline, I[g++] = t.Percent, I[g++] = t.Percent, I[g++] = t.E, I[g++] = t.O, I[g++] = t.F, g - C;
    }, l.forLastCrossRefSectionOffset = function(I) {
      return new l(I);
    }, l;
  }()
), AW = (
  /** @class */
  function() {
    function l(I) {
      this.dict = I;
    }
    return l.prototype.toString = function() {
      return `trailer
` + this.dict.toString();
    }, l.prototype.sizeInBytes = function() {
      return 8 + this.dict.sizeInBytes();
    }, l.prototype.copyBytesInto = function(I, g) {
      var C = g;
      return I[g++] = t.t, I[g++] = t.r, I[g++] = t.a, I[g++] = t.i, I[g++] = t.l, I[g++] = t.e, I[g++] = t.r, I[g++] = t.Newline, g += this.dict.copyBytesInto(I, g), g - C;
    }, l.of = function(I) {
      return new l(I);
    }, l;
  }()
), sF = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C, A) {
      A === void 0 && (A = !0);
      var d = l.call(this, g.obj({}), A) || this;
      return d.objects = C, d.offsets = d.computeObjectOffsets(), d.offsetsString = d.computeOffsetsString(), d.dict.set(Q.of("Type"), Q.of("ObjStm")), d.dict.set(Q.of("N"), RI.of(d.objects.length)), d.dict.set(Q.of("First"), RI.of(d.offsetsString.length)), d;
    }
    return I.prototype.getObjectsCount = function() {
      return this.objects.length;
    }, I.prototype.clone = function(g) {
      return I.withContextAndObjects(g || this.dict.context, this.objects.slice(), this.encode);
    }, I.prototype.getContentsString = function() {
      for (var g = this.offsetsString, C = 0, A = this.objects.length; C < A; C++) {
        var d = this.objects[C], Z = d[1];
        g += Z + `
`;
      }
      return g;
    }, I.prototype.getUnencodedContents = function() {
      for (var g = new Uint8Array(this.getUnencodedContentsSize()), C = mg(this.offsetsString, g, 0), A = 0, d = this.objects.length; A < d; A++) {
        var Z = this.objects[A], i = Z[1];
        C += i.copyBytesInto(g, C), g[C++] = t.Newline;
      }
      return g;
    }, I.prototype.getUnencodedContentsSize = function() {
      return this.offsetsString.length + nd(this.offsets)[1] + nd(this.objects)[1].sizeInBytes() + 1;
    }, I.prototype.computeOffsetsString = function() {
      for (var g = "", C = 0, A = this.offsets.length; C < A; C++) {
        var d = this.offsets[C], Z = d[0], i = d[1];
        g += Z + " " + i + " ";
      }
      return g;
    }, I.prototype.computeObjectOffsets = function() {
      for (var g = 0, C = new Array(this.objects.length), A = 0, d = this.objects.length; A < d; A++) {
        var Z = this.objects[A], i = Z[0], B = Z[1];
        C[A] = [i.objectNumber, g], g += B.sizeInBytes() + 1;
      }
      return C;
    }, I.withContextAndObjects = function(g, C, A) {
      return A === void 0 && (A = !0), new I(g, C, A);
    }, I;
  }(mZ)
), cF = (
  /** @class */
  function() {
    function l(I, g) {
      var C = this;
      this.parsedObjects = 0, this.shouldWaitForTick = function(A) {
        return C.parsedObjects += A, C.parsedObjects % C.objectsPerTick === 0;
      }, this.context = I, this.objectsPerTick = g;
    }
    return l.prototype.serializeToBuffer = function() {
      return NI(this, void 0, void 0, function() {
        var I, g, C, A, d, Z, i, B, F, s, c, G, V, W, R, U, n;
        return wI(this, function(m) {
          switch (m.label) {
            case 0:
              return [4, this.computeBufferSize()];
            case 1:
              I = m.sent(), g = I.size, C = I.header, A = I.indirectObjects, d = I.xref, Z = I.trailerDict, i = I.trailer, B = 0, F = new Uint8Array(g), B += C.copyBytesInto(F, B), F[B++] = t.Newline, F[B++] = t.Newline, s = 0, c = A.length, m.label = 2;
            case 2:
              return s < c ? (G = A[s], V = G[0], W = G[1], R = String(V.objectNumber), B += mg(R, F, B), F[B++] = t.Space, U = String(V.generationNumber), B += mg(U, F, B), F[B++] = t.Space, F[B++] = t.o, F[B++] = t.b, F[B++] = t.j, F[B++] = t.Newline, B += W.copyBytesInto(F, B), F[B++] = t.Newline, F[B++] = t.e, F[B++] = t.n, F[B++] = t.d, F[B++] = t.o, F[B++] = t.b, F[B++] = t.j, F[B++] = t.Newline, F[B++] = t.Newline, n = W instanceof sF ? W.getObjectsCount() : 1, this.shouldWaitForTick(n) ? [4, KA()] : [3, 4]) : [3, 5];
            case 3:
              m.sent(), m.label = 4;
            case 4:
              return s++, [3, 2];
            case 5:
              return d && (B += d.copyBytesInto(F, B), F[B++] = t.Newline), Z && (B += Z.copyBytesInto(F, B), F[B++] = t.Newline, F[B++] = t.Newline), B += i.copyBytesInto(F, B), [2, F];
          }
        });
      });
    }, l.prototype.computeIndirectObjectSize = function(I) {
      var g = I[0], C = I[1], A = g.sizeInBytes() + 3, d = C.sizeInBytes() + 9;
      return A + d;
    }, l.prototype.createTrailerDict = function() {
      return this.context.obj({
        Size: this.context.largestObjectNumber + 1,
        Root: this.context.trailerInfo.Root,
        Encrypt: this.context.trailerInfo.Encrypt,
        Info: this.context.trailerInfo.Info,
        ID: this.context.trailerInfo.ID
      });
    }, l.prototype.computeBufferSize = function() {
      return NI(this, void 0, void 0, function() {
        var I, g, C, A, d, Z, i, B, F, s, c;
        return wI(this, function(G) {
          switch (G.label) {
            case 0:
              I = xd.forVersion(1, 7), g = I.sizeInBytes() + 2, C = FF.create(), A = this.context.enumerateIndirectObjects(), d = 0, Z = A.length, G.label = 1;
            case 1:
              return d < Z ? (i = A[d], B = i[0], C.addEntry(B, g), g += this.computeIndirectObjectSize(i), this.shouldWaitForTick(1) ? [4, KA()] : [3, 3]) : [3, 4];
            case 2:
              G.sent(), G.label = 3;
            case 3:
              return d++, [3, 1];
            case 4:
              return F = g, g += C.sizeInBytes() + 1, s = AW.of(this.createTrailerDict()), g += s.sizeInBytes() + 2, c = hZ.forLastCrossRefSectionOffset(F), g += c.sizeInBytes(), [2, { size: g, header: I, indirectObjects: A, xref: C, trailerDict: s, trailer: c }];
          }
        });
      });
    }, l.forContext = function(I, g) {
      return new l(I, g);
    }, l;
  }()
), GF = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g) {
      var C = l.call(this) || this;
      return C.data = g, C;
    }
    return I.prototype.clone = function() {
      return I.of(this.data.slice());
    }, I.prototype.toString = function() {
      return "PDFInvalidObject(" + this.data.length + " bytes)";
    }, I.prototype.sizeInBytes = function() {
      return this.data.length;
    }, I.prototype.copyBytesInto = function(g, C) {
      for (var A = this.data.length, d = 0; d < A; d++)
        g[C++] = this.data[d];
      return A;
    }, I.of = function(g) {
      return new I(g);
    }, I;
  }(Mg)
), rC;
(function(l) {
  l[l.Deleted = 0] = "Deleted", l[l.Uncompressed = 1] = "Uncompressed", l[l.Compressed = 2] = "Compressed";
})(rC || (rC = {}));
var lW = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C, A) {
      A === void 0 && (A = !0);
      var d = l.call(this, g, A) || this;
      return d.computeIndex = function() {
        for (var Z = [], i = 0, B = 0, F = d.entries.length; B < F; B++) {
          var s = d.entries[B], c = d.entries[B - 1];
          B === 0 ? Z.push(s.ref.objectNumber) : s.ref.objectNumber - c.ref.objectNumber > 1 && (Z.push(i), Z.push(s.ref.objectNumber), i = 0), i += 1;
        }
        return Z.push(i), Z;
      }, d.computeEntryTuples = function() {
        for (var Z = new Array(d.entries.length), i = 0, B = d.entries.length; i < B; i++) {
          var F = d.entries[i];
          if (F.type === rC.Deleted) {
            var s = F.type, c = F.nextFreeObjectNumber, G = F.ref;
            Z[i] = [s, c, G.generationNumber];
          }
          if (F.type === rC.Uncompressed) {
            var s = F.type, V = F.offset, G = F.ref;
            Z[i] = [s, V, G.generationNumber];
          }
          if (F.type === rC.Compressed) {
            var s = F.type, W = F.objectStreamRef, R = F.index;
            Z[i] = [s, W.objectNumber, R];
          }
        }
        return Z;
      }, d.computeMaxEntryByteWidths = function() {
        for (var Z = d.entryTuplesCache.access(), i = [0, 0, 0], B = 0, F = Z.length; B < F; B++) {
          var s = Z[B], c = s[0], G = s[1], V = s[2], W = id(c), R = id(G), U = id(V);
          W > i[0] && (i[0] = W), R > i[1] && (i[1] = R), U > i[2] && (i[2] = U);
        }
        return i;
      }, d.entries = C || [], d.entryTuplesCache = DC.populatedBy(d.computeEntryTuples), d.maxByteWidthsCache = DC.populatedBy(d.computeMaxEntryByteWidths), d.indexCache = DC.populatedBy(d.computeIndex), g.set(Q.of("Type"), Q.of("XRef")), d;
    }
    return I.prototype.addDeletedEntry = function(g, C) {
      var A = rC.Deleted;
      this.entries.push({ type: A, ref: g, nextFreeObjectNumber: C }), this.entryTuplesCache.invalidate(), this.maxByteWidthsCache.invalidate(), this.indexCache.invalidate(), this.contentsCache.invalidate();
    }, I.prototype.addUncompressedEntry = function(g, C) {
      var A = rC.Uncompressed;
      this.entries.push({ type: A, ref: g, offset: C }), this.entryTuplesCache.invalidate(), this.maxByteWidthsCache.invalidate(), this.indexCache.invalidate(), this.contentsCache.invalidate();
    }, I.prototype.addCompressedEntry = function(g, C, A) {
      var d = rC.Compressed;
      this.entries.push({ type: d, ref: g, objectStreamRef: C, index: A }), this.entryTuplesCache.invalidate(), this.maxByteWidthsCache.invalidate(), this.indexCache.invalidate(), this.contentsCache.invalidate();
    }, I.prototype.clone = function(g) {
      var C = this, A = C.dict, d = C.entries, Z = C.encode;
      return I.of(A.clone(g), d.slice(), Z);
    }, I.prototype.getContentsString = function() {
      for (var g = this.entryTuplesCache.access(), C = this.maxByteWidthsCache.access(), A = "", d = 0, Z = g.length; d < Z; d++) {
        for (var i = g[d], B = i[0], F = i[1], s = i[2], c = hA(QA(B)), G = hA(QA(F)), V = hA(QA(s)), W = C[0] - 1; W >= 0; W--)
          A += (c[W] || 0).toString(2);
        for (var W = C[1] - 1; W >= 0; W--)
          A += (G[W] || 0).toString(2);
        for (var W = C[2] - 1; W >= 0; W--)
          A += (V[W] || 0).toString(2);
      }
      return A;
    }, I.prototype.getUnencodedContents = function() {
      for (var g = this.entryTuplesCache.access(), C = this.maxByteWidthsCache.access(), A = new Uint8Array(this.getUnencodedContentsSize()), d = 0, Z = 0, i = g.length; Z < i; Z++) {
        for (var B = g[Z], F = B[0], s = B[1], c = B[2], G = hA(QA(F)), V = hA(QA(s)), W = hA(QA(c)), R = C[0] - 1; R >= 0; R--)
          A[d++] = G[R] || 0;
        for (var R = C[1] - 1; R >= 0; R--)
          A[d++] = V[R] || 0;
        for (var R = C[2] - 1; R >= 0; R--)
          A[d++] = W[R] || 0;
      }
      return A;
    }, I.prototype.getUnencodedContentsSize = function() {
      var g = this.maxByteWidthsCache.access(), C = KG(g);
      return C * this.entries.length;
    }, I.prototype.updateDict = function() {
      l.prototype.updateDict.call(this);
      var g = this.maxByteWidthsCache.access(), C = this.indexCache.access(), A = this.dict.context;
      this.dict.set(Q.of("W"), A.obj(g)), this.dict.set(Q.of("Index"), A.obj(C));
    }, I.create = function(g, C) {
      C === void 0 && (C = !0);
      var A = new I(g, [], C);
      return A.addDeletedEntry(OI.of(0, 65535), 0), A;
    }, I.of = function(g, C, A) {
      return A === void 0 && (A = !0), new I(g, C, A);
    }, I;
  }(mZ)
), dW = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C, A, d) {
      var Z = l.call(this, g, C) || this;
      return Z.encodeStreams = A, Z.objectsPerStream = d, Z;
    }
    return I.prototype.computeBufferSize = function() {
      return NI(this, void 0, void 0, function() {
        var g, C, A, d, Z, i, B, F, W, R, s, n, c, G, U, V, W, R, U, n, m, e, N, w;
        return wI(this, function(S) {
          switch (S.label) {
            case 0:
              g = this.context.largestObjectNumber + 1, C = xd.forVersion(1, 7), A = C.sizeInBytes() + 2, d = lW.create(this.createTrailerDict(), this.encodeStreams), Z = [], i = [], B = [], F = this.context.enumerateIndirectObjects(), W = 0, R = F.length, S.label = 1;
            case 1:
              return W < R ? (s = F[W], n = s[0], c = s[1], G = n === this.context.trailerInfo.Encrypt || c instanceof vg || c instanceof GF || n.generationNumber !== 0, G ? (Z.push(s), d.addUncompressedEntry(n, A), A += this.computeIndirectObjectSize(s), this.shouldWaitForTick(1) ? [4, KA()] : [3, 3]) : [3, 4]) : [3, 6];
            case 2:
              S.sent(), S.label = 3;
            case 3:
              return [3, 5];
            case 4:
              U = nd(i), V = nd(B), (!U || U.length % this.objectsPerStream === 0) && (U = [], i.push(U), V = OI.of(g++), B.push(V)), d.addCompressedEntry(n, V, U.length), U.push(s), S.label = 5;
            case 5:
              return W++, [3, 1];
            case 6:
              W = 0, R = i.length, S.label = 7;
            case 7:
              return W < R ? (U = i[W], n = B[W], m = sF.withContextAndObjects(this.context, U, this.encodeStreams), d.addUncompressedEntry(n, A), A += this.computeIndirectObjectSize([n, m]), Z.push([n, m]), this.shouldWaitForTick(U.length) ? [4, KA()] : [3, 9]) : [3, 10];
            case 8:
              S.sent(), S.label = 9;
            case 9:
              return W++, [3, 7];
            case 10:
              return e = OI.of(g++), d.dict.set(Q.of("Size"), RI.of(g)), d.addUncompressedEntry(e, A), N = A, A += this.computeIndirectObjectSize([e, d]), Z.push([e, d]), w = hZ.forLastCrossRefSectionOffset(N), A += w.sizeInBytes(), [2, { size: A, header: C, indirectObjects: Z, trailer: w }];
          }
        });
      });
    }, I.forContext = function(g, C, A, d) {
      return A === void 0 && (A = !0), d === void 0 && (d = 50), new I(g, C, A, d);
    }, I;
  }(cF)
), cI = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g) {
      var C = l.call(this) || this;
      return C.value = g, C;
    }
    return I.prototype.asBytes = function() {
      for (var g = this.value + (this.value.length % 2 === 1 ? "0" : ""), C = g.length, A = new Uint8Array(g.length / 2), d = 0, Z = 0; d < C; ) {
        var i = parseInt(g.substring(d, d + 2), 16);
        A[Z] = i, d += 2, Z += 1;
      }
      return A;
    }, I.prototype.decodeText = function() {
      var g = this.asBytes();
      return _B(g) ? fB(g) : iF(g);
    }, I.prototype.decodeDate = function() {
      var g = this.decodeText(), C = jB(g);
      if (!C)
        throw new BF(g);
      return C;
    }, I.prototype.asString = function() {
      return this.value;
    }, I.prototype.clone = function() {
      return I.of(this.value);
    }, I.prototype.toString = function() {
      return "<" + this.value + ">";
    }, I.prototype.sizeInBytes = function() {
      return this.value.length + 2;
    }, I.prototype.copyBytesInto = function(g, C) {
      return g[C++] = t.LessThan, C += mg(this.value, g, C), g[C++] = t.GreaterThan, this.value.length + 2;
    }, I.of = function(g) {
      return new I(g);
    }, I.fromText = function(g) {
      for (var C = LG(g), A = "", d = 0, Z = C.length; d < Z; d++)
        A += Xl(C[d], 4);
      return new I(A);
    }, I;
  }(Mg)
), od = (
  /** @class */
  function() {
    function l(I, g) {
      this.encoding = I === Nl.ZapfDingbats ? Pl.ZapfDingbats : I === Nl.Symbol ? Pl.Symbol : Pl.WinAnsi, this.font = QV.load(I), this.fontName = this.font.FontName, this.customName = g;
    }
    return l.prototype.encodeText = function(I) {
      for (var g = this.encodeTextAsGlyphs(I), C = new Array(g.length), A = 0, d = g.length; A < d; A++)
        C[A] = Ld(g[A].code);
      return cI.of(C.join(""));
    }, l.prototype.widthOfTextAtSize = function(I, g) {
      for (var C = this.encodeTextAsGlyphs(I), A = 0, d = 0, Z = C.length; d < Z; d++) {
        var i = C[d].name, B = (C[d + 1] || {}).name, F = this.font.getXAxisKerningForPair(i, B) || 0;
        A += this.widthOfGlyph(i) + F;
      }
      var s = g / 1e3;
      return A * s;
    }, l.prototype.heightOfFontAtSize = function(I, g) {
      g === void 0 && (g = {});
      var C = g.descender, A = C === void 0 ? !0 : C, d = this.font, Z = d.Ascender, i = d.Descender, B = d.FontBBox, F = Z || B[3], s = i || B[1], c = F - s;
      return A || (c += i || 0), c / 1e3 * I;
    }, l.prototype.sizeOfFontAtHeight = function(I) {
      var g = this.font, C = g.Ascender, A = g.Descender, d = g.FontBBox, Z = C || d[3], i = A || d[1];
      return 1e3 * I / (Z - i);
    }, l.prototype.embedIntoContext = function(I, g) {
      var C = I.obj({
        Type: "Font",
        Subtype: "Type1",
        BaseFont: this.customName || this.fontName,
        Encoding: this.encoding === Pl.WinAnsi ? "WinAnsiEncoding" : void 0
      });
      return g ? (I.assign(g, C), g) : I.register(C);
    }, l.prototype.widthOfGlyph = function(I) {
      return this.font.getWidthOfGlyph(I) || 250;
    }, l.prototype.encodeTextAsGlyphs = function(I) {
      for (var g = Array.from(I), C = new Array(g.length), A = 0, d = g.length; A < d; A++) {
        var Z = wG(g[A]);
        C[A] = this.encoding.encodeUnicodeCodePoint(Z);
      }
      return C;
    }, l.for = function(I, g) {
      return new l(I, g);
    }, l;
  }()
), ZW = function(l, I) {
  for (var g = new Array(l.length), C = 0, A = l.length; C < A; C++) {
    var d = l[C], Z = vi(Bd(I(d))), i = vi.apply(void 0, d.codePoints.map(BW));
    g[C] = [Z, i];
  }
  return iW(g);
}, iW = function(l) {
  return `/CIDInit /ProcSet findresource begin
12 dict begin
begincmap
/CIDSystemInfo <<
  /Registry (Adobe)
  /Ordering (UCS)
  /Supplement 0
>> def
/CMapName /Adobe-Identity-UCS def
/CMapType 2 def
1 begincodespacerange
<0000><ffff>
endcodespacerange
` + l.length + ` beginbfchar
` + l.map(function(I) {
    var g = I[0], C = I[1];
    return g + " " + C;
  }).join(`
`) + `
endbfchar
endcmap
CMapName currentdict /CMap defineresource pop
end
end`;
}, vi = function() {
  for (var l = [], I = 0; I < arguments.length; I++)
    l[I] = arguments[I];
  return "<" + l.join("") + ">";
}, Bd = function(l) {
  return Xl(l, 4);
}, BW = function(l) {
  if (EG(l))
    return Bd(l);
  if (jG(l)) {
    var I = xB(l), g = OB(l);
    return "" + Bd(I) + Bd(g);
  }
  var C = Ld(l), A = "0x" + C + " is not a valid UTF-8 or UTF-16 codepoint.";
  throw new Error(A);
}, FW = function(l) {
  var I = 0, g = function(C) {
    I |= 1 << C - 1;
  };
  return l.fixedPitch && g(1), l.serif && g(2), g(3), l.script && g(4), l.nonsymbolic && g(6), l.italic && g(7), l.allCap && g(17), l.smallCap && g(18), l.forceBold && g(19), I;
}, sW = function(l) {
  var I = l["OS/2"] ? l["OS/2"].sFamilyClass : 0, g = FW({
    fixedPitch: l.post.isFixedPitch,
    serif: 1 <= I && I <= 7,
    symbolic: !0,
    script: I === 10,
    italic: l.head.macStyle.italic
  });
  return g;
}, xI = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g) {
      var C = l.call(this) || this;
      return C.value = g, C;
    }
    return I.prototype.asBytes = function() {
      for (var g = [], C = "", A = !1, d = function(c) {
        c !== void 0 && g.push(c), A = !1;
      }, Z = 0, i = this.value.length; Z < i; Z++) {
        var B = this.value[Z], F = oI(B), s = this.value[Z + 1];
        A ? F === t.Newline || F === t.CarriageReturn ? d() : F === t.n ? d(t.Newline) : F === t.r ? d(t.CarriageReturn) : F === t.t ? d(t.Tab) : F === t.b ? d(t.Backspace) : F === t.f ? d(t.FormFeed) : F === t.LeftParen ? d(t.LeftParen) : F === t.RightParen ? d(t.RightParen) : F === t.Backspace ? d(t.BackSlash) : F >= t.Zero && F <= t.Seven ? (C += B, (C.length === 3 || !(s >= "0" && s <= "7")) && (d(parseInt(C, 8)), C = "")) : d(F) : F === t.BackSlash ? A = !0 : d(F);
      }
      return new Uint8Array(g);
    }, I.prototype.decodeText = function() {
      var g = this.asBytes();
      return _B(g) ? fB(g) : iF(g);
    }, I.prototype.decodeDate = function() {
      var g = this.decodeText(), C = jB(g);
      if (!C)
        throw new BF(g);
      return C;
    }, I.prototype.asString = function() {
      return this.value;
    }, I.prototype.clone = function() {
      return I.of(this.value);
    }, I.prototype.toString = function() {
      return "(" + this.value + ")";
    }, I.prototype.sizeInBytes = function() {
      return this.value.length + 2;
    }, I.prototype.copyBytesInto = function(g, C) {
      return g[C++] = t.LeftParen, C += mg(this.value, g, C), g[C++] = t.RightParen, this.value.length + 2;
    }, I.of = function(g) {
      return new I(g);
    }, I.fromDate = function(g) {
      var C = bC(String(g.getUTCFullYear()), 4, "0"), A = bC(String(g.getUTCMonth() + 1), 2, "0"), d = bC(String(g.getUTCDate()), 2, "0"), Z = bC(String(g.getUTCHours()), 2, "0"), i = bC(String(g.getUTCMinutes()), 2, "0"), B = bC(String(g.getUTCSeconds()), 2, "0");
      return new I("D:" + C + A + d + Z + i + B + "Z");
    }, I;
  }(Mg)
), QZ = (
  /** @class */
  function() {
    function l(I, g, C, A) {
      var d = this;
      this.allGlyphsInFontSortedById = function() {
        for (var Z = new Array(d.font.characterSet.length), i = 0, B = Z.length; i < B; i++) {
          var F = d.font.characterSet[i];
          Z[i] = d.font.glyphForCodePoint(F);
        }
        return kG(Z.sort(pG), function(s) {
          return s.id;
        });
      }, this.font = I, this.scale = 1e3 / this.font.unitsPerEm, this.fontData = g, this.fontName = this.font.postscriptName || "Font", this.customName = C, this.fontFeatures = A, this.baseFontName = "", this.glyphCache = DC.populatedBy(this.allGlyphsInFontSortedById);
    }
    return l.for = function(I, g, C, A) {
      return NI(this, void 0, void 0, function() {
        var d;
        return wI(this, function(Z) {
          switch (Z.label) {
            case 0:
              return [4, I.create(g)];
            case 1:
              return d = Z.sent(), [2, new l(d, g, C, A)];
          }
        });
      });
    }, l.prototype.encodeText = function(I) {
      for (var g = this.font.layout(I, this.fontFeatures).glyphs, C = new Array(g.length), A = 0, d = g.length; A < d; A++)
        C[A] = Xl(g[A].id, 4);
      return cI.of(C.join(""));
    }, l.prototype.widthOfTextAtSize = function(I, g) {
      for (var C = this.font.layout(I, this.fontFeatures).glyphs, A = 0, d = 0, Z = C.length; d < Z; d++)
        A += C[d].advanceWidth * this.scale;
      var i = g / 1e3;
      return A * i;
    }, l.prototype.heightOfFontAtSize = function(I, g) {
      g === void 0 && (g = {});
      var C = g.descender, A = C === void 0 ? !0 : C, d = this.font, Z = d.ascent, i = d.descent, B = d.bbox, F = (Z || B.maxY) * this.scale, s = (i || B.minY) * this.scale, c = F - s;
      return A || (c -= Math.abs(i) || 0), c / 1e3 * I;
    }, l.prototype.sizeOfFontAtHeight = function(I) {
      var g = this.font, C = g.ascent, A = g.descent, d = g.bbox, Z = (C || d.maxY) * this.scale, i = (A || d.minY) * this.scale;
      return 1e3 * I / (Z - i);
    }, l.prototype.embedIntoContext = function(I, g) {
      return this.baseFontName = this.customName || I.addRandomSuffix(this.fontName), this.embedFontDict(I, g);
    }, l.prototype.embedFontDict = function(I, g) {
      return NI(this, void 0, void 0, function() {
        var C, A, d;
        return wI(this, function(Z) {
          switch (Z.label) {
            case 0:
              return [4, this.embedCIDFontDict(I)];
            case 1:
              return C = Z.sent(), A = this.embedUnicodeCmap(I), d = I.obj({
                Type: "Font",
                Subtype: "Type0",
                BaseFont: this.baseFontName,
                Encoding: "Identity-H",
                DescendantFonts: [C],
                ToUnicode: A
              }), g ? (I.assign(g, d), [2, g]) : [2, I.register(d)];
          }
        });
      });
    }, l.prototype.isCFF = function() {
      return this.font.cff;
    }, l.prototype.embedCIDFontDict = function(I) {
      return NI(this, void 0, void 0, function() {
        var g, C;
        return wI(this, function(A) {
          switch (A.label) {
            case 0:
              return [4, this.embedFontDescriptor(I)];
            case 1:
              return g = A.sent(), C = I.obj({
                Type: "Font",
                Subtype: this.isCFF() ? "CIDFontType0" : "CIDFontType2",
                CIDToGIDMap: "Identity",
                BaseFont: this.baseFontName,
                CIDSystemInfo: {
                  Registry: xI.of("Adobe"),
                  Ordering: xI.of("Identity"),
                  Supplement: 0
                },
                FontDescriptor: g,
                W: this.computeWidths()
              }), [2, I.register(C)];
          }
        });
      });
    }, l.prototype.embedFontDescriptor = function(I) {
      return NI(this, void 0, void 0, function() {
        var g, C, A, d, Z, i, B, F, s, c, G, V, W, R, U;
        return wI(this, function(n) {
          switch (n.label) {
            case 0:
              return [4, this.embedFontStream(I)];
            case 1:
              return g = n.sent(), C = this.scale, A = this.font, d = A.italicAngle, Z = A.ascent, i = A.descent, B = A.capHeight, F = A.xHeight, s = this.font.bbox, c = s.minX, G = s.minY, V = s.maxX, W = s.maxY, R = I.obj((U = {
                Type: "FontDescriptor",
                FontName: this.baseFontName,
                Flags: sW(this.font),
                FontBBox: [c * C, G * C, V * C, W * C],
                ItalicAngle: d,
                Ascent: Z * C,
                Descent: i * C,
                CapHeight: (B || Z) * C,
                XHeight: (F || 0) * C,
                // Not sure how to compute/find this, nor is anybody else really:
                // https://stackoverflow.com/questions/35485179/stemv-value-of-the-truetype-font
                StemV: 0
              }, U[this.isCFF() ? "FontFile3" : "FontFile2"] = g, U)), [2, I.register(R)];
          }
        });
      });
    }, l.prototype.serializeFont = function() {
      return NI(this, void 0, void 0, function() {
        return wI(this, function(I) {
          return [2, this.fontData];
        });
      });
    }, l.prototype.embedFontStream = function(I) {
      return NI(this, void 0, void 0, function() {
        var g, C, A;
        return wI(this, function(d) {
          switch (d.label) {
            case 0:
              return A = (C = I).flateStream, [4, this.serializeFont()];
            case 1:
              return g = A.apply(C, [d.sent(), {
                Subtype: this.isCFF() ? "CIDFontType0C" : void 0
              }]), [2, I.register(g)];
          }
        });
      });
    }, l.prototype.embedUnicodeCmap = function(I) {
      var g = ZW(this.glyphCache.access(), this.glyphId.bind(this)), C = I.flateStream(g);
      return I.register(C);
    }, l.prototype.glyphId = function(I) {
      return I ? I.id : -1;
    }, l.prototype.computeWidths = function() {
      for (var I = this.glyphCache.access(), g = [], C = [], A = 0, d = I.length; A < d; A++) {
        var Z = I[A], i = I[A - 1], B = this.glyphId(Z), F = this.glyphId(i);
        A === 0 ? g.push(B) : B - F !== 1 && (g.push(C), g.push(B), C = []), C.push(Z.advanceWidth * this.scale);
      }
      return g.push(C), g;
    }, l;
  }()
), cW = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C, A, d) {
      var Z = l.call(this, g, C, A, d) || this;
      return Z.subset = Z.font.createSubset(), Z.glyphs = [], Z.glyphCache = DC.populatedBy(function() {
        return Z.glyphs;
      }), Z.glyphIdMap = /* @__PURE__ */ new Map(), Z;
    }
    return I.for = function(g, C, A, d) {
      return NI(this, void 0, void 0, function() {
        var Z;
        return wI(this, function(i) {
          switch (i.label) {
            case 0:
              return [4, g.create(C)];
            case 1:
              return Z = i.sent(), [2, new I(Z, C, A, d)];
          }
        });
      });
    }, I.prototype.encodeText = function(g) {
      for (var C = this.font.layout(g, this.fontFeatures).glyphs, A = new Array(C.length), d = 0, Z = C.length; d < Z; d++) {
        var i = C[d], B = this.subset.includeGlyph(i);
        this.glyphs[B - 1] = i, this.glyphIdMap.set(i.id, B), A[d] = Xl(B, 4);
      }
      return this.glyphCache.invalidate(), cI.of(A.join(""));
    }, I.prototype.isCFF = function() {
      return this.subset.cff;
    }, I.prototype.glyphId = function(g) {
      return g ? this.glyphIdMap.get(g.id) : -1;
    }, I.prototype.serializeFont = function() {
      var g = this;
      return new Promise(function(C, A) {
        var d = [];
        g.subset.encodeStream().on("data", function(Z) {
          return d.push(Z);
        }).on("end", function() {
          return C(HG(d));
        }).on("error", function(Z) {
          return A(Z);
        });
      });
    }, I;
  }(QZ)
), T0;
(function(l) {
  l.Source = "Source", l.Data = "Data", l.Alternative = "Alternative", l.Supplement = "Supplement", l.EncryptedPayload = "EncryptedPayload", l.FormData = "EncryptedPayload", l.Schema = "Schema", l.Unspecified = "Unspecified";
})(T0 || (T0 = {}));
var GW = (
  /** @class */
  function() {
    function l(I, g, C) {
      C === void 0 && (C = {}), this.fileData = I, this.fileName = g, this.options = C;
    }
    return l.for = function(I, g, C) {
      return C === void 0 && (C = {}), new l(I, g, C);
    }, l.prototype.embedIntoContext = function(I, g) {
      return NI(this, void 0, void 0, function() {
        var C, A, d, Z, i, B, F, s, c;
        return wI(this, function(G) {
          return C = this.options, A = C.mimeType, d = C.description, Z = C.creationDate, i = C.modificationDate, B = C.afRelationship, F = I.flateStream(this.fileData, {
            Type: "EmbeddedFile",
            Subtype: A ?? void 0,
            Params: {
              Size: this.fileData.length,
              CreationDate: Z ? xI.fromDate(Z) : void 0,
              ModDate: i ? xI.fromDate(i) : void 0
            }
          }), s = I.register(F), c = I.obj({
            Type: "Filespec",
            F: xI.of(this.fileName),
            UF: cI.fromText(this.fileName),
            EF: { F: s },
            Desc: d ? cI.fromText(d) : void 0,
            AFRelationship: B ?? void 0
          }), g ? (I.assign(g, c), [2, g]) : [2, I.register(c)];
        });
      });
    }, l;
  }()
), xi = [
  65472,
  65473,
  65474,
  65475,
  65477,
  65478,
  65479,
  65480,
  65481,
  65482,
  65483,
  65484,
  65485,
  65486,
  65487
], XA;
(function(l) {
  l.DeviceGray = "DeviceGray", l.DeviceRGB = "DeviceRGB", l.DeviceCMYK = "DeviceCMYK";
})(XA || (XA = {}));
var VW = {
  1: XA.DeviceGray,
  3: XA.DeviceRGB,
  4: XA.DeviceCMYK
}, VF = (
  /** @class */
  function() {
    function l(I, g, C, A, d) {
      this.imageData = I, this.bitsPerComponent = g, this.width = C, this.height = A, this.colorSpace = d;
    }
    return l.for = function(I) {
      return NI(this, void 0, void 0, function() {
        var g, C, A, d, Z, i, B, F, s, c;
        return wI(this, function(G) {
          if (g = new DataView(I.buffer), C = g.getUint16(0), C !== 65496)
            throw new Error("SOI not found in JPEG");
          for (A = 2; A < g.byteLength && (d = g.getUint16(A), A += 2, !xi.includes(d)); )
            A += g.getUint16(A);
          if (!xi.includes(d))
            throw new Error("Invalid JPEG");
          if (A += 2, Z = g.getUint8(A++), i = g.getUint16(A), A += 2, B = g.getUint16(A), A += 2, F = g.getUint8(A++), s = VW[F], !s)
            throw new Error("Unknown JPEG channel.");
          return c = s, [2, new l(I, Z, B, i, c)];
        });
      });
    }, l.prototype.embedIntoContext = function(I, g) {
      return NI(this, void 0, void 0, function() {
        var C;
        return wI(this, function(A) {
          return C = I.stream(this.imageData, {
            Type: "XObject",
            Subtype: "Image",
            BitsPerComponent: this.bitsPerComponent,
            Width: this.width,
            Height: this.height,
            ColorSpace: this.colorSpace,
            Filter: "DCTDecode",
            // CMYK JPEG streams in PDF are typically stored complemented,
            // with 1 as 'off' and 0 as 'on' (PDF 32000-1:2008, 8.6.4.4).
            //
            // Standalone CMYK JPEG (usually exported by Photoshop) are
            // stored inverse, with 0 as 'off' and 1 as 'on', like RGB.
            //
            // Applying a swap here as a hedge that most bytes passing
            // through this method will benefit from it.
            Decode: this.colorSpace === XA.DeviceCMYK ? [1, 0, 1, 0, 1, 0, 1, 0] : void 0
          }), g ? (I.assign(g, C), [2, g]) : [2, I.register(C)];
        });
      });
    }, l;
  }()
), j = {};
j.toRGBA8 = function(l) {
  var I = l.width, g = l.height;
  if (l.tabs.acTL == null) return [j.toRGBA8.decodeImage(l.data, I, g, l).buffer];
  var C = [];
  l.frames[0].data == null && (l.frames[0].data = l.data);
  for (var A = I * g * 4, d = new Uint8Array(A), Z = new Uint8Array(A), i = new Uint8Array(A), B = 0; B < l.frames.length; B++) {
    var F = l.frames[B], s = F.rect.x, c = F.rect.y, G = F.rect.width, V = F.rect.height, W = j.toRGBA8.decodeImage(F.data, G, V, l);
    if (B != 0) for (var R = 0; R < A; R++) i[R] = d[R];
    if (F.blend == 0 ? j._copyTile(W, G, V, d, I, g, s, c, 0) : F.blend == 1 && j._copyTile(W, G, V, d, I, g, s, c, 1), C.push(d.buffer.slice(0)), F.dispose != 0) {
      if (F.dispose == 1) j._copyTile(Z, G, V, d, I, g, s, c, 0);
      else if (F.dispose == 2) for (var R = 0; R < A; R++) d[R] = i[R];
    }
  }
  return C;
};
j.toRGBA8.decodeImage = function(l, I, g, C) {
  var A = I * g, d = j.decode._getBPP(C), Z = Math.ceil(I * d / 8), i = new Uint8Array(A * 4), B = new Uint32Array(i.buffer), F = C.ctype, s = C.depth, c = j._bin.readUshort;
  if (F == 6) {
    var G = A << 2;
    if (s == 8) for (var V = 0; V < G; V += 4)
      i[V] = l[V], i[V + 1] = l[V + 1], i[V + 2] = l[V + 2], i[V + 3] = l[V + 3];
    if (s == 16) for (var V = 0; V < G; V++)
      i[V] = l[V << 1];
  } else if (F == 2) {
    var W = C.tabs.tRNS;
    if (W == null) {
      if (s == 8) for (var V = 0; V < A; V++) {
        var R = V * 3;
        B[V] = 255 << 24 | l[R + 2] << 16 | l[R + 1] << 8 | l[R];
      }
      if (s == 16) for (var V = 0; V < A; V++) {
        var R = V * 6;
        B[V] = 255 << 24 | l[R + 4] << 16 | l[R + 2] << 8 | l[R];
      }
    } else {
      var U = W[0], n = W[1], m = W[2];
      if (s == 8) for (var V = 0; V < A; V++) {
        var e = V << 2, R = V * 3;
        B[V] = 255 << 24 | l[R + 2] << 16 | l[R + 1] << 8 | l[R], l[R] == U && l[R + 1] == n && l[R + 2] == m && (i[e + 3] = 0);
      }
      if (s == 16) for (var V = 0; V < A; V++) {
        var e = V << 2, R = V * 6;
        B[V] = 255 << 24 | l[R + 4] << 16 | l[R + 2] << 8 | l[R], c(l, R) == U && c(l, R + 2) == n && c(l, R + 4) == m && (i[e + 3] = 0);
      }
    }
  } else if (F == 3) {
    var N = C.tabs.PLTE, w = C.tabs.tRNS, S = w ? w.length : 0;
    if (s == 1) for (var Y = 0; Y < g; Y++)
      for (var M = Y * Z, y = Y * I, V = 0; V < I; V++) {
        var e = y + V << 2, r = l[M + (V >> 3)] >> 7 - ((V & 7) << 0) & 1, z = 3 * r;
        i[e] = N[z], i[e + 1] = N[z + 1], i[e + 2] = N[z + 2], i[e + 3] = r < S ? w[r] : 255;
      }
    if (s == 2) for (var Y = 0; Y < g; Y++)
      for (var M = Y * Z, y = Y * I, V = 0; V < I; V++) {
        var e = y + V << 2, r = l[M + (V >> 2)] >> 6 - ((V & 3) << 1) & 3, z = 3 * r;
        i[e] = N[z], i[e + 1] = N[z + 1], i[e + 2] = N[z + 2], i[e + 3] = r < S ? w[r] : 255;
      }
    if (s == 4) for (var Y = 0; Y < g; Y++)
      for (var M = Y * Z, y = Y * I, V = 0; V < I; V++) {
        var e = y + V << 2, r = l[M + (V >> 1)] >> 4 - ((V & 1) << 2) & 15, z = 3 * r;
        i[e] = N[z], i[e + 1] = N[z + 1], i[e + 2] = N[z + 2], i[e + 3] = r < S ? w[r] : 255;
      }
    if (s == 8) for (var V = 0; V < A; V++) {
      var e = V << 2, r = l[V], z = 3 * r;
      i[e] = N[z], i[e + 1] = N[z + 1], i[e + 2] = N[z + 2], i[e + 3] = r < S ? w[r] : 255;
    }
  } else if (F == 4) {
    if (s == 8) for (var V = 0; V < A; V++) {
      var e = V << 2, E = V << 1, X = l[E];
      i[e] = X, i[e + 1] = X, i[e + 2] = X, i[e + 3] = l[E + 1];
    }
    if (s == 16) for (var V = 0; V < A; V++) {
      var e = V << 2, E = V << 2, X = l[E];
      i[e] = X, i[e + 1] = X, i[e + 2] = X, i[e + 3] = l[E + 2];
    }
  } else if (F == 0)
    for (var U = C.tabs.tRNS ? C.tabs.tRNS : -1, Y = 0; Y < g; Y++) {
      var O = Y * Z, _ = Y * I;
      if (s == 1) for (var p = 0; p < I; p++) {
        var X = 255 * (l[O + (p >>> 3)] >>> 7 - (p & 7) & 1), T = X == U * 255 ? 0 : 255;
        B[_ + p] = T << 24 | X << 16 | X << 8 | X;
      }
      else if (s == 2) for (var p = 0; p < I; p++) {
        var X = 85 * (l[O + (p >>> 2)] >>> 6 - ((p & 3) << 1) & 3), T = X == U * 85 ? 0 : 255;
        B[_ + p] = T << 24 | X << 16 | X << 8 | X;
      }
      else if (s == 4) for (var p = 0; p < I; p++) {
        var X = 17 * (l[O + (p >>> 1)] >>> 4 - ((p & 1) << 2) & 15), T = X == U * 17 ? 0 : 255;
        B[_ + p] = T << 24 | X << 16 | X << 8 | X;
      }
      else if (s == 8) for (var p = 0; p < I; p++) {
        var X = l[O + p], T = X == U ? 0 : 255;
        B[_ + p] = T << 24 | X << 16 | X << 8 | X;
      }
      else if (s == 16) for (var p = 0; p < I; p++) {
        var X = l[O + (p << 1)], T = c(l, O + (p << V)) == U ? 0 : 255;
        B[_ + p] = T << 24 | X << 16 | X << 8 | X;
      }
    }
  return i;
};
j.decode = function(l) {
  for (var I = new Uint8Array(l), g = 8, C = j._bin, A = C.readUshort, d = C.readUint, Z = { tabs: {}, frames: [] }, i = new Uint8Array(I.length), B = 0, F, s = 0, c = [137, 80, 78, 71, 13, 10, 26, 10], G = 0; G < 8; G++) if (I[G] != c[G]) throw "The input is not a PNG file!";
  for (; g < I.length; ) {
    var V = C.readUint(I, g);
    g += 4;
    var W = C.readASCII(I, g, 4);
    if (g += 4, W == "IHDR")
      j.decode._IHDR(I, g, Z);
    else if (W == "IDAT") {
      for (var G = 0; G < V; G++) i[B + G] = I[g + G];
      B += V;
    } else if (W == "acTL")
      Z.tabs[W] = { num_frames: d(I, g), num_plays: d(I, g + 4) }, F = new Uint8Array(I.length);
    else if (W == "fcTL") {
      if (s != 0) {
        var R = Z.frames[Z.frames.length - 1];
        R.data = j.decode._decompress(Z, F.slice(0, s), R.rect.width, R.rect.height), s = 0;
      }
      var U = { x: d(I, g + 12), y: d(I, g + 16), width: d(I, g + 4), height: d(I, g + 8) }, n = A(I, g + 22);
      n = A(I, g + 20) / (n == 0 ? 100 : n);
      var m = { rect: U, delay: Math.round(n * 1e3), dispose: I[g + 24], blend: I[g + 25] };
      Z.frames.push(m);
    } else if (W == "fdAT") {
      for (var G = 0; G < V - 4; G++) F[s + G] = I[g + G + 4];
      s += V - 4;
    } else if (W == "pHYs")
      Z.tabs[W] = [C.readUint(I, g), C.readUint(I, g + 4), I[g + 8]];
    else if (W == "cHRM") {
      Z.tabs[W] = [];
      for (var G = 0; G < 8; G++) Z.tabs[W].push(C.readUint(I, g + G * 4));
    } else if (W == "tEXt") {
      Z.tabs[W] == null && (Z.tabs[W] = {});
      var e = C.nextZero(I, g), N = C.readASCII(I, g, e - g), w = C.readASCII(I, e + 1, g + V - e - 1);
      Z.tabs[W][N] = w;
    } else if (W == "iTXt") {
      Z.tabs[W] == null && (Z.tabs[W] = {});
      var e = 0, S = g;
      e = C.nextZero(I, S);
      var N = C.readASCII(I, S, e - S);
      S = e + 1, I[S], I[S + 1], S += 2, e = C.nextZero(I, S), C.readASCII(I, S, e - S), S = e + 1, e = C.nextZero(I, S), C.readUTF8(I, S, e - S), S = e + 1;
      var w = C.readUTF8(I, S, V - (S - g));
      Z.tabs[W][N] = w;
    } else if (W == "PLTE")
      Z.tabs[W] = C.readBytes(I, g, V);
    else if (W == "hIST") {
      var Y = Z.tabs.PLTE.length / 3;
      Z.tabs[W] = [];
      for (var G = 0; G < Y; G++) Z.tabs[W].push(A(I, g + G * 2));
    } else if (W == "tRNS")
      Z.ctype == 3 ? Z.tabs[W] = C.readBytes(I, g, V) : Z.ctype == 0 ? Z.tabs[W] = A(I, g) : Z.ctype == 2 && (Z.tabs[W] = [A(I, g), A(I, g + 2), A(I, g + 4)]);
    else if (W == "gAMA") Z.tabs[W] = C.readUint(I, g) / 1e5;
    else if (W == "sRGB") Z.tabs[W] = I[g];
    else if (W == "bKGD")
      Z.ctype == 0 || Z.ctype == 4 ? Z.tabs[W] = [A(I, g)] : Z.ctype == 2 || Z.ctype == 6 ? Z.tabs[W] = [A(I, g), A(I, g + 2), A(I, g + 4)] : Z.ctype == 3 && (Z.tabs[W] = I[g]);
    else if (W == "IEND")
      break;
    g += V, C.readUint(I, g), g += 4;
  }
  if (s != 0) {
    var R = Z.frames[Z.frames.length - 1];
    R.data = j.decode._decompress(Z, F.slice(0, s), R.rect.width, R.rect.height), s = 0;
  }
  return Z.data = j.decode._decompress(Z, i, Z.width, Z.height), delete Z.compress, delete Z.interlace, delete Z.filter, Z;
};
j.decode._decompress = function(l, I, g, C) {
  var A = j.decode._getBPP(l), d = Math.ceil(g * A / 8), Z = new Uint8Array((d + 1 + l.interlace) * C);
  return I = j.decode._inflate(I, Z), l.interlace == 0 ? I = j.decode._filterZero(I, l, 0, g, C) : l.interlace == 1 && (I = j.decode._readInterlace(I, l)), I;
};
j.decode._inflate = function(l, I) {
  var g = j.inflateRaw(new Uint8Array(l.buffer, 2, l.length - 6), I);
  return g;
};
j.inflateRaw = function() {
  var l = {};
  return l.H = {}, l.H.N = function(I, g) {
    var C = Uint8Array, A = 0, d = 0, Z = 0, i = 0, B = 0, F = 0, s = 0, c = 0, G = 0, V, W;
    if (I[0] == 3 && I[1] == 0) return g || new C(0);
    var R = l.H, U = R.b, n = R.e, m = R.R, e = R.n, N = R.A, w = R.Z, S = R.m, Y = g == null;
    for (Y && (g = new C(I.length >>> 2 << 3)); A == 0; ) {
      if (A = U(I, G, 1), d = U(I, G + 1, 2), G += 3, d == 0) {
        G & 7 && (G += 8 - (G & 7));
        var M = (G >>> 3) + 4, y = I[M - 4] | I[M - 3] << 8;
        Y && (g = l.H.W(g, c + y)), g.set(new C(I.buffer, I.byteOffset + M, y), c), G = M + y << 3, c += y;
        continue;
      }
      if (Y && (g = l.H.W(g, c + (1 << 17))), d == 1 && (V = S.J, W = S.h, F = 511, s = 31), d == 2) {
        Z = n(I, G, 5) + 257, i = n(I, G + 5, 5) + 1, B = n(I, G + 10, 4) + 4, G += 14;
        for (var r = 1, z = 0; z < 38; z += 2)
          S.Q[z] = 0, S.Q[z + 1] = 0;
        for (var z = 0; z < B; z++) {
          var E = n(I, G + z * 3, 3);
          S.Q[(S.X[z] << 1) + 1] = E, E > r && (r = E);
        }
        G += 3 * B, e(S.Q, r), N(S.Q, r, S.u), V = S.w, W = S.d, G = m(S.u, (1 << r) - 1, Z + i, I, G, S.v);
        var X = R.V(S.v, 0, Z, S.C);
        F = (1 << X) - 1;
        var O = R.V(S.v, Z, i, S.D);
        s = (1 << O) - 1, e(S.C, X), N(S.C, X, V), e(S.D, O), N(S.D, O, W);
      }
      for (; ; ) {
        var _ = V[w(I, G) & F];
        G += _ & 15;
        var p = _ >>> 4;
        if (!(p >>> 8))
          g[c++] = p;
        else {
          if (p == 256)
            break;
          var T = c + p - 254;
          if (p > 264) {
            var UI = S.q[p - 257];
            T = c + (UI >>> 3) + n(I, G, UI & 7), G += UI & 7;
          }
          var sI = W[w(I, G) & s];
          G += sI & 15;
          var jI = sI >>> 4, SI = S.c[jI], aI = (SI >>> 4) + U(I, G, SI & 15);
          for (G += SI & 15; c < T; )
            g[c] = g[c++ - aI], g[c] = g[c++ - aI], g[c] = g[c++ - aI], g[c] = g[c++ - aI];
          c = T;
        }
      }
    }
    return g.length == c ? g : g.slice(0, c);
  }, l.H.W = function(I, g) {
    var C = I.length;
    if (g <= C) return I;
    var A = new Uint8Array(C << 1);
    return A.set(I, 0), A;
  }, l.H.R = function(I, g, C, A, d, Z) {
    for (var i = l.H.e, B = l.H.Z, F = 0; F < C; ) {
      var s = I[B(A, d) & g];
      d += s & 15;
      var c = s >>> 4;
      if (c <= 15)
        Z[F] = c, F++;
      else {
        var G = 0, V = 0;
        c == 16 ? (V = 3 + i(A, d, 2), d += 2, G = Z[F - 1]) : c == 17 ? (V = 3 + i(A, d, 3), d += 3) : c == 18 && (V = 11 + i(A, d, 7), d += 7);
        for (var W = F + V; F < W; )
          Z[F] = G, F++;
      }
    }
    return d;
  }, l.H.V = function(I, g, C, A) {
    for (var d = 0, Z = 0, i = A.length >>> 1; Z < C; ) {
      var B = I[Z + g];
      A[Z << 1] = 0, A[(Z << 1) + 1] = B, B > d && (d = B), Z++;
    }
    for (; Z < i; )
      A[Z << 1] = 0, A[(Z << 1) + 1] = 0, Z++;
    return d;
  }, l.H.n = function(I, g) {
    for (var C = l.H.m, A = I.length, d, Z, i, B, F, s = C.j, B = 0; B <= g; B++) s[B] = 0;
    for (B = 1; B < A; B += 2) s[I[B]]++;
    var c = C.K;
    for (d = 0, s[0] = 0, Z = 1; Z <= g; Z++)
      d = d + s[Z - 1] << 1, c[Z] = d;
    for (i = 0; i < A; i += 2)
      F = I[i + 1], F != 0 && (I[i] = c[F], c[F]++);
  }, l.H.A = function(I, g, C) {
    for (var A = I.length, d = l.H.m, Z = d.r, i = 0; i < A; i += 2) if (I[i + 1] != 0)
      for (var B = i >> 1, F = I[i + 1], s = B << 4 | F, c = g - F, G = I[i] << c, V = G + (1 << c); G != V; ) {
        var W = Z[G] >>> 15 - g;
        C[W] = s, G++;
      }
  }, l.H.l = function(I, g) {
    for (var C = l.H.m.r, A = 15 - g, d = 0; d < I.length; d += 2) {
      var Z = I[d] << g - I[d + 1];
      I[d] = C[Z] >>> A;
    }
  }, l.H.M = function(I, g, C) {
    C = C << (g & 7);
    var A = g >>> 3;
    I[A] |= C, I[A + 1] |= C >>> 8;
  }, l.H.I = function(I, g, C) {
    C = C << (g & 7);
    var A = g >>> 3;
    I[A] |= C, I[A + 1] |= C >>> 8, I[A + 2] |= C >>> 16;
  }, l.H.e = function(I, g, C) {
    return (I[g >>> 3] | I[(g >>> 3) + 1] << 8) >>> (g & 7) & (1 << C) - 1;
  }, l.H.b = function(I, g, C) {
    return (I[g >>> 3] | I[(g >>> 3) + 1] << 8 | I[(g >>> 3) + 2] << 16) >>> (g & 7) & (1 << C) - 1;
  }, l.H.Z = function(I, g) {
    return (I[g >>> 3] | I[(g >>> 3) + 1] << 8 | I[(g >>> 3) + 2] << 16) >>> (g & 7);
  }, l.H.i = function(I, g) {
    return (I[g >>> 3] | I[(g >>> 3) + 1] << 8 | I[(g >>> 3) + 2] << 16 | I[(g >>> 3) + 3] << 24) >>> (g & 7);
  }, l.H.m = function() {
    var I = Uint16Array, g = Uint32Array;
    return { K: new I(16), j: new I(16), X: [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15], S: [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 999, 999, 999], T: [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0], q: new I(32), p: [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577, 65535, 65535], z: [0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0], c: new g(32), J: new I(512), _: [], h: new I(32), $: [], w: new I(32768), C: [], v: [], d: new I(32768), D: [], u: new I(512), Q: [], r: new I(32768), s: new g(286), Y: new g(30), a: new g(19), t: new g(15e3), k: new I(65536), g: new I(32768) };
  }(), function() {
    for (var I = l.H.m, g = 32768, C = 0; C < g; C++) {
      var A = C;
      A = (A & 2863311530) >>> 1 | (A & 1431655765) << 1, A = (A & 3435973836) >>> 2 | (A & 858993459) << 2, A = (A & 4042322160) >>> 4 | (A & 252645135) << 4, A = (A & 4278255360) >>> 8 | (A & 16711935) << 8, I.r[C] = (A >>> 16 | A << 16) >>> 17;
    }
    function d(Z, i, B) {
      for (; i-- != 0; ) Z.push(0, B);
    }
    for (var C = 0; C < 32; C++)
      I.q[C] = I.S[C] << 3 | I.T[C], I.c[C] = I.p[C] << 4 | I.z[C];
    d(I._, 144, 8), d(I._, 112, 9), d(I._, 24, 7), d(I._, 8, 8), l.H.n(I._, 9), l.H.A(I._, 9, I.J), l.H.l(I._, 9), d(I.$, 32, 5), l.H.n(I.$, 5), l.H.A(I.$, 5, I.h), l.H.l(I.$, 5), d(I.Q, 19, 0), d(I.C, 286, 0), d(I.D, 30, 0), d(I.v, 320, 0);
  }(), l.H.N;
}();
j.decode._readInterlace = function(l, I) {
  for (var g = I.width, C = I.height, A = j.decode._getBPP(I), d = A >> 3, Z = Math.ceil(g * A / 8), i = new Uint8Array(C * Z), B = 0, F = [0, 0, 4, 0, 2, 0, 1], s = [0, 4, 0, 2, 0, 1, 0], c = [8, 8, 8, 4, 4, 2, 2], G = [8, 8, 4, 4, 2, 2, 1], V = 0; V < 7; ) {
    for (var W = c[V], R = G[V], U = 0, n = 0, m = F[V]; m < C; )
      m += W, n++;
    for (var e = s[V]; e < g; )
      e += R, U++;
    var N = Math.ceil(U * A / 8);
    j.decode._filterZero(l, I, B, U, n);
    for (var w = 0, S = F[V]; S < C; ) {
      for (var Y = s[V], M = B + w * N << 3; Y < g; ) {
        if (A == 1) {
          var y = l[M >> 3];
          y = y >> 7 - (M & 7) & 1, i[S * Z + (Y >> 3)] |= y << 7 - ((Y & 7) << 0);
        }
        if (A == 2) {
          var y = l[M >> 3];
          y = y >> 6 - (M & 7) & 3, i[S * Z + (Y >> 2)] |= y << 6 - ((Y & 3) << 1);
        }
        if (A == 4) {
          var y = l[M >> 3];
          y = y >> 4 - (M & 7) & 15, i[S * Z + (Y >> 1)] |= y << 4 - ((Y & 1) << 2);
        }
        if (A >= 8)
          for (var r = S * Z + Y * d, z = 0; z < d; z++) i[r + z] = l[(M >> 3) + z];
        M += A, Y += R;
      }
      w++, S += W;
    }
    U * n != 0 && (B += n * (1 + N)), V = V + 1;
  }
  return i;
};
j.decode._getBPP = function(l) {
  var I = [1, null, 3, 1, 2, null, 4][l.ctype];
  return I * l.depth;
};
j.decode._filterZero = function(l, I, g, C, A) {
  var d = j.decode._getBPP(I), Z = Math.ceil(C * d / 8), i = j.decode._paeth;
  d = Math.ceil(d / 8);
  var B = 0, F = 1, s = l[g], c = 0;
  if (s > 1 && (l[g] = [0, 0, 1][s - 2]), s == 3) for (c = d; c < Z; c++) l[c + 1] = l[c + 1] + (l[c + 1 - d] >>> 1) & 255;
  for (var G = 0; G < A; G++)
    if (B = g + G * Z, F = B + G + 1, s = l[F - 1], c = 0, s == 0) for (; c < Z; c++) l[B + c] = l[F + c];
    else if (s == 1) {
      for (; c < d; c++) l[B + c] = l[F + c];
      for (; c < Z; c++) l[B + c] = l[F + c] + l[B + c - d];
    } else if (s == 2)
      for (; c < Z; c++) l[B + c] = l[F + c] + l[B + c - Z];
    else if (s == 3) {
      for (; c < d; c++) l[B + c] = l[F + c] + (l[B + c - Z] >>> 1);
      for (; c < Z; c++) l[B + c] = l[F + c] + (l[B + c - Z] + l[B + c - d] >>> 1);
    } else {
      for (; c < d; c++) l[B + c] = l[F + c] + i(0, l[B + c - Z], 0);
      for (; c < Z; c++) l[B + c] = l[F + c] + i(l[B + c - d], l[B + c - Z], l[B + c - d - Z]);
    }
  return l;
};
j.decode._paeth = function(l, I, g) {
  var C = l + I - g, A = C - l, d = C - I, Z = C - g;
  return A * A <= d * d && A * A <= Z * Z ? l : d * d <= Z * Z ? I : g;
};
j.decode._IHDR = function(l, I, g) {
  var C = j._bin;
  g.width = C.readUint(l, I), I += 4, g.height = C.readUint(l, I), I += 4, g.depth = l[I], I++, g.ctype = l[I], I++, g.compress = l[I], I++, g.filter = l[I], I++, g.interlace = l[I], I++;
};
j._bin = {
  nextZero: function(l, I) {
    for (; l[I] != 0; ) I++;
    return I;
  },
  readUshort: function(l, I) {
    return l[I] << 8 | l[I + 1];
  },
  writeUshort: function(l, I, g) {
    l[I] = g >> 8 & 255, l[I + 1] = g & 255;
  },
  readUint: function(l, I) {
    return l[I] * (256 * 256 * 256) + (l[I + 1] << 16 | l[I + 2] << 8 | l[I + 3]);
  },
  writeUint: function(l, I, g) {
    l[I] = g >> 24 & 255, l[I + 1] = g >> 16 & 255, l[I + 2] = g >> 8 & 255, l[I + 3] = g & 255;
  },
  readASCII: function(l, I, g) {
    for (var C = "", A = 0; A < g; A++) C += String.fromCharCode(l[I + A]);
    return C;
  },
  writeASCII: function(l, I, g) {
    for (var C = 0; C < g.length; C++) l[I + C] = g.charCodeAt(C);
  },
  readBytes: function(l, I, g) {
    for (var C = [], A = 0; A < g; A++) C.push(l[I + A]);
    return C;
  },
  pad: function(l) {
    return l.length < 2 ? "0" + l : l;
  },
  readUTF8: function(l, I, g) {
    for (var C = "", A, d = 0; d < g; d++) C += "%" + j._bin.pad(l[I + d].toString(16));
    try {
      A = decodeURIComponent(C);
    } catch {
      return j._bin.readASCII(l, I, g);
    }
    return A;
  }
};
j._copyTile = function(l, I, g, C, A, d, Z, i, B) {
  for (var F = Math.min(I, A), s = Math.min(g, d), c = 0, G = 0, V = 0; V < s; V++)
    for (var W = 0; W < F; W++)
      if (Z >= 0 && i >= 0 ? (c = V * I + W << 2, G = (i + V) * A + Z + W << 2) : (c = (-i + V) * I - Z + W << 2, G = V * A + W << 2), B == 0)
        C[G] = l[c], C[G + 1] = l[c + 1], C[G + 2] = l[c + 2], C[G + 3] = l[c + 3];
      else if (B == 1) {
        var R = l[c + 3] * 0.00392156862745098, U = l[c] * R, n = l[c + 1] * R, m = l[c + 2] * R, e = C[G + 3] * (1 / 255), N = C[G] * e, w = C[G + 1] * e, S = C[G + 2] * e, Y = 1 - R, M = R + e * Y, y = M == 0 ? 0 : 1 / M;
        C[G + 3] = 255 * M, C[G + 0] = (U + N * Y) * y, C[G + 1] = (n + w * Y) * y, C[G + 2] = (m + S * Y) * y;
      } else if (B == 2) {
        var R = l[c + 3], U = l[c], n = l[c + 1], m = l[c + 2], e = C[G + 3], N = C[G], w = C[G + 1], S = C[G + 2];
        R == e && U == N && n == w && m == S ? (C[G] = 0, C[G + 1] = 0, C[G + 2] = 0, C[G + 3] = 0) : (C[G] = U, C[G + 1] = n, C[G + 2] = m, C[G + 3] = R);
      } else if (B == 3) {
        var R = l[c + 3], U = l[c], n = l[c + 1], m = l[c + 2], e = C[G + 3], N = C[G], w = C[G + 1], S = C[G + 2];
        if (R == e && U == N && n == w && m == S) continue;
        if (R < 220 && e > 20) return !1;
      }
  return !0;
};
j.encode = function(l, I, g, C, A, d, Z) {
  C == null && (C = 0), Z == null && (Z = !1);
  var i = j.encode.compress(l, I, g, C, [!1, !1, !1, 0, Z]);
  return j.encode.compressPNG(i, -1), j.encode._main(i, I, g, A, d);
};
j.encodeLL = function(l, I, g, C, A, d, Z, i) {
  for (var B = { ctype: 0 + (C == 1 ? 0 : 2) + (A == 0 ? 0 : 4), depth: d, frames: [] }, F = (C + A) * d, s = F * I, c = 0; c < l.length; c++)
    B.frames.push({ rect: { x: 0, y: 0, width: I, height: g }, img: new Uint8Array(l[c]), blend: 0, dispose: 1, bpp: Math.ceil(F / 8), bpl: Math.ceil(s / 8) });
  j.encode.compressPNG(B, 0, !0);
  var G = j.encode._main(B, I, g, Z, i);
  return G;
};
j.encode._main = function(l, I, g, C, A) {
  A == null && (A = {});
  var d = j.crc.crc, Z = j._bin.writeUint, i = j._bin.writeUshort, B = j._bin.writeASCII, F = 8, s = l.frames.length > 1, c = !1, G = 33 + (s ? 20 : 0);
  if (A.sRGB != null && (G += 13), A.pHYs != null && (G += 21), l.ctype == 3) {
    for (var V = l.plte.length, W = 0; W < V; W++) l.plte[W] >>> 24 != 255 && (c = !0);
    G += 8 + V * 3 + 4 + (c ? 8 + V * 1 + 4 : 0);
  }
  for (var R = 0; R < l.frames.length; R++) {
    var U = l.frames[R];
    s && (G += 38), G += U.cimg.length + 12, R != 0 && (G += 4);
  }
  G += 12;
  for (var n = new Uint8Array(G), m = [137, 80, 78, 71, 13, 10, 26, 10], W = 0; W < 8; W++) n[W] = m[W];
  if (Z(n, F, 13), F += 4, B(n, F, "IHDR"), F += 4, Z(n, F, I), F += 4, Z(n, F, g), F += 4, n[F] = l.depth, F++, n[F] = l.ctype, F++, n[F] = 0, F++, n[F] = 0, F++, n[F] = 0, F++, Z(n, F, d(n, F - 17, 17)), F += 4, A.sRGB != null && (Z(n, F, 1), F += 4, B(n, F, "sRGB"), F += 4, n[F] = A.sRGB, F++, Z(n, F, d(n, F - 5, 5)), F += 4), A.pHYs != null && (Z(n, F, 9), F += 4, B(n, F, "pHYs"), F += 4, Z(n, F, A.pHYs[0]), F += 4, Z(n, F, A.pHYs[1]), F += 4, n[F] = A.pHYs[2], F++, Z(n, F, d(n, F - 13, 13)), F += 4), s && (Z(n, F, 8), F += 4, B(n, F, "acTL"), F += 4, Z(n, F, l.frames.length), F += 4, Z(n, F, A.loop != null ? A.loop : 0), F += 4, Z(n, F, d(n, F - 12, 12)), F += 4), l.ctype == 3) {
    var V = l.plte.length;
    Z(n, F, V * 3), F += 4, B(n, F, "PLTE"), F += 4;
    for (var W = 0; W < V; W++) {
      var e = W * 3, N = l.plte[W], w = N & 255, S = N >>> 8 & 255, Y = N >>> 16 & 255;
      n[F + e + 0] = w, n[F + e + 1] = S, n[F + e + 2] = Y;
    }
    if (F += V * 3, Z(n, F, d(n, F - V * 3 - 4, V * 3 + 4)), F += 4, c) {
      Z(n, F, V), F += 4, B(n, F, "tRNS"), F += 4;
      for (var W = 0; W < V; W++) n[F + W] = l.plte[W] >>> 24 & 255;
      F += V, Z(n, F, d(n, F - V - 4, V + 4)), F += 4;
    }
  }
  for (var M = 0, R = 0; R < l.frames.length; R++) {
    var U = l.frames[R];
    s && (Z(n, F, 26), F += 4, B(n, F, "fcTL"), F += 4, Z(n, F, M++), F += 4, Z(n, F, U.rect.width), F += 4, Z(n, F, U.rect.height), F += 4, Z(n, F, U.rect.x), F += 4, Z(n, F, U.rect.y), F += 4, i(n, F, C[R]), F += 2, i(n, F, 1e3), F += 2, n[F] = U.dispose, F++, n[F] = U.blend, F++, Z(n, F, d(n, F - 30, 30)), F += 4);
    var y = U.cimg, V = y.length;
    Z(n, F, V + (R == 0 ? 0 : 4)), F += 4;
    var r = F;
    B(n, F, R == 0 ? "IDAT" : "fdAT"), F += 4, R != 0 && (Z(n, F, M++), F += 4), n.set(y, F), F += V, Z(n, F, d(n, r, F - r)), F += 4;
  }
  return Z(n, F, 0), F += 4, B(n, F, "IEND"), F += 4, Z(n, F, d(n, F - 4, 4)), F += 4, n.buffer;
};
j.encode.compressPNG = function(l, I, g) {
  for (var C = 0; C < l.frames.length; C++) {
    var A = l.frames[C];
    A.rect.width;
    var d = A.rect.height, Z = new Uint8Array(d * A.bpl + d);
    A.cimg = j.encode._filterZero(A.img, d, A.bpp, A.bpl, Z, I, g);
  }
};
j.encode.compress = function(l, I, g, C, A) {
  for (var d = A[0], Z = A[1], i = A[2], B = A[3], F = A[4], s = 6, c = 8, G = 255, V = 0; V < l.length; V++)
    for (var W = new Uint8Array(l[V]), R = W.length, U = 0; U < R; U += 4) G &= W[U + 3];
  var n = G != 255, m = j.encode.framize(l, I, g, d, Z, i), e = {}, N = [], w = [];
  if (C != 0) {
    for (var S = [], U = 0; U < m.length; U++) S.push(m[U].img.buffer);
    for (var Y = j.encode.concatRGBA(S), M = j.quantize(Y, C), y = 0, r = new Uint8Array(M.abuf), U = 0; U < m.length; U++) {
      var z = m[U].img, E = z.length;
      w.push(new Uint8Array(M.inds.buffer, y >> 2, E >> 2));
      for (var V = 0; V < E; V += 4)
        z[V] = r[y + V], z[V + 1] = r[y + V + 1], z[V + 2] = r[y + V + 2], z[V + 3] = r[y + V + 3];
      y += E;
    }
    for (var U = 0; U < M.plte.length; U++) N.push(M.plte[U].est.rgba);
  } else
    for (var V = 0; V < m.length; V++) {
      var X = m[V], O = new Uint32Array(X.img.buffer), _ = X.rect.width, R = O.length, p = new Uint8Array(R);
      w.push(p);
      for (var U = 0; U < R; U++) {
        var T = O[U];
        if (U != 0 && T == O[U - 1]) p[U] = p[U - 1];
        else if (U > _ && T == O[U - _]) p[U] = p[U - _];
        else {
          var UI = e[T];
          if (UI == null && (e[T] = UI = N.length, N.push(T), N.length >= 300))
            break;
          p[U] = UI;
        }
      }
    }
  var sI = N.length;
  sI <= 256 && F == !1 && (sI <= 2 ? c = 1 : sI <= 4 ? c = 2 : sI <= 16 ? c = 4 : c = 8, c = Math.max(c, B));
  for (var V = 0; V < m.length; V++) {
    var X = m[V];
    X.rect.x, X.rect.y;
    var _ = X.rect.width, jI = X.rect.height, SI = X.img;
    new Uint32Array(SI.buffer);
    var aI = 4 * _, eI = 4;
    if (sI <= 256 && F == !1) {
      aI = Math.ceil(c * _ / 8);
      for (var zI = new Uint8Array(aI * jI), fI = w[V], bI = 0; bI < jI; bI++) {
        var U = bI * aI, BI = bI * _;
        if (c == 8) for (var AI = 0; AI < _; AI++) zI[U + AI] = fI[BI + AI];
        else if (c == 4) for (var AI = 0; AI < _; AI++) zI[U + (AI >> 1)] |= fI[BI + AI] << 4 - (AI & 1) * 4;
        else if (c == 2) for (var AI = 0; AI < _; AI++) zI[U + (AI >> 2)] |= fI[BI + AI] << 6 - (AI & 3) * 2;
        else if (c == 1) for (var AI = 0; AI < _; AI++) zI[U + (AI >> 3)] |= fI[BI + AI] << 7 - (AI & 7) * 1;
      }
      SI = zI, s = 3, eI = 1;
    } else if (n == !1 && m.length == 1) {
      for (var zI = new Uint8Array(_ * jI * 3), Ag = _ * jI, U = 0; U < Ag; U++) {
        var z = U * 3, ng = U * 4;
        zI[z] = SI[ng], zI[z + 1] = SI[ng + 1], zI[z + 2] = SI[ng + 2];
      }
      SI = zI, s = 2, eI = 3, aI = 3 * _;
    }
    X.img = SI, X.bpl = aI, X.bpp = eI;
  }
  return { ctype: s, depth: c, plte: N, frames: m };
};
j.encode.framize = function(l, I, g, C, A, d) {
  for (var Z = [], i = 0; i < l.length; i++) {
    var B = new Uint8Array(l[i]), F = new Uint32Array(B.buffer), s, c = 0, G = 0, V = I, W = g, R = C ? 1 : 0;
    if (i != 0) {
      for (var U = d || C || i == 1 || Z[i - 2].dispose != 0 ? 1 : 2, n = 0, m = 1e9, e = 0; e < U; e++) {
        for (var X = new Uint8Array(l[i - 1 - e]), N = new Uint32Array(l[i - 1 - e]), w = I, S = g, Y = -1, M = -1, y = 0; y < g; y++) for (var r = 0; r < I; r++) {
          var z = y * I + r;
          F[z] != N[z] && (r < w && (w = r), r > Y && (Y = r), y < S && (S = y), y > M && (M = y));
        }
        Y == -1 && (w = S = Y = M = 0), A && ((w & 1) == 1 && w--, (S & 1) == 1 && S--);
        var E = (Y - w + 1) * (M - S + 1);
        E < m && (m = E, n = e, c = w, G = S, V = Y - w + 1, W = M - S + 1);
      }
      var X = new Uint8Array(l[i - 1 - n]);
      n == 1 && (Z[i - 1].dispose = 2), s = new Uint8Array(V * W * 4), j._copyTile(X, I, g, s, V, W, -c, -G, 0), R = j._copyTile(B, I, g, s, V, W, -c, -G, 3) ? 1 : 0, R == 1 ? j.encode._prepareDiff(B, I, g, s, { x: c, y: G, width: V, height: W }) : j._copyTile(B, I, g, s, V, W, -c, -G, 0);
    } else s = B.slice(0);
    Z.push({ rect: { x: c, y: G, width: V, height: W }, img: s, blend: R, dispose: 0 });
  }
  if (C) for (var i = 0; i < Z.length; i++) {
    var O = Z[i];
    if (O.blend != 1) {
      var _ = O.rect, p = Z[i - 1].rect, T = Math.min(_.x, p.x), UI = Math.min(_.y, p.y), sI = Math.max(_.x + _.width, p.x + p.width), jI = Math.max(_.y + _.height, p.y + p.height), SI = { x: T, y: UI, width: sI - T, height: jI - UI };
      Z[i - 1].dispose = 1, i - 1 != 0 && j.encode._updateFrame(l, I, g, Z, i - 1, SI, A), j.encode._updateFrame(l, I, g, Z, i, SI, A);
    }
  }
  var aI = 0;
  if (l.length != 1) for (var z = 0; z < Z.length; z++) {
    var O = Z[z];
    aI += O.rect.width * O.rect.height;
  }
  return Z;
};
j.encode._updateFrame = function(l, I, g, C, A, d, Z) {
  for (var i = Uint8Array, B = Uint32Array, F = new i(l[A - 1]), s = new B(l[A - 1]), c = A + 1 < l.length ? new i(l[A + 1]) : null, G = new i(l[A]), V = new B(G.buffer), W = I, R = g, U = -1, n = -1, m = 0; m < d.height; m++) for (var e = 0; e < d.width; e++) {
    var N = d.x + e, w = d.y + m, S = w * I + N, Y = V[S];
    Y == 0 || C[A - 1].dispose == 0 && s[S] == Y && (c == null || c[S * 4 + 3] != 0) || (N < W && (W = N), N > U && (U = N), w < R && (R = w), w > n && (n = w));
  }
  U == -1 && (W = R = U = n = 0), Z && ((W & 1) == 1 && W--, (R & 1) == 1 && R--), d = { x: W, y: R, width: U - W + 1, height: n - R + 1 };
  var M = C[A];
  M.rect = d, M.blend = 1, M.img = new Uint8Array(d.width * d.height * 4), C[A - 1].dispose == 0 ? (j._copyTile(F, I, g, M.img, d.width, d.height, -d.x, -d.y, 0), j.encode._prepareDiff(G, I, g, M.img, d)) : j._copyTile(G, I, g, M.img, d.width, d.height, -d.x, -d.y, 0);
};
j.encode._prepareDiff = function(l, I, g, C, A) {
  j._copyTile(l, I, g, C, A.width, A.height, -A.x, -A.y, 2);
};
j.encode._filterZero = function(l, I, g, C, A, d, Z) {
  var i = [], B = [0, 1, 2, 3, 4];
  d != -1 ? B = [d] : (I * C > 5e5 || g == 1) && (B = [0]);
  var F;
  Z && (F = { level: 0 });
  for (var s = Z && UZIP != null ? UZIP : Ed, c = 0; c < B.length; c++) {
    for (var G = 0; G < I; G++) j.encode._filterLine(A, l, G, C, g, B[c]);
    i.push(s.deflate(A, F));
  }
  for (var V, W = 1e9, c = 0; c < i.length; c++) i[c].length < W && (V = c, W = i[c].length);
  return i[V];
};
j.encode._filterLine = function(l, I, g, C, A, d) {
  var Z = g * C, i = Z + g, B = j.decode._paeth;
  if (l[i] = d, i++, d == 0)
    if (C < 500) for (var F = 0; F < C; F++) l[i + F] = I[Z + F];
    else l.set(new Uint8Array(I.buffer, Z, C), i);
  else if (d == 1) {
    for (var F = 0; F < A; F++) l[i + F] = I[Z + F];
    for (var F = A; F < C; F++) l[i + F] = I[Z + F] - I[Z + F - A] + 256 & 255;
  } else if (g == 0) {
    for (var F = 0; F < A; F++) l[i + F] = I[Z + F];
    if (d == 2) for (var F = A; F < C; F++) l[i + F] = I[Z + F];
    if (d == 3) for (var F = A; F < C; F++) l[i + F] = I[Z + F] - (I[Z + F - A] >> 1) + 256 & 255;
    if (d == 4) for (var F = A; F < C; F++) l[i + F] = I[Z + F] - B(I[Z + F - A], 0, 0) + 256 & 255;
  } else {
    if (d == 2)
      for (var F = 0; F < C; F++) l[i + F] = I[Z + F] + 256 - I[Z + F - C] & 255;
    if (d == 3) {
      for (var F = 0; F < A; F++) l[i + F] = I[Z + F] + 256 - (I[Z + F - C] >> 1) & 255;
      for (var F = A; F < C; F++) l[i + F] = I[Z + F] + 256 - (I[Z + F - C] + I[Z + F - A] >> 1) & 255;
    }
    if (d == 4) {
      for (var F = 0; F < A; F++) l[i + F] = I[Z + F] + 256 - B(0, I[Z + F - C], 0) & 255;
      for (var F = A; F < C; F++) l[i + F] = I[Z + F] + 256 - B(I[Z + F - A], I[Z + F - C], I[Z + F - A - C]) & 255;
    }
  }
};
j.crc = {
  table: function() {
    for (var l = new Uint32Array(256), I = 0; I < 256; I++) {
      for (var g = I, C = 0; C < 8; C++)
        g & 1 ? g = 3988292384 ^ g >>> 1 : g = g >>> 1;
      l[I] = g;
    }
    return l;
  }(),
  update: function(l, I, g, C) {
    for (var A = 0; A < C; A++) l = j.crc.table[(l ^ I[g + A]) & 255] ^ l >>> 8;
    return l;
  },
  crc: function(l, I, g) {
    return j.crc.update(4294967295, l, I, g) ^ 4294967295;
  }
};
j.quantize = function(l, I) {
  var g = new Uint8Array(l), C = g.slice(0), A = new Uint32Array(C.buffer), d = j.quantize.getKDtree(C, I), Z = d[0], i = d[1];
  j.quantize.planeDst;
  for (var B = g, F = A, s = B.length, c = new Uint8Array(g.length >> 2), G = 0; G < s; G += 4) {
    var V = B[G] * 0.00392156862745098, W = B[G + 1] * (1 / 255), R = B[G + 2] * (1 / 255), U = B[G + 3] * (1 / 255), n = j.quantize.getNearest(Z, V, W, R, U);
    c[G >> 2] = n.ind, F[G >> 2] = n.est.rgba;
  }
  return { abuf: C.buffer, inds: c, plte: i };
};
j.quantize.getKDtree = function(l, I, g) {
  g == null && (g = 1e-4);
  var C = new Uint32Array(l.buffer), A = { i0: 0, i1: l.length, bst: null, est: null, tdst: 0, left: null, right: null };
  A.bst = j.quantize.stats(l, A.i0, A.i1), A.est = j.quantize.estats(A.bst);
  for (var d = [A]; d.length < I; ) {
    for (var Z = 0, i = 0, B = 0; B < d.length; B++) d[B].est.L > Z && (Z = d[B].est.L, i = B);
    if (Z < g) break;
    var F = d[i], s = j.quantize.splitPixels(l, C, F.i0, F.i1, F.est.e, F.est.eMq255), c = F.i0 >= s || F.i1 <= s;
    if (c) {
      F.est.L = 0;
      continue;
    }
    var G = { i0: F.i0, i1: s, bst: null, est: null, tdst: 0, left: null, right: null };
    G.bst = j.quantize.stats(l, G.i0, G.i1), G.est = j.quantize.estats(G.bst);
    var V = { i0: s, i1: F.i1, bst: null, est: null, tdst: 0, left: null, right: null };
    V.bst = { R: [], m: [], N: F.bst.N - G.bst.N };
    for (var B = 0; B < 16; B++) V.bst.R[B] = F.bst.R[B] - G.bst.R[B];
    for (var B = 0; B < 4; B++) V.bst.m[B] = F.bst.m[B] - G.bst.m[B];
    V.est = j.quantize.estats(V.bst), F.left = G, F.right = V, d[i] = G, d.push(V);
  }
  d.sort(function(W, R) {
    return R.bst.N - W.bst.N;
  });
  for (var B = 0; B < d.length; B++) d[B].ind = B;
  return [A, d];
};
j.quantize.getNearest = function(l, I, g, C, A) {
  if (l.left == null)
    return l.tdst = j.quantize.dist(l.est.q, I, g, C, A), l;
  var d = j.quantize.planeDst(l.est, I, g, C, A), Z = l.left, i = l.right;
  d > 0 && (Z = l.right, i = l.left);
  var B = j.quantize.getNearest(Z, I, g, C, A);
  if (B.tdst <= d * d) return B;
  var F = j.quantize.getNearest(i, I, g, C, A);
  return F.tdst < B.tdst ? F : B;
};
j.quantize.planeDst = function(l, I, g, C, A) {
  var d = l.e;
  return d[0] * I + d[1] * g + d[2] * C + d[3] * A - l.eMq;
};
j.quantize.dist = function(l, I, g, C, A) {
  var d = I - l[0], Z = g - l[1], i = C - l[2], B = A - l[3];
  return d * d + Z * Z + i * i + B * B;
};
j.quantize.splitPixels = function(l, I, g, C, A, d) {
  var Z = j.quantize.vecDot;
  for (C -= 4; g < C; ) {
    for (; Z(l, g, A) <= d; ) g += 4;
    for (; Z(l, C, A) > d; ) C -= 4;
    if (g >= C) break;
    var i = I[g >> 2];
    I[g >> 2] = I[C >> 2], I[C >> 2] = i, g += 4, C -= 4;
  }
  for (; Z(l, g, A) > d; ) g -= 4;
  return g + 4;
};
j.quantize.vecDot = function(l, I, g) {
  return l[I] * g[0] + l[I + 1] * g[1] + l[I + 2] * g[2] + l[I + 3] * g[3];
};
j.quantize.stats = function(l, I, g) {
  for (var C = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], A = [0, 0, 0, 0], d = g - I >> 2, Z = I; Z < g; Z += 4) {
    var i = l[Z] * 0.00392156862745098, B = l[Z + 1] * (1 / 255), F = l[Z + 2] * (1 / 255), s = l[Z + 3] * (1 / 255);
    A[0] += i, A[1] += B, A[2] += F, A[3] += s, C[0] += i * i, C[1] += i * B, C[2] += i * F, C[3] += i * s, C[5] += B * B, C[6] += B * F, C[7] += B * s, C[10] += F * F, C[11] += F * s, C[15] += s * s;
  }
  return C[4] = C[1], C[8] = C[2], C[9] = C[6], C[12] = C[3], C[13] = C[7], C[14] = C[11], { R: C, m: A, N: d };
};
j.quantize.estats = function(l) {
  var I = l.R, g = l.m, C = l.N, A = g[0], d = g[1], Z = g[2], i = g[3], B = C == 0 ? 0 : 1 / C, F = [
    I[0] - A * A * B,
    I[1] - A * d * B,
    I[2] - A * Z * B,
    I[3] - A * i * B,
    I[4] - d * A * B,
    I[5] - d * d * B,
    I[6] - d * Z * B,
    I[7] - d * i * B,
    I[8] - Z * A * B,
    I[9] - Z * d * B,
    I[10] - Z * Z * B,
    I[11] - Z * i * B,
    I[12] - i * A * B,
    I[13] - i * d * B,
    I[14] - i * Z * B,
    I[15] - i * i * B
  ], s = F, c = j.M4, G = [0.5, 0.5, 0.5, 0.5], V = 0, W = 0;
  if (C != 0)
    for (var R = 0; R < 10 && (G = c.multVec(s, G), W = Math.sqrt(c.dot(G, G)), G = c.sml(1 / W, G), !(Math.abs(W - V) < 1e-9)); R++)
      V = W;
  var U = [A * B, d * B, Z * B, i * B], n = c.dot(c.sml(255, U), G);
  return {
    Cov: F,
    q: U,
    e: G,
    L: V,
    eMq255: n,
    eMq: c.dot(G, U),
    rgba: (Math.round(255 * U[3]) << 24 | Math.round(255 * U[2]) << 16 | Math.round(255 * U[1]) << 8 | Math.round(255 * U[0]) << 0) >>> 0
  };
};
j.M4 = {
  multVec: function(l, I) {
    return [
      l[0] * I[0] + l[1] * I[1] + l[2] * I[2] + l[3] * I[3],
      l[4] * I[0] + l[5] * I[1] + l[6] * I[2] + l[7] * I[3],
      l[8] * I[0] + l[9] * I[1] + l[10] * I[2] + l[11] * I[3],
      l[12] * I[0] + l[13] * I[1] + l[14] * I[2] + l[15] * I[3]
    ];
  },
  dot: function(l, I) {
    return l[0] * I[0] + l[1] * I[1] + l[2] * I[2] + l[3] * I[3];
  },
  sml: function(l, I) {
    return [l * I[0], l * I[1], l * I[2], l * I[3]];
  }
};
j.encode.concatRGBA = function(l) {
  for (var I = 0, g = 0; g < l.length; g++) I += l[g].byteLength;
  for (var C = new Uint8Array(I), A = 0, g = 0; g < l.length; g++) {
    for (var d = new Uint8Array(l[g]), Z = d.length, i = 0; i < Z; i += 4) {
      var B = d[i], F = d[i + 1], s = d[i + 2], c = d[i + 3];
      c == 0 && (B = F = s = 0), C[A + i] = B, C[A + i + 1] = F, C[A + i + 2] = s, C[A + i + 3] = c;
    }
    A += Z;
  }
  return C.buffer;
};
var WW = function(l) {
  if (l === 0)
    return iA.Greyscale;
  if (l === 2)
    return iA.Truecolour;
  if (l === 3)
    return iA.IndexedColour;
  if (l === 4)
    return iA.GreyscaleWithAlpha;
  if (l === 6)
    return iA.TruecolourWithAlpha;
  throw new Error("Unknown color type: " + l);
}, bW = function(l) {
  for (var I = Math.floor(l.length / 4), g = new Uint8Array(I * 3), C = new Uint8Array(I * 1), A = 0, d = 0, Z = 0; A < l.length; )
    g[d++] = l[A++], g[d++] = l[A++], g[d++] = l[A++], C[Z++] = l[A++];
  return { rgbChannel: g, alphaChannel: C };
}, iA;
(function(l) {
  l.Greyscale = "Greyscale", l.Truecolour = "Truecolour", l.IndexedColour = "IndexedColour", l.GreyscaleWithAlpha = "GreyscaleWithAlpha", l.TruecolourWithAlpha = "TruecolourWithAlpha";
})(iA || (iA = {}));
var RW = (
  /** @class */
  function() {
    function l(I) {
      var g = j.decode(I), C = j.toRGBA8(g);
      if (C.length > 1)
        throw new Error("Animated PNGs are not supported");
      var A = new Uint8Array(C[0]), d = bW(A), Z = d.rgbChannel, i = d.alphaChannel;
      this.rgbChannel = Z;
      var B = i.some(function(F) {
        return F < 255;
      });
      B && (this.alphaChannel = i), this.type = WW(g.ctype), this.width = g.width, this.height = g.height, this.bitsPerComponent = 8;
    }
    return l.load = function(I) {
      return new l(I);
    }, l;
  }()
), WF = (
  /** @class */
  function() {
    function l(I) {
      this.image = I, this.bitsPerComponent = I.bitsPerComponent, this.width = I.width, this.height = I.height, this.colorSpace = "DeviceRGB";
    }
    return l.for = function(I) {
      return NI(this, void 0, void 0, function() {
        var g;
        return wI(this, function(C) {
          return g = RW.load(I), [2, new l(g)];
        });
      });
    }, l.prototype.embedIntoContext = function(I, g) {
      return NI(this, void 0, void 0, function() {
        var C, A;
        return wI(this, function(d) {
          return C = this.embedAlphaChannel(I), A = I.flateStream(this.image.rgbChannel, {
            Type: "XObject",
            Subtype: "Image",
            BitsPerComponent: this.image.bitsPerComponent,
            Width: this.image.width,
            Height: this.image.height,
            ColorSpace: this.colorSpace,
            SMask: C
          }), g ? (I.assign(g, A), [2, g]) : [2, I.register(A)];
        });
      });
    }, l.prototype.embedAlphaChannel = function(I) {
      if (this.image.alphaChannel) {
        var g = I.flateStream(this.image.alphaChannel, {
          Type: "XObject",
          Subtype: "Image",
          Height: this.image.height,
          Width: this.image.width,
          BitsPerComponent: this.image.bitsPerComponent,
          ColorSpace: "DeviceGray",
          Decode: [0, 1]
        });
        return I.register(g);
      }
    }, l;
  }()
), bF = (
  /** @class */
  function() {
    function l(I, g, C) {
      this.bytes = I, this.start = g || 0, this.pos = this.start, this.end = g && C ? g + C : this.bytes.length;
    }
    return Object.defineProperty(l.prototype, "length", {
      get: function() {
        return this.end - this.start;
      },
      enumerable: !1,
      configurable: !0
    }), Object.defineProperty(l.prototype, "isEmpty", {
      get: function() {
        return this.length === 0;
      },
      enumerable: !1,
      configurable: !0
    }), l.prototype.getByte = function() {
      return this.pos >= this.end ? -1 : this.bytes[this.pos++];
    }, l.prototype.getUint16 = function() {
      var I = this.getByte(), g = this.getByte();
      return I === -1 || g === -1 ? -1 : (I << 8) + g;
    }, l.prototype.getInt32 = function() {
      var I = this.getByte(), g = this.getByte(), C = this.getByte(), A = this.getByte();
      return (I << 24) + (g << 16) + (C << 8) + A;
    }, l.prototype.getBytes = function(I, g) {
      g === void 0 && (g = !1);
      var C = this.bytes, A = this.pos, d = this.end;
      if (I) {
        var i = A + I;
        i > d && (i = d), this.pos = i;
        var Z = C.subarray(A, i);
        return g ? new Uint8ClampedArray(Z) : Z;
      } else {
        var Z = C.subarray(A, d);
        return g ? new Uint8ClampedArray(Z) : Z;
      }
    }, l.prototype.peekByte = function() {
      var I = this.getByte();
      return this.pos--, I;
    }, l.prototype.peekBytes = function(I, g) {
      g === void 0 && (g = !1);
      var C = this.getBytes(I, g);
      return this.pos -= C.length, C;
    }, l.prototype.skip = function(I) {
      I || (I = 1), this.pos += I;
    }, l.prototype.reset = function() {
      this.pos = this.start;
    }, l.prototype.moveStart = function() {
      this.start = this.pos;
    }, l.prototype.makeSubStream = function(I, g) {
      return new l(this.bytes, I, g);
    }, l.prototype.decode = function() {
      return this.bytes;
    }, l;
  }()
), nW = new Uint8Array(0), kl = (
  /** @class */
  function() {
    function l(I) {
      if (this.pos = 0, this.bufferLength = 0, this.eof = !1, this.buffer = nW, this.minBufferLength = 512, I)
        for (; this.minBufferLength < I; )
          this.minBufferLength *= 2;
    }
    return Object.defineProperty(l.prototype, "isEmpty", {
      get: function() {
        for (; !this.eof && this.bufferLength === 0; )
          this.readBlock();
        return this.bufferLength === 0;
      },
      enumerable: !1,
      configurable: !0
    }), l.prototype.getByte = function() {
      for (var I = this.pos; this.bufferLength <= I; ) {
        if (this.eof)
          return -1;
        this.readBlock();
      }
      return this.buffer[this.pos++];
    }, l.prototype.getUint16 = function() {
      var I = this.getByte(), g = this.getByte();
      return I === -1 || g === -1 ? -1 : (I << 8) + g;
    }, l.prototype.getInt32 = function() {
      var I = this.getByte(), g = this.getByte(), C = this.getByte(), A = this.getByte();
      return (I << 24) + (g << 16) + (C << 8) + A;
    }, l.prototype.getBytes = function(I, g) {
      g === void 0 && (g = !1);
      var C, A = this.pos;
      if (I) {
        for (this.ensureBuffer(A + I), C = A + I; !this.eof && this.bufferLength < C; )
          this.readBlock();
        var d = this.bufferLength;
        C > d && (C = d);
      } else {
        for (; !this.eof; )
          this.readBlock();
        C = this.bufferLength;
      }
      this.pos = C;
      var Z = this.buffer.subarray(A, C);
      return g && !(Z instanceof Uint8ClampedArray) ? new Uint8ClampedArray(Z) : Z;
    }, l.prototype.peekByte = function() {
      var I = this.getByte();
      return this.pos--, I;
    }, l.prototype.peekBytes = function(I, g) {
      g === void 0 && (g = !1);
      var C = this.getBytes(I, g);
      return this.pos -= C.length, C;
    }, l.prototype.skip = function(I) {
      I || (I = 1), this.pos += I;
    }, l.prototype.reset = function() {
      this.pos = 0;
    }, l.prototype.makeSubStream = function(I, g) {
      for (var C = I + g; this.bufferLength <= C && !this.eof; )
        this.readBlock();
      return new bF(
        this.buffer,
        I,
        g
        /* dict */
      );
    }, l.prototype.decode = function() {
      for (; !this.eof; )
        this.readBlock();
      return this.buffer.subarray(0, this.bufferLength);
    }, l.prototype.readBlock = function() {
      throw new dC(this.constructor.name, "readBlock");
    }, l.prototype.ensureBuffer = function(I) {
      var g = this.buffer;
      if (I <= g.byteLength)
        return g;
      for (var C = this.minBufferLength; C < I; )
        C *= 2;
      var A = new Uint8Array(C);
      return A.set(g), this.buffer = A;
    }, l;
  }()
), Oi = function(l) {
  return l === 32 || l === 9 || l === 13 || l === 10;
}, UW = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C) {
      var A = l.call(this, C) || this;
      return A.stream = g, A.input = new Uint8Array(5), C && (C = 0.8 * C), A;
    }
    return I.prototype.readBlock = function() {
      for (var g = 126, C = 122, A = -1, d = this.stream, Z = d.getByte(); Oi(Z); )
        Z = d.getByte();
      if (Z === A || Z === g) {
        this.eof = !0;
        return;
      }
      var i = this.bufferLength, B, F;
      if (Z === C) {
        for (B = this.ensureBuffer(i + 4), F = 0; F < 4; ++F)
          B[i + F] = 0;
        this.bufferLength += 4;
      } else {
        var s = this.input;
        for (s[0] = Z, F = 1; F < 5; ++F) {
          for (Z = d.getByte(); Oi(Z); )
            Z = d.getByte();
          if (s[F] = Z, Z === A || Z === g)
            break;
        }
        if (B = this.ensureBuffer(i + F - 1), this.bufferLength += F - 1, F < 5) {
          for (; F < 5; ++F)
            s[F] = 117;
          this.eof = !0;
        }
        var c = 0;
        for (F = 0; F < 5; ++F)
          c = c * 85 + (s[F] - 33);
        for (F = 3; F >= 0; --F)
          B[i + F] = c & 255, c >>= 8;
      }
    }, I;
  }(kl)
), aW = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C) {
      var A = l.call(this, C) || this;
      return A.stream = g, A.firstDigit = -1, C && (C = 0.5 * C), A;
    }
    return I.prototype.readBlock = function() {
      var g = 8e3, C = this.stream.getBytes(g);
      if (!C.length) {
        this.eof = !0;
        return;
      }
      for (var A = C.length + 1 >> 1, d = this.ensureBuffer(this.bufferLength + A), Z = this.bufferLength, i = this.firstDigit, B = 0, F = C.length; B < F; B++) {
        var s = C[B], c = void 0;
        if (s >= 48 && s <= 57)
          c = s & 15;
        else if (s >= 65 && s <= 70 || s >= 97 && s <= 102)
          c = (s & 15) + 9;
        else if (s === 62) {
          this.eof = !0;
          break;
        } else
          continue;
        i < 0 ? i = c : (d[Z++] = i << 4 | c, i = -1);
      }
      i >= 0 && this.eof && (d[Z++] = i << 4, i = -1), this.firstDigit = i, this.bufferLength = Z;
    }, I;
  }(kl)
), fi = new Int32Array([
  16,
  17,
  18,
  0,
  8,
  7,
  9,
  6,
  10,
  5,
  11,
  4,
  12,
  3,
  13,
  2,
  14,
  1,
  15
]), oW = new Int32Array([
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  65547,
  65549,
  65551,
  65553,
  131091,
  131095,
  131099,
  131103,
  196643,
  196651,
  196659,
  196667,
  262211,
  262227,
  262243,
  262259,
  327811,
  327843,
  327875,
  327907,
  258,
  258,
  258
]), eW = new Int32Array([
  1,
  2,
  3,
  4,
  65541,
  65543,
  131081,
  131085,
  196625,
  196633,
  262177,
  262193,
  327745,
  327777,
  393345,
  393409,
  459009,
  459137,
  524801,
  525057,
  590849,
  591361,
  657409,
  658433,
  724993,
  727041,
  794625,
  798721,
  868353,
  876545
]), mW = [new Int32Array([
  459008,
  524368,
  524304,
  524568,
  459024,
  524400,
  524336,
  590016,
  459016,
  524384,
  524320,
  589984,
  524288,
  524416,
  524352,
  590048,
  459012,
  524376,
  524312,
  589968,
  459028,
  524408,
  524344,
  590032,
  459020,
  524392,
  524328,
  59e4,
  524296,
  524424,
  524360,
  590064,
  459010,
  524372,
  524308,
  524572,
  459026,
  524404,
  524340,
  590024,
  459018,
  524388,
  524324,
  589992,
  524292,
  524420,
  524356,
  590056,
  459014,
  524380,
  524316,
  589976,
  459030,
  524412,
  524348,
  590040,
  459022,
  524396,
  524332,
  590008,
  524300,
  524428,
  524364,
  590072,
  459009,
  524370,
  524306,
  524570,
  459025,
  524402,
  524338,
  590020,
  459017,
  524386,
  524322,
  589988,
  524290,
  524418,
  524354,
  590052,
  459013,
  524378,
  524314,
  589972,
  459029,
  524410,
  524346,
  590036,
  459021,
  524394,
  524330,
  590004,
  524298,
  524426,
  524362,
  590068,
  459011,
  524374,
  524310,
  524574,
  459027,
  524406,
  524342,
  590028,
  459019,
  524390,
  524326,
  589996,
  524294,
  524422,
  524358,
  590060,
  459015,
  524382,
  524318,
  589980,
  459031,
  524414,
  524350,
  590044,
  459023,
  524398,
  524334,
  590012,
  524302,
  524430,
  524366,
  590076,
  459008,
  524369,
  524305,
  524569,
  459024,
  524401,
  524337,
  590018,
  459016,
  524385,
  524321,
  589986,
  524289,
  524417,
  524353,
  590050,
  459012,
  524377,
  524313,
  589970,
  459028,
  524409,
  524345,
  590034,
  459020,
  524393,
  524329,
  590002,
  524297,
  524425,
  524361,
  590066,
  459010,
  524373,
  524309,
  524573,
  459026,
  524405,
  524341,
  590026,
  459018,
  524389,
  524325,
  589994,
  524293,
  524421,
  524357,
  590058,
  459014,
  524381,
  524317,
  589978,
  459030,
  524413,
  524349,
  590042,
  459022,
  524397,
  524333,
  590010,
  524301,
  524429,
  524365,
  590074,
  459009,
  524371,
  524307,
  524571,
  459025,
  524403,
  524339,
  590022,
  459017,
  524387,
  524323,
  589990,
  524291,
  524419,
  524355,
  590054,
  459013,
  524379,
  524315,
  589974,
  459029,
  524411,
  524347,
  590038,
  459021,
  524395,
  524331,
  590006,
  524299,
  524427,
  524363,
  590070,
  459011,
  524375,
  524311,
  524575,
  459027,
  524407,
  524343,
  590030,
  459019,
  524391,
  524327,
  589998,
  524295,
  524423,
  524359,
  590062,
  459015,
  524383,
  524319,
  589982,
  459031,
  524415,
  524351,
  590046,
  459023,
  524399,
  524335,
  590014,
  524303,
  524431,
  524367,
  590078,
  459008,
  524368,
  524304,
  524568,
  459024,
  524400,
  524336,
  590017,
  459016,
  524384,
  524320,
  589985,
  524288,
  524416,
  524352,
  590049,
  459012,
  524376,
  524312,
  589969,
  459028,
  524408,
  524344,
  590033,
  459020,
  524392,
  524328,
  590001,
  524296,
  524424,
  524360,
  590065,
  459010,
  524372,
  524308,
  524572,
  459026,
  524404,
  524340,
  590025,
  459018,
  524388,
  524324,
  589993,
  524292,
  524420,
  524356,
  590057,
  459014,
  524380,
  524316,
  589977,
  459030,
  524412,
  524348,
  590041,
  459022,
  524396,
  524332,
  590009,
  524300,
  524428,
  524364,
  590073,
  459009,
  524370,
  524306,
  524570,
  459025,
  524402,
  524338,
  590021,
  459017,
  524386,
  524322,
  589989,
  524290,
  524418,
  524354,
  590053,
  459013,
  524378,
  524314,
  589973,
  459029,
  524410,
  524346,
  590037,
  459021,
  524394,
  524330,
  590005,
  524298,
  524426,
  524362,
  590069,
  459011,
  524374,
  524310,
  524574,
  459027,
  524406,
  524342,
  590029,
  459019,
  524390,
  524326,
  589997,
  524294,
  524422,
  524358,
  590061,
  459015,
  524382,
  524318,
  589981,
  459031,
  524414,
  524350,
  590045,
  459023,
  524398,
  524334,
  590013,
  524302,
  524430,
  524366,
  590077,
  459008,
  524369,
  524305,
  524569,
  459024,
  524401,
  524337,
  590019,
  459016,
  524385,
  524321,
  589987,
  524289,
  524417,
  524353,
  590051,
  459012,
  524377,
  524313,
  589971,
  459028,
  524409,
  524345,
  590035,
  459020,
  524393,
  524329,
  590003,
  524297,
  524425,
  524361,
  590067,
  459010,
  524373,
  524309,
  524573,
  459026,
  524405,
  524341,
  590027,
  459018,
  524389,
  524325,
  589995,
  524293,
  524421,
  524357,
  590059,
  459014,
  524381,
  524317,
  589979,
  459030,
  524413,
  524349,
  590043,
  459022,
  524397,
  524333,
  590011,
  524301,
  524429,
  524365,
  590075,
  459009,
  524371,
  524307,
  524571,
  459025,
  524403,
  524339,
  590023,
  459017,
  524387,
  524323,
  589991,
  524291,
  524419,
  524355,
  590055,
  459013,
  524379,
  524315,
  589975,
  459029,
  524411,
  524347,
  590039,
  459021,
  524395,
  524331,
  590007,
  524299,
  524427,
  524363,
  590071,
  459011,
  524375,
  524311,
  524575,
  459027,
  524407,
  524343,
  590031,
  459019,
  524391,
  524327,
  589999,
  524295,
  524423,
  524359,
  590063,
  459015,
  524383,
  524319,
  589983,
  459031,
  524415,
  524351,
  590047,
  459023,
  524399,
  524335,
  590015,
  524303,
  524431,
  524367,
  590079
]), 9], hW = [new Int32Array([
  327680,
  327696,
  327688,
  327704,
  327684,
  327700,
  327692,
  327708,
  327682,
  327698,
  327690,
  327706,
  327686,
  327702,
  327694,
  0,
  327681,
  327697,
  327689,
  327705,
  327685,
  327701,
  327693,
  327709,
  327683,
  327699,
  327691,
  327707,
  327687,
  327703,
  327695,
  0
]), 5], QW = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C) {
      var A = l.call(this, C) || this;
      A.stream = g;
      var d = g.getByte(), Z = g.getByte();
      if (d === -1 || Z === -1)
        throw new Error("Invalid header in flate stream: " + d + ", " + Z);
      if ((d & 15) !== 8)
        throw new Error("Unknown compression method in flate stream: " + d + ", " + Z);
      if (((d << 8) + Z) % 31 !== 0)
        throw new Error("Bad FCHECK in flate stream: " + d + ", " + Z);
      if (Z & 32)
        throw new Error("FDICT bit set in flate stream: " + d + ", " + Z);
      return A.codeSize = 0, A.codeBuf = 0, A;
    }
    return I.prototype.readBlock = function() {
      var g, C, A = this.stream, d = this.getBits(3);
      if (d & 1 && (this.eof = !0), d >>= 1, d === 0) {
        var Z = void 0;
        if ((Z = A.getByte()) === -1)
          throw new Error("Bad block header in flate stream");
        var i = Z;
        if ((Z = A.getByte()) === -1)
          throw new Error("Bad block header in flate stream");
        if (i |= Z << 8, (Z = A.getByte()) === -1)
          throw new Error("Bad block header in flate stream");
        var B = Z;
        if ((Z = A.getByte()) === -1)
          throw new Error("Bad block header in flate stream");
        if (B |= Z << 8, B !== (~i & 65535) && (i !== 0 || B !== 0))
          throw new Error("Bad uncompressed block length in flate stream");
        this.codeBuf = 0, this.codeSize = 0;
        var F = this.bufferLength;
        g = this.ensureBuffer(F + i);
        var s = F + i;
        if (this.bufferLength = s, i === 0)
          A.peekByte() === -1 && (this.eof = !0);
        else
          for (var c = F; c < s; ++c) {
            if ((Z = A.getByte()) === -1) {
              this.eof = !0;
              break;
            }
            g[c] = Z;
          }
        return;
      }
      var G, V;
      if (d === 1)
        G = mW, V = hW;
      else if (d === 2) {
        var W = this.getBits(5) + 257, R = this.getBits(5) + 1, U = this.getBits(4) + 4, n = new Uint8Array(fi.length), m = void 0;
        for (m = 0; m < U; ++m)
          n[fi[m]] = this.getBits(3);
        var e = this.generateHuffmanTable(n);
        C = 0, m = 0;
        for (var N = W + R, w = new Uint8Array(N), S = void 0, Y = void 0, M = void 0; m < N; ) {
          var y = this.getCode(e);
          if (y === 16)
            S = 2, Y = 3, M = C;
          else if (y === 17)
            S = 3, Y = 3, M = C = 0;
          else if (y === 18)
            S = 7, Y = 11, M = C = 0;
          else {
            w[m++] = C = y;
            continue;
          }
          for (var r = this.getBits(S) + Y; r-- > 0; )
            w[m++] = M;
        }
        G = this.generateHuffmanTable(w.subarray(0, W)), V = this.generateHuffmanTable(w.subarray(W, N));
      } else
        throw new Error("Unknown block type in flate stream");
      g = this.buffer;
      for (var z = g ? g.length : 0, E = this.bufferLength; ; ) {
        var X = this.getCode(G);
        if (X < 256) {
          E + 1 >= z && (g = this.ensureBuffer(E + 1), z = g.length), g[E++] = X;
          continue;
        }
        if (X === 256) {
          this.bufferLength = E;
          return;
        }
        X -= 257, X = oW[X];
        var O = X >> 16;
        O > 0 && (O = this.getBits(O)), C = (X & 65535) + O, X = this.getCode(V), X = eW[X], O = X >> 16, O > 0 && (O = this.getBits(O));
        var _ = (X & 65535) + O;
        E + C >= z && (g = this.ensureBuffer(E + C), z = g.length);
        for (var p = 0; p < C; ++p, ++E)
          g[E] = g[E - _];
      }
    }, I.prototype.getBits = function(g) {
      for (var C = this.stream, A = this.codeSize, d = this.codeBuf, Z; A < g; ) {
        if ((Z = C.getByte()) === -1)
          throw new Error("Bad encoding in flate stream");
        d |= Z << A, A += 8;
      }
      return Z = d & (1 << g) - 1, this.codeBuf = d >> g, this.codeSize = A -= g, Z;
    }, I.prototype.getCode = function(g) {
      for (var C = this.stream, A = g[0], d = g[1], Z = this.codeSize, i = this.codeBuf, B; Z < d && (B = C.getByte()) !== -1; )
        i |= B << Z, Z += 8;
      var F = A[i & (1 << d) - 1];
      typeof A == "number" && console.log("FLATE:", F);
      var s = F >> 16, c = F & 65535;
      if (s < 1 || Z < s)
        throw new Error("Bad encoding in flate stream");
      return this.codeBuf = i >> s, this.codeSize = Z - s, c;
    }, I.prototype.generateHuffmanTable = function(g) {
      var C = g.length, A = 0, d;
      for (d = 0; d < C; ++d)
        g[d] > A && (A = g[d]);
      for (var Z = 1 << A, i = new Int32Array(Z), B = 1, F = 0, s = 2; B <= A; ++B, F <<= 1, s <<= 1)
        for (var c = 0; c < C; ++c)
          if (g[c] === B) {
            var G = 0, V = F;
            for (d = 0; d < B; ++d)
              G = G << 1 | V & 1, V >>= 1;
            for (d = G; d < Z; d += s)
              i[d] = B << 16 | c;
            ++F;
          }
      return [i, A];
    }, I;
  }(kl)
), tW = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C, A) {
      var d = l.call(this, C) || this;
      d.stream = g, d.cachedData = 0, d.bitsCached = 0;
      for (var Z = 4096, i = {
        earlyChange: A,
        codeLength: 9,
        nextCode: 258,
        dictionaryValues: new Uint8Array(Z),
        dictionaryLengths: new Uint16Array(Z),
        dictionaryPrevCodes: new Uint16Array(Z),
        currentSequence: new Uint8Array(Z),
        currentSequenceLength: 0
      }, B = 0; B < 256; ++B)
        i.dictionaryValues[B] = B, i.dictionaryLengths[B] = 1;
      return d.lzwState = i, d;
    }
    return I.prototype.readBlock = function() {
      var g = 512, C = g * 2, A = g, d, Z, i, B = this.lzwState;
      if (B) {
        var F = B.earlyChange, s = B.nextCode, c = B.dictionaryValues, G = B.dictionaryLengths, V = B.dictionaryPrevCodes, W = B.codeLength, R = B.prevCode, U = B.currentSequence, n = B.currentSequenceLength, m = 0, e = this.bufferLength, N = this.ensureBuffer(this.bufferLength + C);
        for (d = 0; d < g; d++) {
          var w = this.readBits(W), S = n > 0;
          if (!w || w < 256)
            U[0] = w, n = 1;
          else if (w >= 258)
            if (w < s)
              for (n = G[w], Z = n - 1, i = w; Z >= 0; Z--)
                U[Z] = c[i], i = V[i];
            else
              U[n++] = U[0];
          else if (w === 256) {
            W = 9, s = 258, n = 0;
            continue;
          } else {
            this.eof = !0, delete this.lzwState;
            break;
          }
          if (S && (V[s] = R, G[s] = G[R] + 1, c[s] = U[0], s++, W = s + F & s + F - 1 ? W : Math.min(Math.log(s + F) / 0.6931471805599453 + 1, 12) | 0), R = w, m += n, C < m) {
            do
              C += A;
            while (C < m);
            N = this.ensureBuffer(this.bufferLength + C);
          }
          for (Z = 0; Z < n; Z++)
            N[e++] = U[Z];
        }
        B.nextCode = s, B.codeLength = W, B.prevCode = R, B.currentSequenceLength = n, this.bufferLength = e;
      }
    }, I.prototype.readBits = function(g) {
      for (var C = this.bitsCached, A = this.cachedData; C < g; ) {
        var d = this.stream.getByte();
        if (d === -1)
          return this.eof = !0, null;
        A = A << 8 | d, C += 8;
      }
      return this.bitsCached = C -= g, this.cachedData = A, A >>> C & (1 << g) - 1;
    }, I;
  }(kl)
), NW = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C) {
      var A = l.call(this, C) || this;
      return A.stream = g, A;
    }
    return I.prototype.readBlock = function() {
      var g = this.stream.getBytes(2);
      if (!g || g.length < 2 || g[0] === 128) {
        this.eof = !0;
        return;
      }
      var C, A = this.bufferLength, d = g[0];
      if (d < 128) {
        if (C = this.ensureBuffer(A + d + 1), C[A++] = g[1], d > 0) {
          var Z = this.stream.getBytes(d);
          C.set(Z, A), A += d;
        }
      } else {
        d = 257 - d;
        var i = g[1];
        C = this.ensureBuffer(A + d + 1);
        for (var B = 0; B < d; B++)
          C[A++] = i;
      }
      this.bufferLength = A;
    }, I;
  }(kl)
), Pi = function(l, I, g) {
  if (I === Q.of("FlateDecode"))
    return new QW(l);
  if (I === Q.of("LZWDecode")) {
    var C = 1;
    if (g instanceof tI) {
      var A = g.lookup(Q.of("EarlyChange"));
      A instanceof RI && (C = A.asNumber());
    }
    return new tW(l, void 0, C);
  }
  if (I === Q.of("ASCII85Decode"))
    return new UW(l);
  if (I === Q.of("ASCIIHexDecode"))
    return new aW(l);
  if (I === Q.of("RunLengthDecode"))
    return new NW(l);
  throw new XV(I.asString());
}, RF = function(l) {
  var I = l.dict, g = l.contents, C = new bF(g), A = I.lookup(Q.of("Filter")), d = I.lookup(Q.of("DecodeParms"));
  if (A instanceof Q)
    C = Pi(C, A, d);
  else if (A instanceof LI)
    for (var Z = 0, i = A.size(); Z < i; Z++)
      C = Pi(C, A.lookup(Z, Q), d && d.lookupMaybe(Z, tI));
  else if (A)
    throw new Ud([Q, LI], A);
  return C;
}, wW = function(l) {
  var I = l.MediaBox(), g = I.lookup(2, RI).asNumber() - I.lookup(0, RI).asNumber(), C = I.lookup(3, RI).asNumber() - I.lookup(1, RI).asNumber();
  return { left: 0, bottom: 0, right: g, top: C };
}, YW = function(l) {
  return [1, 0, 0, 1, -l.left, -l.bottom];
}, nF = (
  /** @class */
  function() {
    function l(I, g, C) {
      this.page = I;
      var A = g ?? wW(I);
      this.width = A.right - A.left, this.height = A.top - A.bottom, this.boundingBox = A, this.transformationMatrix = C ?? YW(A);
    }
    return l.for = function(I, g, C) {
      return NI(this, void 0, void 0, function() {
        return wI(this, function(A) {
          return [2, new l(I, g, C)];
        });
      });
    }, l.prototype.embedIntoContext = function(I, g) {
      return NI(this, void 0, void 0, function() {
        var C, A, d, Z, i, B, F, s, c, G;
        return wI(this, function(V) {
          if (C = this.page.normalizedEntries(), A = C.Contents, d = C.Resources, !A)
            throw new HV();
          return Z = this.decodeContents(A), i = this.boundingBox, B = i.left, F = i.bottom, s = i.right, c = i.top, G = I.flateStream(Z, {
            Type: "XObject",
            Subtype: "Form",
            FormType: 1,
            BBox: [B, F, s, c],
            Matrix: this.transformationMatrix,
            Resources: d
          }), g ? (I.assign(g, G), [2, g]) : [2, I.register(G)];
        });
      });
    }, l.prototype.decodeContents = function(I) {
      for (var g = Uint8Array.of(t.Newline), C = [], A = 0, d = I.size(); A < d; A++) {
        var Z = I.lookup(A, vg), i = void 0;
        if (Z instanceof Yl)
          i = RF(Z).decode();
        else if (Z instanceof Rl)
          i = Z.getUnencodedContents();
        else
          throw new pV(Z);
        C.push(i, g);
      }
      return XG.apply(void 0, C);
    }, l;
  }()
), $l = function(l, I) {
  if (l !== void 0)
    return I[l];
}, nl;
(function(l) {
  l.UseNone = "UseNone", l.UseOutlines = "UseOutlines", l.UseThumbs = "UseThumbs", l.UseOC = "UseOC";
})(nl || (nl = {}));
var Ul;
(function(l) {
  l.L2R = "L2R", l.R2L = "R2L";
})(Ul || (Ul = {}));
var al;
(function(l) {
  l.None = "None", l.AppDefault = "AppDefault";
})(al || (al = {}));
var ed;
(function(l) {
  l.Simplex = "Simplex", l.DuplexFlipShortEdge = "DuplexFlipShortEdge", l.DuplexFlipLongEdge = "DuplexFlipLongEdge";
})(ed || (ed = {}));
var qi = (
  /** @class */
  function() {
    function l(I) {
      this.dict = I;
    }
    return l.prototype.lookupBool = function(I) {
      var g = this.dict.lookup(Q.of(I));
      if (g instanceof wl)
        return g;
    }, l.prototype.lookupName = function(I) {
      var g = this.dict.lookup(Q.of(I));
      if (g instanceof Q)
        return g;
    }, l.prototype.HideToolbar = function() {
      return this.lookupBool("HideToolbar");
    }, l.prototype.HideMenubar = function() {
      return this.lookupBool("HideMenubar");
    }, l.prototype.HideWindowUI = function() {
      return this.lookupBool("HideWindowUI");
    }, l.prototype.FitWindow = function() {
      return this.lookupBool("FitWindow");
    }, l.prototype.CenterWindow = function() {
      return this.lookupBool("CenterWindow");
    }, l.prototype.DisplayDocTitle = function() {
      return this.lookupBool("DisplayDocTitle");
    }, l.prototype.NonFullScreenPageMode = function() {
      return this.lookupName("NonFullScreenPageMode");
    }, l.prototype.Direction = function() {
      return this.lookupName("Direction");
    }, l.prototype.PrintScaling = function() {
      return this.lookupName("PrintScaling");
    }, l.prototype.Duplex = function() {
      return this.lookupName("Duplex");
    }, l.prototype.PickTrayByPDFSize = function() {
      return this.lookupBool("PickTrayByPDFSize");
    }, l.prototype.PrintPageRange = function() {
      var I = this.dict.lookup(Q.of("PrintPageRange"));
      if (I instanceof LI)
        return I;
    }, l.prototype.NumCopies = function() {
      var I = this.dict.lookup(Q.of("NumCopies"));
      if (I instanceof RI)
        return I;
    }, l.prototype.getHideToolbar = function() {
      var I, g;
      return (g = (I = this.HideToolbar()) === null || I === void 0 ? void 0 : I.asBoolean()) !== null && g !== void 0 ? g : !1;
    }, l.prototype.getHideMenubar = function() {
      var I, g;
      return (g = (I = this.HideMenubar()) === null || I === void 0 ? void 0 : I.asBoolean()) !== null && g !== void 0 ? g : !1;
    }, l.prototype.getHideWindowUI = function() {
      var I, g;
      return (g = (I = this.HideWindowUI()) === null || I === void 0 ? void 0 : I.asBoolean()) !== null && g !== void 0 ? g : !1;
    }, l.prototype.getFitWindow = function() {
      var I, g;
      return (g = (I = this.FitWindow()) === null || I === void 0 ? void 0 : I.asBoolean()) !== null && g !== void 0 ? g : !1;
    }, l.prototype.getCenterWindow = function() {
      var I, g;
      return (g = (I = this.CenterWindow()) === null || I === void 0 ? void 0 : I.asBoolean()) !== null && g !== void 0 ? g : !1;
    }, l.prototype.getDisplayDocTitle = function() {
      var I, g;
      return (g = (I = this.DisplayDocTitle()) === null || I === void 0 ? void 0 : I.asBoolean()) !== null && g !== void 0 ? g : !1;
    }, l.prototype.getNonFullScreenPageMode = function() {
      var I, g, C = (I = this.NonFullScreenPageMode()) === null || I === void 0 ? void 0 : I.decodeText();
      return (g = $l(C, nl)) !== null && g !== void 0 ? g : nl.UseNone;
    }, l.prototype.getReadingDirection = function() {
      var I, g, C = (I = this.Direction()) === null || I === void 0 ? void 0 : I.decodeText();
      return (g = $l(C, Ul)) !== null && g !== void 0 ? g : Ul.L2R;
    }, l.prototype.getPrintScaling = function() {
      var I, g, C = (I = this.PrintScaling()) === null || I === void 0 ? void 0 : I.decodeText();
      return (g = $l(C, al)) !== null && g !== void 0 ? g : al.AppDefault;
    }, l.prototype.getDuplex = function() {
      var I, g = (I = this.Duplex()) === null || I === void 0 ? void 0 : I.decodeText();
      return $l(g, ed);
    }, l.prototype.getPickTrayByPDFSize = function() {
      var I;
      return (I = this.PickTrayByPDFSize()) === null || I === void 0 ? void 0 : I.asBoolean();
    }, l.prototype.getPrintPageRange = function() {
      var I = this.PrintPageRange();
      if (!I)
        return [];
      for (var g = [], C = 0; C < I.size(); C += 2) {
        var A = I.lookup(C, RI).asNumber(), d = I.lookup(C + 1, RI).asNumber();
        g.push({ start: A, end: d });
      }
      return g;
    }, l.prototype.getNumCopies = function() {
      var I, g;
      return (g = (I = this.NumCopies()) === null || I === void 0 ? void 0 : I.asNumber()) !== null && g !== void 0 ? g : 1;
    }, l.prototype.setHideToolbar = function(I) {
      var g = this.dict.context.obj(I);
      this.dict.set(Q.of("HideToolbar"), g);
    }, l.prototype.setHideMenubar = function(I) {
      var g = this.dict.context.obj(I);
      this.dict.set(Q.of("HideMenubar"), g);
    }, l.prototype.setHideWindowUI = function(I) {
      var g = this.dict.context.obj(I);
      this.dict.set(Q.of("HideWindowUI"), g);
    }, l.prototype.setFitWindow = function(I) {
      var g = this.dict.context.obj(I);
      this.dict.set(Q.of("FitWindow"), g);
    }, l.prototype.setCenterWindow = function(I) {
      var g = this.dict.context.obj(I);
      this.dict.set(Q.of("CenterWindow"), g);
    }, l.prototype.setDisplayDocTitle = function(I) {
      var g = this.dict.context.obj(I);
      this.dict.set(Q.of("DisplayDocTitle"), g);
    }, l.prototype.setNonFullScreenPageMode = function(I) {
      LC(I, "nonFullScreenPageMode", nl);
      var g = Q.of(I);
      this.dict.set(Q.of("NonFullScreenPageMode"), g);
    }, l.prototype.setReadingDirection = function(I) {
      LC(I, "readingDirection", Ul);
      var g = Q.of(I);
      this.dict.set(Q.of("Direction"), g);
    }, l.prototype.setPrintScaling = function(I) {
      LC(I, "printScaling", al);
      var g = Q.of(I);
      this.dict.set(Q.of("PrintScaling"), g);
    }, l.prototype.setDuplex = function(I) {
      LC(I, "duplex", ed);
      var g = Q.of(I);
      this.dict.set(Q.of("Duplex"), g);
    }, l.prototype.setPickTrayByPDFSize = function(I) {
      var g = this.dict.context.obj(I);
      this.dict.set(Q.of("PickTrayByPDFSize"), g);
    }, l.prototype.setPrintPageRange = function(I) {
      Array.isArray(I) || (I = [I]);
      for (var g = [], C = 0, A = I.length; C < A; C++)
        g.push(I[C].start), g.push(I[C].end);
      dF(g, "printPageRange", ["number"]);
      var d = this.dict.context.obj(g);
      this.dict.set(Q.of("PrintPageRange"), d);
    }, l.prototype.setNumCopies = function(I) {
      Eg(I, "numCopies", 1, Number.MAX_VALUE), yV(I, "numCopies");
      var g = this.dict.context.obj(I);
      this.dict.set(Q.of("NumCopies"), g);
    }, l.fromDict = function(I) {
      return new l(I);
    }, l.create = function(I) {
      var g = I.obj({});
      return new l(g);
    }, l;
  }()
), SW = /\/([^\0\t\n\f\r\ ]+)[\0\t\n\f\r\ ]*(\d*\.\d+|\d+)?[\0\t\n\f\r\ ]+Tf/, UF = (
  /** @class */
  function() {
    function l(I, g) {
      this.dict = I, this.ref = g;
    }
    return l.prototype.T = function() {
      return this.dict.lookupMaybe(Q.of("T"), xI, cI);
    }, l.prototype.Ff = function() {
      var I = this.getInheritableAttribute(Q.of("Ff"));
      return this.dict.context.lookupMaybe(I, RI);
    }, l.prototype.V = function() {
      var I = this.getInheritableAttribute(Q.of("V"));
      return this.dict.context.lookup(I);
    }, l.prototype.Kids = function() {
      return this.dict.lookupMaybe(Q.of("Kids"), LI);
    }, l.prototype.DA = function() {
      var I = this.dict.lookup(Q.of("DA"));
      if (I instanceof xI || I instanceof cI)
        return I;
    }, l.prototype.setKids = function(I) {
      this.dict.set(Q.of("Kids"), this.dict.context.obj(I));
    }, l.prototype.getParent = function() {
      var I = this.dict.get(Q.of("Parent"));
      if (I instanceof OI) {
        var g = this.dict.lookup(Q.of("Parent"), tI);
        return new l(g, I);
      }
    }, l.prototype.setParent = function(I) {
      I ? this.dict.set(Q.of("Parent"), I) : this.dict.delete(Q.of("Parent"));
    }, l.prototype.getFullyQualifiedName = function() {
      var I = this.getParent();
      return I ? I.getFullyQualifiedName() + "." + this.getPartialName() : this.getPartialName();
    }, l.prototype.getPartialName = function() {
      var I;
      return (I = this.T()) === null || I === void 0 ? void 0 : I.decodeText();
    }, l.prototype.setPartialName = function(I) {
      I ? this.dict.set(Q.of("T"), cI.fromText(I)) : this.dict.delete(Q.of("T"));
    }, l.prototype.setDefaultAppearance = function(I) {
      this.dict.set(Q.of("DA"), xI.of(I));
    }, l.prototype.getDefaultAppearance = function() {
      var I = this.DA();
      return I instanceof cI ? I.decodeText() : I?.asString();
    }, l.prototype.setFontSize = function(I) {
      var g, C = (g = this.getFullyQualifiedName()) !== null && g !== void 0 ? g : "", A = this.getDefaultAppearance();
      if (!A)
        throw new zV(C);
      var d = RZ(A, SW);
      if (!d.match)
        throw new TV(C);
      var Z = A.slice(0, d.pos - d.match[0].length), i = d.pos <= A.length ? A.slice(d.pos) : "", B = d.match[1], F = Z + " /" + B + " " + I + " Tf " + i;
      this.setDefaultAppearance(F);
    }, l.prototype.getFlags = function() {
      var I, g;
      return (g = (I = this.Ff()) === null || I === void 0 ? void 0 : I.asNumber()) !== null && g !== void 0 ? g : 0;
    }, l.prototype.setFlags = function(I) {
      this.dict.set(Q.of("Ff"), RI.of(I));
    }, l.prototype.hasFlag = function(I) {
      var g = this.getFlags();
      return (g & I) !== 0;
    }, l.prototype.setFlag = function(I) {
      var g = this.getFlags();
      this.setFlags(g | I);
    }, l.prototype.clearFlag = function(I) {
      var g = this.getFlags();
      this.setFlags(g & ~I);
    }, l.prototype.setFlagTo = function(I, g) {
      g ? this.setFlag(I) : this.clearFlag(I);
    }, l.prototype.getInheritableAttribute = function(I) {
      var g;
      return this.ascend(function(C) {
        g || (g = C.dict.get(I));
      }), g;
    }, l.prototype.ascend = function(I) {
      I(this);
      var g = this.getParent();
      g && g.ascend(I);
    }, l;
  }()
), w0 = (
  /** @class */
  function() {
    function l(I) {
      this.dict = I;
    }
    return l.prototype.W = function() {
      var I = this.dict.lookup(Q.of("W"));
      if (I instanceof RI)
        return I;
    }, l.prototype.getWidth = function() {
      var I, g;
      return (g = (I = this.W()) === null || I === void 0 ? void 0 : I.asNumber()) !== null && g !== void 0 ? g : 1;
    }, l.prototype.setWidth = function(I) {
      var g = this.dict.context.obj(I);
      this.dict.set(Q.of("W"), g);
    }, l.fromDict = function(I) {
      return new l(I);
    }, l;
  }()
), JW = (
  /** @class */
  function() {
    function l(I) {
      this.dict = I;
    }
    return l.prototype.Rect = function() {
      return this.dict.lookup(Q.of("Rect"), LI);
    }, l.prototype.AP = function() {
      return this.dict.lookupMaybe(Q.of("AP"), tI);
    }, l.prototype.F = function() {
      var I = this.dict.lookup(Q.of("F"));
      return this.dict.context.lookupMaybe(I, RI);
    }, l.prototype.getRectangle = function() {
      var I, g = this.Rect();
      return (I = g?.asRectangle()) !== null && I !== void 0 ? I : { x: 0, y: 0, width: 0, height: 0 };
    }, l.prototype.setRectangle = function(I) {
      var g = I.x, C = I.y, A = I.width, d = I.height, Z = this.dict.context.obj([g, C, g + A, C + d]);
      this.dict.set(Q.of("Rect"), Z);
    }, l.prototype.getAppearanceState = function() {
      var I = this.dict.lookup(Q.of("AS"));
      if (I instanceof Q)
        return I;
    }, l.prototype.setAppearanceState = function(I) {
      this.dict.set(Q.of("AS"), I);
    }, l.prototype.setAppearances = function(I) {
      this.dict.set(Q.of("AP"), I);
    }, l.prototype.ensureAP = function() {
      var I = this.AP();
      return I || (I = this.dict.context.obj({}), this.dict.set(Q.of("AP"), I)), I;
    }, l.prototype.getNormalAppearance = function() {
      var I = this.ensureAP(), g = I.get(Q.of("N"));
      if (g instanceof OI || g instanceof tI)
        return g;
      throw new Error("Unexpected N type: " + g?.constructor.name);
    }, l.prototype.setNormalAppearance = function(I) {
      var g = this.ensureAP();
      g.set(Q.of("N"), I);
    }, l.prototype.setRolloverAppearance = function(I) {
      var g = this.ensureAP();
      g.set(Q.of("R"), I);
    }, l.prototype.setDownAppearance = function(I) {
      var g = this.ensureAP();
      g.set(Q.of("D"), I);
    }, l.prototype.removeRolloverAppearance = function() {
      var I = this.AP();
      I?.delete(Q.of("R"));
    }, l.prototype.removeDownAppearance = function() {
      var I = this.AP();
      I?.delete(Q.of("D"));
    }, l.prototype.getAppearances = function() {
      var I = this.AP();
      if (I) {
        var g = I.lookup(Q.of("N"), tI, vg), C = I.lookupMaybe(Q.of("R"), tI, vg), A = I.lookupMaybe(Q.of("D"), tI, vg);
        return { normal: g, rollover: C, down: A };
      }
    }, l.prototype.getFlags = function() {
      var I, g;
      return (g = (I = this.F()) === null || I === void 0 ? void 0 : I.asNumber()) !== null && g !== void 0 ? g : 0;
    }, l.prototype.setFlags = function(I) {
      this.dict.set(Q.of("F"), RI.of(I));
    }, l.prototype.hasFlag = function(I) {
      var g = this.getFlags();
      return (g & I) !== 0;
    }, l.prototype.setFlag = function(I) {
      var g = this.getFlags();
      this.setFlags(g | I);
    }, l.prototype.clearFlag = function(I) {
      var g = this.getFlags();
      this.setFlags(g & ~I);
    }, l.prototype.setFlagTo = function(I, g) {
      g ? this.setFlag(I) : this.clearFlag(I);
    }, l.fromDict = function(I) {
      return new l(I);
    }, l;
  }()
), Y0 = (
  /** @class */
  function() {
    function l(I) {
      this.dict = I;
    }
    return l.prototype.R = function() {
      var I = this.dict.lookup(Q.of("R"));
      if (I instanceof RI)
        return I;
    }, l.prototype.BC = function() {
      var I = this.dict.lookup(Q.of("BC"));
      if (I instanceof LI)
        return I;
    }, l.prototype.BG = function() {
      var I = this.dict.lookup(Q.of("BG"));
      if (I instanceof LI)
        return I;
    }, l.prototype.CA = function() {
      var I = this.dict.lookup(Q.of("CA"));
      if (I instanceof cI || I instanceof xI)
        return I;
    }, l.prototype.RC = function() {
      var I = this.dict.lookup(Q.of("RC"));
      if (I instanceof cI || I instanceof xI)
        return I;
    }, l.prototype.AC = function() {
      var I = this.dict.lookup(Q.of("AC"));
      if (I instanceof cI || I instanceof xI)
        return I;
    }, l.prototype.getRotation = function() {
      var I;
      return (I = this.R()) === null || I === void 0 ? void 0 : I.asNumber();
    }, l.prototype.getBorderColor = function() {
      var I = this.BC();
      if (I) {
        for (var g = [], C = 0, A = I?.size(); C < A; C++) {
          var d = I.get(C);
          d instanceof RI && g.push(d.asNumber());
        }
        return g;
      }
    }, l.prototype.getBackgroundColor = function() {
      var I = this.BG();
      if (I) {
        for (var g = [], C = 0, A = I?.size(); C < A; C++) {
          var d = I.get(C);
          d instanceof RI && g.push(d.asNumber());
        }
        return g;
      }
    }, l.prototype.getCaptions = function() {
      var I = this.CA(), g = this.RC(), C = this.AC();
      return {
        normal: I?.decodeText(),
        rollover: g?.decodeText(),
        down: C?.decodeText()
      };
    }, l.prototype.setRotation = function(I) {
      var g = this.dict.context.obj(I);
      this.dict.set(Q.of("R"), g);
    }, l.prototype.setBorderColor = function(I) {
      var g = this.dict.context.obj(I);
      this.dict.set(Q.of("BC"), g);
    }, l.prototype.setBackgroundColor = function(I) {
      var g = this.dict.context.obj(I);
      this.dict.set(Q.of("BG"), g);
    }, l.prototype.setCaptions = function(I) {
      var g = cI.fromText(I.normal);
      if (this.dict.set(Q.of("CA"), g), I.rollover) {
        var C = cI.fromText(I.rollover);
        this.dict.set(Q.of("RC"), C);
      } else
        this.dict.delete(Q.of("RC"));
      if (I.down) {
        var A = cI.fromText(I.down);
        this.dict.set(Q.of("AC"), A);
      } else
        this.dict.delete(Q.of("AC"));
    }, l.fromDict = function(I) {
      return new l(I);
    }, l;
  }()
), L0 = (
  /** @class */
  function(l) {
    q(I, l);
    function I() {
      return l !== null && l.apply(this, arguments) || this;
    }
    return I.prototype.MK = function() {
      var g = this.dict.lookup(Q.of("MK"));
      if (g instanceof tI)
        return g;
    }, I.prototype.BS = function() {
      var g = this.dict.lookup(Q.of("BS"));
      if (g instanceof tI)
        return g;
    }, I.prototype.DA = function() {
      var g = this.dict.lookup(Q.of("DA"));
      if (g instanceof xI || g instanceof cI)
        return g;
    }, I.prototype.P = function() {
      var g = this.dict.get(Q.of("P"));
      if (g instanceof OI)
        return g;
    }, I.prototype.setP = function(g) {
      this.dict.set(Q.of("P"), g);
    }, I.prototype.setDefaultAppearance = function(g) {
      this.dict.set(Q.of("DA"), xI.of(g));
    }, I.prototype.getDefaultAppearance = function() {
      var g = this.DA();
      return g instanceof cI ? g.decodeText() : g?.asString();
    }, I.prototype.getAppearanceCharacteristics = function() {
      var g = this.MK();
      if (g)
        return Y0.fromDict(g);
    }, I.prototype.getOrCreateAppearanceCharacteristics = function() {
      var g = this.MK();
      if (g)
        return Y0.fromDict(g);
      var C = Y0.fromDict(this.dict.context.obj({}));
      return this.dict.set(Q.of("MK"), C.dict), C;
    }, I.prototype.getBorderStyle = function() {
      var g = this.BS();
      if (g)
        return w0.fromDict(g);
    }, I.prototype.getOrCreateBorderStyle = function() {
      var g = this.BS();
      if (g)
        return w0.fromDict(g);
      var C = w0.fromDict(this.dict.context.obj({}));
      return this.dict.set(Q.of("BS"), C.dict), C;
    }, I.prototype.getOnValue = function() {
      var g, C = (g = this.getAppearances()) === null || g === void 0 ? void 0 : g.normal;
      if (C instanceof tI)
        for (var A = C.keys(), d = 0, Z = A.length; d < Z; d++) {
          var i = A[d];
          if (i !== Q.of("Off"))
            return i;
        }
    }, I.fromDict = function(g) {
      return new I(g);
    }, I.create = function(g, C) {
      var A = g.obj({
        Type: "Annot",
        Subtype: "Widget",
        Rect: [0, 0, 0, 0],
        Parent: C
      });
      return new I(A);
    }, I;
  }(JW)
), zA = (
  /** @class */
  function(l) {
    q(I, l);
    function I() {
      return l !== null && l.apply(this, arguments) || this;
    }
    return I.prototype.FT = function() {
      var g = this.getInheritableAttribute(Q.of("FT"));
      return this.dict.context.lookup(g, Q);
    }, I.prototype.getWidgets = function() {
      var g = this.Kids();
      if (!g)
        return [L0.fromDict(this.dict)];
      for (var C = new Array(g.size()), A = 0, d = g.size(); A < d; A++) {
        var Z = g.lookup(A, tI);
        C[A] = L0.fromDict(Z);
      }
      return C;
    }, I.prototype.addWidget = function(g) {
      var C = this.normalizedEntries().Kids;
      C.push(g);
    }, I.prototype.removeWidget = function(g) {
      var C = this.Kids();
      if (C) {
        if (g < 0 || g > C.size())
          throw new ad(g, 0, C.size());
        C.remove(g);
      } else {
        if (g !== 0)
          throw new ad(g, 0, 0);
        this.setKids([]);
      }
    }, I.prototype.normalizedEntries = function() {
      var g = this.Kids();
      return g || (g = this.dict.context.obj([this.ref]), this.dict.set(Q.of("Kids"), g)), { Kids: g };
    }, I.fromDict = function(g, C) {
      return new I(g, C);
    }, I;
  }(UF)
), tZ = (
  /** @class */
  function(l) {
    q(I, l);
    function I() {
      return l !== null && l.apply(this, arguments) || this;
    }
    return I.prototype.Opt = function() {
      return this.dict.lookupMaybe(Q.of("Opt"), xI, cI, LI);
    }, I.prototype.setOpt = function(g) {
      this.dict.set(Q.of("Opt"), this.dict.context.obj(g));
    }, I.prototype.getExportValues = function() {
      var g = this.Opt();
      if (g) {
        if (g instanceof xI || g instanceof cI)
          return [g];
        for (var C = [], A = 0, d = g.size(); A < d; A++) {
          var Z = g.lookup(A);
          (Z instanceof xI || Z instanceof cI) && C.push(Z);
        }
        return C;
      }
    }, I.prototype.removeExportValue = function(g) {
      var C = this.Opt();
      if (C)
        if (C instanceof xI || C instanceof cI) {
          if (g !== 0)
            throw new ad(g, 0, 0);
          this.setOpt([]);
        } else {
          if (g < 0 || g > C.size())
            throw new ad(g, 0, C.size());
          C.remove(g);
        }
    }, I.prototype.normalizeExportValues = function() {
      for (var g, C, A, d, Z = (g = this.getExportValues()) !== null && g !== void 0 ? g : [], i = [], B = this.getWidgets(), F = 0, s = B.length; F < s; F++) {
        var c = B[F], G = (C = Z[F]) !== null && C !== void 0 ? C : cI.fromText((d = (A = c.getOnValue()) === null || A === void 0 ? void 0 : A.decodeText()) !== null && d !== void 0 ? d : "");
        i.push(G);
      }
      this.setOpt(i);
    }, I.prototype.addOpt = function(g, C) {
      var A;
      this.normalizeExportValues();
      var d = g.decodeText(), Z;
      if (C)
        for (var i = (A = this.getExportValues()) !== null && A !== void 0 ? A : [], B = 0, F = i.length; B < F; B++) {
          var s = i[B];
          s.decodeText() === d && (Z = B);
        }
      var c = this.Opt();
      return c.push(g), Z ?? c.size() - 1;
    }, I.prototype.addWidgetWithOpt = function(g, C, A) {
      var d = this.addOpt(C, A), Z = Q.of(String(d));
      return this.addWidget(g), Z;
    }, I;
  }(zA)
), Od = (
  /** @class */
  function(l) {
    q(I, l);
    function I() {
      return l !== null && l.apply(this, arguments) || this;
    }
    return I.prototype.setValue = function(g) {
      var C, A = (C = this.getOnValue()) !== null && C !== void 0 ? C : Q.of("Yes");
      if (g !== A && g !== Q.of("Off"))
        throw new oZ();
      this.dict.set(Q.of("V"), g);
      for (var d = this.getWidgets(), Z = 0, i = d.length; Z < i; Z++) {
        var B = d[Z], F = B.getOnValue() === g ? g : Q.of("Off");
        B.setAppearanceState(F);
      }
    }, I.prototype.getValue = function() {
      var g = this.V();
      return g instanceof Q ? g : Q.of("Off");
    }, I.prototype.getOnValue = function() {
      var g = this.getWidgets()[0];
      return g?.getOnValue();
    }, I.fromDict = function(g, C) {
      return new I(g, C);
    }, I.create = function(g) {
      var C = g.obj({
        FT: "Btn",
        Kids: []
      }), A = g.register(C);
      return new I(C, A);
    }, I;
  }(tZ)
), Bg = function(l) {
  return 1 << l;
}, VC;
(function(l) {
  l[l.ReadOnly = Bg(0)] = "ReadOnly", l[l.Required = Bg(1)] = "Required", l[l.NoExport = Bg(2)] = "NoExport";
})(VC || (VC = {}));
var AC;
(function(l) {
  l[l.NoToggleToOff = Bg(14)] = "NoToggleToOff", l[l.Radio = Bg(15)] = "Radio", l[l.PushButton = Bg(16)] = "PushButton", l[l.RadiosInUnison = Bg(25)] = "RadiosInUnison";
})(AC || (AC = {}));
var gg;
(function(l) {
  l[l.Multiline = Bg(12)] = "Multiline", l[l.Password = Bg(13)] = "Password", l[l.FileSelect = Bg(20)] = "FileSelect", l[l.DoNotSpellCheck = Bg(22)] = "DoNotSpellCheck", l[l.DoNotScroll = Bg(23)] = "DoNotScroll", l[l.Comb = Bg(24)] = "Comb", l[l.RichText = Bg(25)] = "RichText";
})(gg || (gg = {}));
var vI;
(function(l) {
  l[l.Combo = Bg(17)] = "Combo", l[l.Edit = Bg(18)] = "Edit", l[l.Sort = Bg(19)] = "Sort", l[l.MultiSelect = Bg(21)] = "MultiSelect", l[l.DoNotSpellCheck = Bg(22)] = "DoNotSpellCheck", l[l.CommitOnSelChange = Bg(26)] = "CommitOnSelChange";
})(vI || (vI = {}));
var aF = (
  /** @class */
  function(l) {
    q(I, l);
    function I() {
      return l !== null && l.apply(this, arguments) || this;
    }
    return I.prototype.setValues = function(g) {
      if (this.hasFlag(vI.Combo) && !this.hasFlag(vI.Edit) && !this.valuesAreValid(g))
        throw new oZ();
      if (g.length === 0 && this.dict.delete(Q.of("V")), g.length === 1 && this.dict.set(Q.of("V"), g[0]), g.length > 1) {
        if (!this.hasFlag(vI.MultiSelect))
          throw new rV();
        this.dict.set(Q.of("V"), this.dict.context.obj(g));
      }
      this.updateSelectedIndices(g);
    }, I.prototype.valuesAreValid = function(g) {
      for (var C = this.getOptions(), A = function(B, F) {
        var s = g[B].decodeText();
        if (!C.find(function(c) {
          return s === (c.display || c.value).decodeText();
        }))
          return { value: !1 };
      }, d = 0, Z = g.length; d < Z; d++) {
        var i = A(d);
        if (typeof i == "object")
          return i.value;
      }
      return !0;
    }, I.prototype.updateSelectedIndices = function(g) {
      if (g.length > 1) {
        for (var C = new Array(g.length), A = this.getOptions(), d = function(B, F) {
          var s = g[B].decodeText();
          C[B] = A.findIndex(function(c) {
            return s === (c.display || c.value).decodeText();
          });
        }, Z = 0, i = g.length; Z < i; Z++)
          d(Z, i);
        this.dict.set(Q.of("I"), this.dict.context.obj(C.sort()));
      } else
        this.dict.delete(Q.of("I"));
    }, I.prototype.getValues = function() {
      var g = this.V();
      if (g instanceof xI || g instanceof cI)
        return [g];
      if (g instanceof LI) {
        for (var C = [], A = 0, d = g.size(); A < d; A++) {
          var Z = g.lookup(A);
          (Z instanceof xI || Z instanceof cI) && C.push(Z);
        }
        return C;
      }
      return [];
    }, I.prototype.Opt = function() {
      return this.dict.lookupMaybe(Q.of("Opt"), xI, cI, LI);
    }, I.prototype.setOptions = function(g) {
      for (var C = new Array(g.length), A = 0, d = g.length; A < d; A++) {
        var Z = g[A], i = Z.value, B = Z.display;
        C[A] = this.dict.context.obj([i, B || i]);
      }
      this.dict.set(Q.of("Opt"), this.dict.context.obj(C));
    }, I.prototype.getOptions = function() {
      var g = this.Opt();
      if (g instanceof xI || g instanceof cI)
        return [{ value: g, display: g }];
      if (g instanceof LI) {
        for (var C = [], A = 0, d = g.size(); A < d; A++) {
          var Z = g.lookup(A);
          if ((Z instanceof xI || Z instanceof cI) && C.push({ value: Z, display: Z }), Z instanceof LI && Z.size() > 0) {
            var i = Z.lookup(0, xI, cI), B = Z.lookupMaybe(1, xI, cI);
            C.push({ value: i, display: B || i });
          }
        }
        return C;
      }
      return [];
    }, I;
  }(zA)
), fd = (
  /** @class */
  function(l) {
    q(I, l);
    function I() {
      return l !== null && l.apply(this, arguments) || this;
    }
    return I.fromDict = function(g, C) {
      return new I(g, C);
    }, I.create = function(g) {
      var C = g.obj({
        FT: "Ch",
        Ff: vI.Combo,
        Kids: []
      }), A = g.register(C);
      return new I(C, A);
    }, I;
  }(aF)
), md = (
  /** @class */
  function(l) {
    q(I, l);
    function I() {
      return l !== null && l.apply(this, arguments) || this;
    }
    return I.prototype.addField = function(g) {
      var C = this.normalizedEntries().Kids;
      C?.push(g);
    }, I.prototype.normalizedEntries = function() {
      var g = this.Kids();
      return g || (g = this.dict.context.obj([]), this.dict.set(Q.of("Kids"), g)), { Kids: g };
    }, I.fromDict = function(g, C) {
      return new I(g, C);
    }, I.create = function(g) {
      var C = g.obj({}), A = g.register(C);
      return new I(C, A);
    }, I;
  }(UF)
), NZ = (
  /** @class */
  function(l) {
    q(I, l);
    function I() {
      return l !== null && l.apply(this, arguments) || this;
    }
    return I.fromDict = function(g, C) {
      return new I(g, C);
    }, I;
  }(zA)
), Pd = (
  /** @class */
  function(l) {
    q(I, l);
    function I() {
      return l !== null && l.apply(this, arguments) || this;
    }
    return I.prototype.MaxLen = function() {
      var g = this.dict.lookup(Q.of("MaxLen"));
      if (g instanceof RI)
        return g;
    }, I.prototype.Q = function() {
      var g = this.dict.lookup(Q.of("Q"));
      if (g instanceof RI)
        return g;
    }, I.prototype.setMaxLength = function(g) {
      this.dict.set(Q.of("MaxLen"), RI.of(g));
    }, I.prototype.removeMaxLength = function() {
      this.dict.delete(Q.of("MaxLen"));
    }, I.prototype.getMaxLength = function() {
      var g;
      return (g = this.MaxLen()) === null || g === void 0 ? void 0 : g.asNumber();
    }, I.prototype.setQuadding = function(g) {
      this.dict.set(Q.of("Q"), RI.of(g));
    }, I.prototype.getQuadding = function() {
      var g;
      return (g = this.Q()) === null || g === void 0 ? void 0 : g.asNumber();
    }, I.prototype.setValue = function(g) {
      this.dict.set(Q.of("V"), g);
    }, I.prototype.removeValue = function() {
      this.dict.delete(Q.of("V"));
    }, I.prototype.getValue = function() {
      var g = this.V();
      if (g instanceof xI || g instanceof cI)
        return g;
    }, I.fromDict = function(g, C) {
      return new I(g, C);
    }, I.create = function(g) {
      var C = g.obj({
        FT: "Tx",
        Kids: []
      }), A = g.register(C);
      return new I(C, A);
    }, I;
  }(zA)
), qd = (
  /** @class */
  function(l) {
    q(I, l);
    function I() {
      return l !== null && l.apply(this, arguments) || this;
    }
    return I.fromDict = function(g, C) {
      return new I(g, C);
    }, I.create = function(g) {
      var C = g.obj({
        FT: "Btn",
        Ff: AC.PushButton,
        Kids: []
      }), A = g.register(C);
      return new I(C, A);
    }, I;
  }(tZ)
), _d = (
  /** @class */
  function(l) {
    q(I, l);
    function I() {
      return l !== null && l.apply(this, arguments) || this;
    }
    return I.prototype.setValue = function(g) {
      var C = this.getOnValues();
      if (!C.includes(g) && g !== Q.of("Off"))
        throw new oZ();
      this.dict.set(Q.of("V"), g);
      for (var A = this.getWidgets(), d = 0, Z = A.length; d < Z; d++) {
        var i = A[d], B = i.getOnValue() === g ? g : Q.of("Off");
        i.setAppearanceState(B);
      }
    }, I.prototype.getValue = function() {
      var g = this.V();
      return g instanceof Q ? g : Q.of("Off");
    }, I.prototype.getOnValues = function() {
      for (var g = this.getWidgets(), C = [], A = 0, d = g.length; A < d; A++) {
        var Z = g[A].getOnValue();
        Z && C.push(Z);
      }
      return C;
    }, I.fromDict = function(g, C) {
      return new I(g, C);
    }, I.create = function(g) {
      var C = g.obj({
        FT: "Btn",
        Ff: AC.Radio,
        Kids: []
      }), A = g.register(C);
      return new I(C, A);
    }, I;
  }(tZ)
), $d = (
  /** @class */
  function(l) {
    q(I, l);
    function I() {
      return l !== null && l.apply(this, arguments) || this;
    }
    return I.fromDict = function(g, C) {
      return new I(g, C);
    }, I.create = function(g) {
      var C = g.obj({
        FT: "Ch",
        Kids: []
      }), A = g.register(C);
      return new I(C, A);
    }, I;
  }(aF)
), wZ = function(l) {
  if (!l)
    return [];
  for (var I = [], g = 0, C = l.size(); g < C; g++) {
    var A = l.get(g), d = l.lookup(g);
    A instanceof OI && d instanceof tI && I.push([oF(d, A), A]);
  }
  return I;
}, oF = function(l, I) {
  var g = DW(l);
  return g ? md.fromDict(l, I) : uW(l, I);
}, DW = function(l) {
  var I = l.lookup(Q.of("Kids"));
  if (I instanceof LI)
    for (var g = 0, C = I.size(); g < C; g++) {
      var A = I.lookup(g), d = A instanceof tI && A.has(Q.of("T"));
      if (d)
        return !0;
    }
  return !1;
}, uW = function(l, I) {
  var g = YZ(l, Q.of("FT")), C = l.context.lookup(g, Q);
  return C === Q.of("Btn") ? MW(l, I) : C === Q.of("Ch") ? yW(l, I) : C === Q.of("Tx") ? Pd.fromDict(l, I) : C === Q.of("Sig") ? NZ.fromDict(l, I) : zA.fromDict(l, I);
}, MW = function(l, I) {
  var g, C = YZ(l, Q.of("Ff")), A = l.context.lookupMaybe(C, RI), d = (g = A?.asNumber()) !== null && g !== void 0 ? g : 0;
  return E0(d, AC.PushButton) ? qd.fromDict(l, I) : E0(d, AC.Radio) ? _d.fromDict(l, I) : Od.fromDict(l, I);
}, yW = function(l, I) {
  var g, C = YZ(l, Q.of("Ff")), A = l.context.lookupMaybe(C, RI), d = (g = A?.asNumber()) !== null && g !== void 0 ? g : 0;
  return E0(d, vI.Combo) ? fd.fromDict(l, I) : $d.fromDict(l, I);
}, E0 = function(l, I) {
  return (l & I) !== 0;
}, YZ = function(l, I) {
  var g;
  return eF(l, function(C) {
    g || (g = C.get(I));
  }), g;
}, eF = function(l, I) {
  I(l);
  var g = l.lookupMaybe(Q.of("Parent"), tI);
  g && eF(g, I);
}, hd = (
  /** @class */
  function() {
    function l(I) {
      this.dict = I;
    }
    return l.prototype.Fields = function() {
      var I = this.dict.lookup(Q.of("Fields"));
      if (I instanceof LI)
        return I;
    }, l.prototype.getFields = function() {
      for (var I = this.normalizedEntries().Fields, g = new Array(I.size()), C = 0, A = I.size(); C < A; C++) {
        var d = I.get(C), Z = I.lookup(C, tI);
        g[C] = [oF(Z, d), d];
      }
      return g;
    }, l.prototype.getAllFields = function() {
      var I = [], g = function(C) {
        if (C)
          for (var A = 0, d = C.length; A < d; A++) {
            var Z = C[A];
            I.push(Z);
            var i = Z[0];
            i instanceof md && g(wZ(i.Kids()));
          }
      };
      return g(this.getFields()), I;
    }, l.prototype.addField = function(I) {
      var g = this.normalizedEntries().Fields;
      g?.push(I);
    }, l.prototype.removeField = function(I) {
      var g = I.getParent(), C = g === void 0 ? this.normalizedEntries().Fields : g.Kids(), A = C?.indexOf(I.ref);
      if (C === void 0 || A === void 0)
        throw new Error("Tried to remove inexistent field " + I.getFullyQualifiedName());
      C.remove(A), g !== void 0 && C.size() === 0 && this.removeField(g);
    }, l.prototype.normalizedEntries = function() {
      var I = this.Fields();
      return I || (I = this.dict.context.obj([]), this.dict.set(Q.of("Fields"), I)), { Fields: I };
    }, l.fromDict = function(I) {
      return new l(I);
    }, l.create = function(I) {
      var g = I.obj({ Fields: [] });
      return new l(g);
    }, l;
  }()
), mF = (
  /** @class */
  function(l) {
    q(I, l);
    function I() {
      return l !== null && l.apply(this, arguments) || this;
    }
    return I.prototype.Pages = function() {
      return this.lookup(Q.of("Pages"), tI);
    }, I.prototype.AcroForm = function() {
      return this.lookupMaybe(Q.of("AcroForm"), tI);
    }, I.prototype.getAcroForm = function() {
      var g = this.AcroForm();
      if (g)
        return hd.fromDict(g);
    }, I.prototype.getOrCreateAcroForm = function() {
      var g = this.getAcroForm();
      if (!g) {
        g = hd.create(this.context);
        var C = this.context.register(g.dict);
        this.set(Q.of("AcroForm"), C);
      }
      return g;
    }, I.prototype.ViewerPreferences = function() {
      return this.lookupMaybe(Q.of("ViewerPreferences"), tI);
    }, I.prototype.getViewerPreferences = function() {
      var g = this.ViewerPreferences();
      if (g)
        return qi.fromDict(g);
    }, I.prototype.getOrCreateViewerPreferences = function() {
      var g = this.getViewerPreferences();
      if (!g) {
        g = qi.create(this.context);
        var C = this.context.register(g.dict);
        this.set(Q.of("ViewerPreferences"), C);
      }
      return g;
    }, I.prototype.insertLeafNode = function(g, C) {
      var A = this.get(Q.of("Pages")), d = this.Pages().insertLeafNode(g, C);
      return d || A;
    }, I.prototype.removeLeafNode = function(g) {
      this.Pages().removeLeafNode(g);
    }, I.withContextAndPages = function(g, C) {
      var A = /* @__PURE__ */ new Map();
      return A.set(Q.of("Type"), Q.of("Catalog")), A.set(Q.of("Pages"), C), new I(A, g);
    }, I.fromMapWithContext = function(g, C) {
      return new I(g, C);
    }, I;
  }(tI)
), hF = (
  /** @class */
  function(l) {
    q(I, l);
    function I() {
      return l !== null && l.apply(this, arguments) || this;
    }
    return I.prototype.Parent = function() {
      return this.lookup(Q.of("Parent"));
    }, I.prototype.Kids = function() {
      return this.lookup(Q.of("Kids"), LI);
    }, I.prototype.Count = function() {
      return this.lookup(Q.of("Count"), RI);
    }, I.prototype.pushTreeNode = function(g) {
      var C = this.Kids();
      C.push(g);
    }, I.prototype.pushLeafNode = function(g) {
      var C = this.Kids();
      this.insertLeafKid(C.size(), g);
    }, I.prototype.insertLeafNode = function(g, C) {
      var A = this.Kids(), d = this.Count().asNumber();
      if (C > d)
        throw new ki(C, d);
      for (var Z = C, i = 0, B = A.size(); i < B; i++) {
        if (Z === 0) {
          this.insertLeafKid(i, g);
          return;
        }
        var F = A.get(i), s = this.context.lookup(F);
        if (s instanceof I) {
          if (s.Count().asNumber() > Z)
            return s.insertLeafNode(g, Z) || F;
          Z -= s.Count().asNumber();
        }
        s instanceof uC && (Z -= 1);
      }
      if (Z === 0) {
        this.insertLeafKid(A.size(), g);
        return;
      }
      throw new Ki(C, "insertLeafNode");
    }, I.prototype.removeLeafNode = function(g, C) {
      C === void 0 && (C = !0);
      var A = this.Kids(), d = this.Count().asNumber();
      if (g >= d)
        throw new ki(g, d);
      for (var Z = g, i = 0, B = A.size(); i < B; i++) {
        var F = A.get(i), s = this.context.lookup(F);
        if (s instanceof I)
          if (s.Count().asNumber() > Z) {
            s.removeLeafNode(Z, C), C && s.Kids().size() === 0 && A.remove(i);
            return;
          } else
            Z -= s.Count().asNumber();
        if (s instanceof uC)
          if (Z === 0) {
            this.removeKid(i);
            return;
          } else
            Z -= 1;
      }
      throw new Ki(g, "removeLeafNode");
    }, I.prototype.ascend = function(g) {
      g(this);
      var C = this.Parent();
      C && C.ascend(g);
    }, I.prototype.traverse = function(g) {
      for (var C = this.Kids(), A = 0, d = C.size(); A < d; A++) {
        var Z = C.get(A), i = this.context.lookup(Z);
        i instanceof I && i.traverse(g), g(i, Z);
      }
    }, I.prototype.insertLeafKid = function(g, C) {
      var A = this.Kids();
      this.ascend(function(d) {
        var Z = d.Count().asNumber() + 1;
        d.set(Q.of("Count"), RI.of(Z));
      }), A.insert(g, C);
    }, I.prototype.removeKid = function(g) {
      var C = this.Kids(), A = C.lookup(g);
      A instanceof uC && this.ascend(function(d) {
        var Z = d.Count().asNumber() - 1;
        d.set(Q.of("Count"), RI.of(Z));
      }), C.remove(g);
    }, I.withContext = function(g, C) {
      var A = /* @__PURE__ */ new Map();
      return A.set(Q.of("Type"), Q.of("Pages")), A.set(Q.of("Kids"), g.obj([])), A.set(Q.of("Count"), g.obj(0)), C && A.set(Q.of("Parent"), C), new I(A, g);
    }, I.fromMapWithContext = function(g, C) {
      return new I(g, C);
    }, I;
  }(tI)
), Sg = new Uint8Array(256);
Sg[t.Zero] = 1;
Sg[t.One] = 1;
Sg[t.Two] = 1;
Sg[t.Three] = 1;
Sg[t.Four] = 1;
Sg[t.Five] = 1;
Sg[t.Six] = 1;
Sg[t.Seven] = 1;
Sg[t.Eight] = 1;
Sg[t.Nine] = 1;
var I0 = new Uint8Array(256);
I0[t.Period] = 1;
I0[t.Plus] = 1;
I0[t.Minus] = 1;
var SZ = new Uint8Array(256);
for (var $A = 0, XW = 256; $A < XW; $A++)
  SZ[$A] = Sg[$A] || I0[$A] ? 1 : 0;
var _i = t.Newline, $i = t.CarriageReturn, HW = (
  /** @class */
  function() {
    function l(I, g) {
      g === void 0 && (g = !1), this.bytes = I, this.capNumbers = g;
    }
    return l.prototype.parseRawInt = function() {
      for (var I = ""; !this.bytes.done(); ) {
        var g = this.bytes.peek();
        if (!Sg[g])
          break;
        I += JC(this.bytes.next());
      }
      var C = Number(I);
      if (!I || !isFinite(C))
        throw new ri(this.bytes.position(), I);
      return C;
    }, l.prototype.parseRawNumber = function() {
      for (var I = ""; !this.bytes.done(); ) {
        var g = this.bytes.peek();
        if (!SZ[g] || (I += JC(this.bytes.next()), g === t.Period))
          break;
      }
      for (; !this.bytes.done(); ) {
        var g = this.bytes.peek();
        if (!Sg[g])
          break;
        I += JC(this.bytes.next());
      }
      var C = Number(I);
      if (!I || !isFinite(C))
        throw new ri(this.bytes.position(), I);
      if (C > Number.MAX_SAFE_INTEGER)
        if (this.capNumbers) {
          var A = "Parsed number that is too large for some PDF readers: " + I + ", using Number.MAX_SAFE_INTEGER instead.";
          return console.warn(A), Number.MAX_SAFE_INTEGER;
        } else {
          var A = "Parsed number that is too large for some PDF readers: " + I + ", not capping.";
          console.warn(A);
        }
      return C;
    }, l.prototype.skipWhitespace = function() {
      for (; !this.bytes.done() && yC[this.bytes.peek()]; )
        this.bytes.next();
    }, l.prototype.skipLine = function() {
      for (; !this.bytes.done(); ) {
        var I = this.bytes.peek();
        if (I === _i || I === $i)
          return;
        this.bytes.next();
      }
    }, l.prototype.skipComment = function() {
      if (this.bytes.peek() !== t.Percent)
        return !1;
      for (; !this.bytes.done(); ) {
        var I = this.bytes.peek();
        if (I === _i || I === $i)
          return !0;
        this.bytes.next();
      }
      return !0;
    }, l.prototype.skipWhitespaceAndComments = function() {
      for (this.skipWhitespace(); this.skipComment(); )
        this.skipWhitespace();
    }, l.prototype.matchKeyword = function(I) {
      for (var g = this.bytes.offset(), C = 0, A = I.length; C < A; C++)
        if (this.bytes.done() || this.bytes.next() !== I[C])
          return this.bytes.moveTo(g), !1;
      return !0;
    }, l;
  }()
), g0 = (
  /** @class */
  function() {
    function l(I) {
      this.idx = 0, this.line = 0, this.column = 0, this.bytes = I, this.length = this.bytes.length;
    }
    return l.prototype.moveTo = function(I) {
      this.idx = I;
    }, l.prototype.next = function() {
      var I = this.bytes[this.idx++];
      return I === t.Newline ? (this.line += 1, this.column = 0) : this.column += 1, I;
    }, l.prototype.assertNext = function(I) {
      if (this.peek() !== I)
        throw new LV(this.position(), I, this.peek());
      return this.next();
    }, l.prototype.peek = function() {
      return this.bytes[this.idx];
    }, l.prototype.peekAhead = function(I) {
      return this.bytes[this.idx + I];
    }, l.prototype.peekAt = function(I) {
      return this.bytes[I];
    }, l.prototype.done = function() {
      return this.idx >= this.length;
    }, l.prototype.offset = function() {
      return this.idx;
    }, l.prototype.slice = function(I, g) {
      return this.bytes.slice(I, g);
    }, l.prototype.position = function() {
      return { line: this.line, column: this.column, offset: this.idx };
    }, l.of = function(I) {
      return new l(I);
    }, l.fromPDFRawStream = function(I) {
      return l.of(RF(I).decode());
    }, l;
  }()
), pW = t.Space, Il = t.CarriageReturn, gl = t.Newline, Cl = [
  t.s,
  t.t,
  t.r,
  t.e,
  t.a,
  t.m
], Id = [
  t.e,
  t.n,
  t.d,
  t.s,
  t.t,
  t.r,
  t.e,
  t.a,
  t.m
], qI = {
  header: [
    t.Percent,
    t.P,
    t.D,
    t.F,
    t.Dash
  ],
  eof: [
    t.Percent,
    t.Percent,
    t.E,
    t.O,
    t.F
  ],
  obj: [t.o, t.b, t.j],
  endobj: [
    t.e,
    t.n,
    t.d,
    t.o,
    t.b,
    t.j
  ],
  xref: [t.x, t.r, t.e, t.f],
  trailer: [
    t.t,
    t.r,
    t.a,
    t.i,
    t.l,
    t.e,
    t.r
  ],
  startxref: [
    t.s,
    t.t,
    t.a,
    t.r,
    t.t,
    t.x,
    t.r,
    t.e,
    t.f
  ],
  true: [t.t, t.r, t.u, t.e],
  false: [t.f, t.a, t.l, t.s, t.e],
  null: [t.n, t.u, t.l, t.l],
  stream: Cl,
  streamEOF1: kI(Cl, [pW, Il, gl]),
  streamEOF2: kI(Cl, [Il, gl]),
  streamEOF3: kI(Cl, [Il]),
  streamEOF4: kI(Cl, [gl]),
  endstream: Id,
  EOF1endstream: kI([Il, gl], Id),
  EOF2endstream: kI([Il], Id),
  EOF3endstream: kI([gl], Id)
}, QF = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C, A) {
      A === void 0 && (A = !1);
      var d = l.call(this, g, A) || this;
      return d.context = C, d;
    }
    return I.prototype.parseObject = function() {
      if (this.skipWhitespaceAndComments(), this.matchKeyword(qI.true))
        return wl.True;
      if (this.matchKeyword(qI.false))
        return wl.False;
      if (this.matchKeyword(qI.null))
        return rg;
      var g = this.bytes.peek();
      if (g === t.LessThan && this.bytes.peekAhead(1) === t.LessThan)
        return this.parseDictOrStream();
      if (g === t.LessThan)
        return this.parseHexString();
      if (g === t.LeftParen)
        return this.parseString();
      if (g === t.ForwardSlash)
        return this.parseName();
      if (g === t.LeftSquareBracket)
        return this.parseArray();
      if (SZ[g])
        return this.parseNumberOrRef();
      throw new EV(this.bytes.position(), g);
    }, I.prototype.parseNumberOrRef = function() {
      var g = this.parseRawNumber();
      this.skipWhitespaceAndComments();
      var C = this.bytes.offset();
      if (Sg[this.bytes.peek()]) {
        var A = this.parseRawNumber();
        if (this.skipWhitespaceAndComments(), this.bytes.peek() === t.R)
          return this.bytes.assertNext(t.R), OI.of(g, A);
      }
      return this.bytes.moveTo(C), RI.of(g);
    }, I.prototype.parseHexString = function() {
      var g = "";
      for (this.bytes.assertNext(t.LessThan); !this.bytes.done() && this.bytes.peek() !== t.GreaterThan; )
        g += JC(this.bytes.next());
      return this.bytes.assertNext(t.GreaterThan), cI.of(g);
    }, I.prototype.parseString = function() {
      for (var g = 0, C = !1, A = ""; !this.bytes.done(); ) {
        var d = this.bytes.next();
        if (A += JC(d), C || (d === t.LeftParen && (g += 1), d === t.RightParen && (g -= 1)), d === t.BackSlash ? C = !C : C && (C = !1), g === 0)
          return xI.of(A.substring(1, A.length - 1));
      }
      throw new xV(this.bytes.position());
    }, I.prototype.parseName = function() {
      this.bytes.assertNext(t.ForwardSlash);
      for (var g = ""; !this.bytes.done(); ) {
        var C = this.bytes.peek();
        if (yC[C] || FC[C])
          break;
        g += JC(C), this.bytes.next();
      }
      return Q.of(g);
    }, I.prototype.parseArray = function() {
      this.bytes.assertNext(t.LeftSquareBracket), this.skipWhitespaceAndComments();
      for (var g = LI.withContext(this.context); this.bytes.peek() !== t.RightSquareBracket; ) {
        var C = this.parseObject();
        g.push(C), this.skipWhitespaceAndComments();
      }
      return this.bytes.assertNext(t.RightSquareBracket), g;
    }, I.prototype.parseDict = function() {
      this.bytes.assertNext(t.LessThan), this.bytes.assertNext(t.LessThan), this.skipWhitespaceAndComments();
      for (var g = /* @__PURE__ */ new Map(); !this.bytes.done() && this.bytes.peek() !== t.GreaterThan && this.bytes.peekAhead(1) !== t.GreaterThan; ) {
        var C = this.parseName(), A = this.parseObject();
        g.set(C, A), this.skipWhitespaceAndComments();
      }
      this.skipWhitespaceAndComments(), this.bytes.assertNext(t.GreaterThan), this.bytes.assertNext(t.GreaterThan);
      var d = g.get(Q.of("Type"));
      return d === Q.of("Catalog") ? mF.fromMapWithContext(g, this.context) : d === Q.of("Pages") ? hF.fromMapWithContext(g, this.context) : d === Q.of("Page") ? uC.fromMapWithContext(g, this.context) : tI.fromMapWithContext(g, this.context);
    }, I.prototype.parseDictOrStream = function() {
      var g = this.bytes.position(), C = this.parseDict();
      if (this.skipWhitespaceAndComments(), !this.matchKeyword(qI.streamEOF1) && !this.matchKeyword(qI.streamEOF2) && !this.matchKeyword(qI.streamEOF3) && !this.matchKeyword(qI.streamEOF4) && !this.matchKeyword(qI.stream))
        return C;
      var A = this.bytes.offset(), d, Z = C.get(Q.of("Length"));
      Z instanceof RI ? (d = A + Z.asNumber(), this.bytes.moveTo(d), this.skipWhitespaceAndComments(), this.matchKeyword(qI.endstream) || (this.bytes.moveTo(A), d = this.findEndOfStreamFallback(g))) : d = this.findEndOfStreamFallback(g);
      var i = this.bytes.slice(A, d);
      return Yl.of(C, i);
    }, I.prototype.findEndOfStreamFallback = function(g) {
      for (var C = 1, A = this.bytes.offset(); !this.bytes.done() && (A = this.bytes.offset(), this.matchKeyword(qI.stream) ? C += 1 : this.matchKeyword(qI.EOF1endstream) || this.matchKeyword(qI.EOF2endstream) || this.matchKeyword(qI.EOF3endstream) || this.matchKeyword(qI.endstream) ? C -= 1 : this.bytes.next(), C !== 0); )
        ;
      if (C !== 0)
        throw new vV(g);
      return A;
    }, I.forBytes = function(g, C, A) {
      return new I(g0.of(g), C, A);
    }, I.forByteStream = function(g, C, A) {
      return A === void 0 && (A = !1), new I(g, C, A);
    }, I;
  }(HW)
), kW = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C) {
      var A = l.call(this, g0.fromPDFRawStream(g), g.dict.context) || this, d = g.dict;
      return A.alreadyParsed = !1, A.shouldWaitForTick = C || function() {
        return !1;
      }, A.firstOffset = d.lookup(Q.of("First"), RI).asNumber(), A.objectCount = d.lookup(Q.of("N"), RI).asNumber(), A;
    }
    return I.prototype.parseIntoContext = function() {
      return NI(this, void 0, void 0, function() {
        var g, C, A, d, Z, i, B, F;
        return wI(this, function(s) {
          switch (s.label) {
            case 0:
              if (this.alreadyParsed)
                throw new aZ("PDFObjectStreamParser", "parseIntoContext");
              this.alreadyParsed = !0, g = this.parseOffsetsAndObjectNumbers(), C = 0, A = g.length, s.label = 1;
            case 1:
              return C < A ? (d = g[C], Z = d.objectNumber, i = d.offset, this.bytes.moveTo(this.firstOffset + i), B = this.parseObject(), F = OI.of(Z, 0), this.context.assign(F, B), this.shouldWaitForTick() ? [4, KA()] : [3, 3]) : [3, 4];
            case 2:
              s.sent(), s.label = 3;
            case 3:
              return C++, [3, 1];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, I.prototype.parseOffsetsAndObjectNumbers = function() {
      for (var g = [], C = 0, A = this.objectCount; C < A; C++) {
        this.skipWhitespaceAndComments();
        var d = this.parseRawInt();
        this.skipWhitespaceAndComments();
        var Z = this.parseRawInt();
        g.push({ objectNumber: d, offset: Z });
      }
      return g;
    }, I.forStream = function(g, C) {
      return new I(g, C);
    }, I;
  }(QF)
), KW = (
  /** @class */
  function() {
    function l(I) {
      this.alreadyParsed = !1, this.dict = I.dict, this.bytes = g0.fromPDFRawStream(I), this.context = this.dict.context;
      var g = this.dict.lookup(Q.of("Size"), RI), C = this.dict.lookup(Q.of("Index"));
      if (C instanceof LI) {
        this.subsections = [];
        for (var A = 0, d = C.size(); A < d; A += 2) {
          var Z = C.lookup(A + 0, RI).asNumber(), i = C.lookup(A + 1, RI).asNumber();
          this.subsections.push({ firstObjectNumber: Z, length: i });
        }
      } else
        this.subsections = [{ firstObjectNumber: 0, length: g.asNumber() }];
      var B = this.dict.lookup(Q.of("W"), LI);
      this.byteWidths = [-1, -1, -1];
      for (var A = 0, d = B.size(); A < d; A++)
        this.byteWidths[A] = B.lookup(A, RI).asNumber();
    }
    return l.prototype.parseIntoContext = function() {
      if (this.alreadyParsed)
        throw new aZ("PDFXRefStreamParser", "parseIntoContext");
      this.alreadyParsed = !0, this.context.trailerInfo = {
        Root: this.dict.get(Q.of("Root")),
        Encrypt: this.dict.get(Q.of("Encrypt")),
        Info: this.dict.get(Q.of("Info")),
        ID: this.dict.get(Q.of("ID"))
      };
      var I = this.parseEntries();
      return I;
    }, l.prototype.parseEntries = function() {
      for (var I = [], g = this.byteWidths, C = g[0], A = g[1], d = g[2], Z = 0, i = this.subsections.length; Z < i; Z++)
        for (var B = this.subsections[Z], F = B.firstObjectNumber, s = B.length, c = 0; c < s; c++) {
          for (var G = 0, V = 0, W = C; V < W; V++)
            G = G << 8 | this.bytes.next();
          for (var R = 0, V = 0, W = A; V < W; V++)
            R = R << 8 | this.bytes.next();
          for (var U = 0, V = 0, W = d; V < W; V++)
            U = U << 8 | this.bytes.next();
          C === 0 && (G = 1);
          var n = F + c, m = {
            ref: OI.of(n, U),
            offset: R,
            deleted: G === 0,
            inObjectStream: G === 2
          };
          I.push(m);
        }
      return I;
    }, l.forStream = function(I) {
      return new l(I);
    }, l;
  }()
), rW = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C, A, d) {
      C === void 0 && (C = 1 / 0), A === void 0 && (A = !1), d === void 0 && (d = !1);
      var Z = l.call(this, g0.of(g), z0.create(), d) || this;
      return Z.alreadyParsed = !1, Z.parsedObjects = 0, Z.shouldWaitForTick = function() {
        return Z.parsedObjects += 1, Z.parsedObjects % Z.objectsPerTick === 0;
      }, Z.objectsPerTick = C, Z.throwOnInvalidObject = A, Z;
    }
    return I.prototype.parseDocument = function() {
      return NI(this, void 0, void 0, function() {
        var g, C;
        return wI(this, function(A) {
          switch (A.label) {
            case 0:
              if (this.alreadyParsed)
                throw new aZ("PDFParser", "parseDocument");
              this.alreadyParsed = !0, this.context.header = this.parseHeader(), A.label = 1;
            case 1:
              return this.bytes.done() ? [3, 3] : [4, this.parseDocumentSection()];
            case 2:
              if (A.sent(), C = this.bytes.offset(), C === g)
                throw new OV(this.bytes.position());
              return g = C, [3, 1];
            case 3:
              return this.maybeRecoverRoot(), this.context.lookup(OI.of(0)) && (console.warn("Removing parsed object: 0 0 R"), this.context.delete(OI.of(0))), [2, this.context];
          }
        });
      });
    }, I.prototype.maybeRecoverRoot = function() {
      var g = function(s) {
        return s instanceof tI && s.lookup(Q.of("Type")) === Q.of("Catalog");
      }, C = this.context.lookup(this.context.trailerInfo.Root);
      if (!g(C))
        for (var A = this.context.enumerateIndirectObjects(), d = 0, Z = A.length; d < Z; d++) {
          var i = A[d], B = i[0], F = i[1];
          g(F) && (this.context.trailerInfo.Root = B);
        }
    }, I.prototype.parseHeader = function() {
      for (; !this.bytes.done(); ) {
        if (this.matchKeyword(qI.header)) {
          var g = this.parseRawInt();
          this.bytes.assertNext(t.Period);
          var C = this.parseRawInt(), A = xd.forVersion(g, C);
          return this.skipBinaryHeaderComment(), A;
        }
        this.bytes.next();
      }
      throw new fV(this.bytes.position());
    }, I.prototype.parseIndirectObjectHeader = function() {
      this.skipWhitespaceAndComments();
      var g = this.parseRawInt();
      this.skipWhitespaceAndComments();
      var C = this.parseRawInt();
      if (this.skipWhitespaceAndComments(), !this.matchKeyword(qI.obj))
        throw new PV(this.bytes.position(), qI.obj);
      return OI.of(g, C);
    }, I.prototype.matchIndirectObjectHeader = function() {
      var g = this.bytes.offset();
      try {
        return this.parseIndirectObjectHeader(), !0;
      } catch {
        return this.bytes.moveTo(g), !1;
      }
    }, I.prototype.parseIndirectObject = function() {
      return NI(this, void 0, void 0, function() {
        var g, C;
        return wI(this, function(A) {
          switch (A.label) {
            case 0:
              return g = this.parseIndirectObjectHeader(), this.skipWhitespaceAndComments(), C = this.parseObject(), this.skipWhitespaceAndComments(), this.matchKeyword(qI.endobj), C instanceof Yl && C.dict.lookup(Q.of("Type")) === Q.of("ObjStm") ? [4, kW.forStream(C, this.shouldWaitForTick).parseIntoContext()] : [3, 2];
            case 1:
              return A.sent(), [3, 3];
            case 2:
              C instanceof Yl && C.dict.lookup(Q.of("Type")) === Q.of("XRef") ? KW.forStream(C).parseIntoContext() : this.context.assign(g, C), A.label = 3;
            case 3:
              return [2, g];
          }
        });
      });
    }, I.prototype.tryToParseInvalidIndirectObject = function() {
      var g = this.bytes.position(), C = "Trying to parse invalid object: " + JSON.stringify(g) + ")";
      if (this.throwOnInvalidObject)
        throw new Error(C);
      console.warn(C);
      var A = this.parseIndirectObjectHeader();
      console.warn("Invalid object ref: " + A), this.skipWhitespaceAndComments();
      for (var d = this.bytes.offset(), Z = !0; !this.bytes.done() && (this.matchKeyword(qI.endobj) && (Z = !1), !!Z); )
        this.bytes.next();
      if (Z)
        throw new jV(g);
      var i = this.bytes.offset() - qI.endobj.length, B = GF.of(this.bytes.slice(d, i));
      return this.context.assign(A, B), A;
    }, I.prototype.parseIndirectObjects = function() {
      return NI(this, void 0, void 0, function() {
        var g;
        return wI(this, function(C) {
          switch (C.label) {
            case 0:
              this.skipWhitespaceAndComments(), C.label = 1;
            case 1:
              if (!(!this.bytes.done() && Sg[this.bytes.peek()])) return [3, 8];
              g = this.bytes.offset(), C.label = 2;
            case 2:
              return C.trys.push([2, 4, , 5]), [4, this.parseIndirectObject()];
            case 3:
              return C.sent(), [3, 5];
            case 4:
              return C.sent(), this.bytes.moveTo(g), this.tryToParseInvalidIndirectObject(), [3, 5];
            case 5:
              return this.skipWhitespaceAndComments(), this.skipJibberish(), this.shouldWaitForTick() ? [4, KA()] : [3, 7];
            case 6:
              C.sent(), C.label = 7;
            case 7:
              return [3, 1];
            case 8:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, I.prototype.maybeParseCrossRefSection = function() {
      if (this.skipWhitespaceAndComments(), !!this.matchKeyword(qI.xref)) {
        this.skipWhitespaceAndComments();
        for (var g = -1, C = FF.createEmpty(); !this.bytes.done() && Sg[this.bytes.peek()]; ) {
          var A = this.parseRawInt();
          this.skipWhitespaceAndComments();
          var d = this.parseRawInt();
          this.skipWhitespaceAndComments();
          var Z = this.bytes.peek();
          if (Z === t.n || Z === t.f) {
            var i = OI.of(g, d);
            this.bytes.next() === t.n ? C.addEntry(i, A) : C.addDeletedEntry(i, A), g += 1;
          } else
            g = A;
          this.skipWhitespaceAndComments();
        }
        return C;
      }
    }, I.prototype.maybeParseTrailerDict = function() {
      if (this.skipWhitespaceAndComments(), !!this.matchKeyword(qI.trailer)) {
        this.skipWhitespaceAndComments();
        var g = this.parseDict(), C = this.context;
        C.trailerInfo = {
          Root: g.get(Q.of("Root")) || C.trailerInfo.Root,
          Encrypt: g.get(Q.of("Encrypt")) || C.trailerInfo.Encrypt,
          Info: g.get(Q.of("Info")) || C.trailerInfo.Info,
          ID: g.get(Q.of("ID")) || C.trailerInfo.ID
        };
      }
    }, I.prototype.maybeParseTrailer = function() {
      if (this.skipWhitespaceAndComments(), !!this.matchKeyword(qI.startxref)) {
        this.skipWhitespaceAndComments();
        var g = this.parseRawInt();
        return this.skipWhitespace(), this.matchKeyword(qI.eof), this.skipWhitespaceAndComments(), this.matchKeyword(qI.eof), this.skipWhitespaceAndComments(), hZ.forLastCrossRefSectionOffset(g);
      }
    }, I.prototype.parseDocumentSection = function() {
      return NI(this, void 0, void 0, function() {
        return wI(this, function(g) {
          switch (g.label) {
            case 0:
              return [4, this.parseIndirectObjects()];
            case 1:
              return g.sent(), this.maybeParseCrossRefSection(), this.maybeParseTrailerDict(), this.maybeParseTrailer(), this.skipJibberish(), [
                2
                /*return*/
              ];
          }
        });
      });
    }, I.prototype.skipJibberish = function() {
      for (this.skipWhitespaceAndComments(); !this.bytes.done(); ) {
        var g = this.bytes.offset(), C = this.bytes.peek(), A = C >= t.Space && C <= t.Tilde;
        if (A && (this.matchKeyword(qI.xref) || this.matchKeyword(qI.trailer) || this.matchKeyword(qI.startxref) || this.matchIndirectObjectHeader())) {
          this.bytes.moveTo(g);
          break;
        }
        this.bytes.next();
      }
    }, I.prototype.skipBinaryHeaderComment = function() {
      this.skipWhitespaceAndComments();
      try {
        var g = this.bytes.offset();
        this.parseIndirectObjectHeader(), this.bytes.moveTo(g);
      } catch {
        this.bytes.next(), this.skipWhitespaceAndComments();
      }
    }, I.forBytesWithOptions = function(g, C, A, d) {
      return new I(g, C, A, d);
    }, I;
  }(QF)
), eC = function(l) {
  return 1 << l;
}, ol;
(function(l) {
  l[l.Invisible = eC(0)] = "Invisible", l[l.Hidden = eC(1)] = "Hidden", l[l.Print = eC(2)] = "Print", l[l.NoZoom = eC(3)] = "NoZoom", l[l.NoRotate = eC(4)] = "NoRotate", l[l.NoView = eC(5)] = "NoView", l[l.ReadOnly = eC(6)] = "ReadOnly", l[l.Locked = eC(7)] = "Locked", l[l.ToggleNoView = eC(8)] = "ToggleNoView", l[l.LockedContents = eC(9)] = "LockedContents";
})(ol || (ol = {}));
var C0 = function(l) {
  return l instanceof Q ? l : Q.of(l);
}, nI = function(l) {
  return l instanceof RI ? l : RI.of(l);
}, YI = function(l) {
  return l instanceof RI ? l.asNumber() : l;
}, Sl;
(function(l) {
  l.Degrees = "degrees", l.Radians = "radians";
})(Sl || (Sl = {}));
var FI = function(l) {
  return u(l, "degreeAngle", ["number"]), { type: Sl.Degrees, angle: l };
}, tF = Sl.Radians, NF = Sl.Degrees, wF = function(l) {
  return l * Math.PI / 180;
}, zW = function(l) {
  return l * 180 / Math.PI;
}, hg = function(l) {
  return l.type === tF ? l.angle : l.type === NF ? wF(l.angle) : pl("Invalid rotation: " + JSON.stringify(l));
}, YF = function(l) {
  return l.type === tF ? zW(l.angle) : l.type === NF ? l.angle : pl("Invalid rotation: " + JSON.stringify(l));
}, XC = function(l) {
  l === void 0 && (l = 0);
  var I = l / 90 % 4;
  return I === 0 ? 0 : I === 1 ? 90 : I === 2 ? 180 : I === 3 ? 270 : 0;
}, WA = function(l, I) {
  I === void 0 && (I = 0);
  var g = XC(I);
  return g === 90 || g === 270 ? { width: l.height, height: l.width } : { width: l.width, height: l.height };
}, TW = function(l, I, g) {
  I === void 0 && (I = 0), g === void 0 && (g = 0);
  var C = l.x, A = l.y, d = l.width, Z = l.height, i = XC(g), B = I / 2;
  return i === 0 ? { x: C - B, y: A - B, width: d, height: Z } : i === 90 ? { x: C - Z + B, y: A - B, width: Z, height: d } : i === 180 ? { x: C - d + B, y: A - Z + B, width: d, height: Z } : i === 270 ? { x: C - B, y: A - d + B, width: Z, height: d } : { x: C - B, y: A - B, width: d, height: Z };
}, SF = function() {
  return HI.of(KI.ClipNonZero);
}, Qd = Math.cos, td = Math.sin, Nd = Math.tan, A0 = function(l, I, g, C, A, d) {
  return HI.of(KI.ConcatTransformationMatrix, [
    nI(l),
    nI(I),
    nI(g),
    nI(C),
    nI(A),
    nI(d)
  ]);
}, ZC = function(l, I) {
  return A0(1, 0, 0, 1, l, I);
}, Jl = function(l, I) {
  return A0(l, 0, 0, I, 0, 0);
}, TA = function(l) {
  return A0(Qd(YI(l)), td(YI(l)), -td(YI(l)), Qd(YI(l)), 0, 0);
}, gd = function(l) {
  return TA(wF(YI(l)));
}, JZ = function(l, I) {
  return A0(1, Nd(YI(l)), Nd(YI(I)), 1, 0, 0);
}, l0 = function(l, I) {
  return HI.of(KI.SetLineDashPattern, [
    "[" + l.map(nI).join(" ") + "]",
    nI(I)
  ]);
}, MA;
(function(l) {
  l[l.Butt = 0] = "Butt", l[l.Round = 1] = "Round", l[l.Projecting = 2] = "Projecting";
})(MA || (MA = {}));
var d0 = function(l) {
  return HI.of(KI.SetLineCapStyle, [nI(l)]);
}, IB;
(function(l) {
  l[l.Miter = 0] = "Miter", l[l.Round = 1] = "Round", l[l.Bevel = 2] = "Bevel";
})(IB || (IB = {}));
var bA = function(l) {
  return HI.of(KI.SetGraphicsStateParams, [C0(l)]);
}, bg = function() {
  return HI.of(KI.PushGraphicsState);
}, Rg = function() {
  return HI.of(KI.PopGraphicsState);
}, Kl = function(l) {
  return HI.of(KI.SetLineWidth, [nI(l)]);
}, jg = function(l, I, g, C, A, d) {
  return HI.of(KI.AppendBezierCurve, [
    nI(l),
    nI(I),
    nI(g),
    nI(C),
    nI(A),
    nI(d)
  ]);
}, Cd = function(l, I, g, C) {
  return HI.of(KI.CurveToReplicateInitialPoint, [
    nI(l),
    nI(I),
    nI(g),
    nI(C)
  ]);
}, fC = function() {
  return HI.of(KI.ClosePath);
}, hC = function(l, I) {
  return HI.of(KI.MoveTo, [nI(l), nI(I)]);
}, og = function(l, I) {
  return HI.of(KI.LineTo, [nI(l), nI(I)]);
}, rl = function() {
  return HI.of(KI.StrokePath);
}, DZ = function() {
  return HI.of(KI.FillNonZero);
}, uZ = function() {
  return HI.of(KI.FillNonZeroAndStroke);
}, JF = function() {
  return HI.of(KI.EndPath);
}, LW = function() {
  return HI.of(KI.NextLine);
}, DF = function(l) {
  return HI.of(KI.ShowText, [l]);
}, uF = function() {
  return HI.of(KI.BeginText);
}, MF = function() {
  return HI.of(KI.EndText);
}, MZ = function(l, I) {
  return HI.of(KI.SetFontAndSize, [C0(l), nI(I)]);
}, EW = function(l) {
  return HI.of(KI.SetTextLineHeight, [nI(l)]);
}, gB;
(function(l) {
  l[l.Fill = 0] = "Fill", l[l.Outline = 1] = "Outline", l[l.FillAndOutline = 2] = "FillAndOutline", l[l.Invisible = 3] = "Invisible", l[l.FillAndClip = 4] = "FillAndClip", l[l.OutlineAndClip = 5] = "OutlineAndClip", l[l.FillAndOutlineAndClip = 6] = "FillAndOutlineAndClip", l[l.Clip = 7] = "Clip";
})(gB || (gB = {}));
var jW = function(l, I, g, C, A, d) {
  return HI.of(KI.SetTextMatrix, [
    nI(l),
    nI(I),
    nI(g),
    nI(C),
    nI(A),
    nI(d)
  ]);
}, yF = function(l, I, g, C, A) {
  return jW(Qd(YI(l)), td(YI(l)) + Nd(YI(I)), -td(YI(l)) + Nd(YI(g)), Qd(YI(l)), C, A);
}, yZ = function(l) {
  return HI.of(KI.DrawObject, [C0(l)]);
}, vW = function(l) {
  return HI.of(KI.NonStrokingColorGray, [nI(l)]);
}, xW = function(l) {
  return HI.of(KI.StrokingColorGray, [nI(l)]);
}, OW = function(l, I, g) {
  return HI.of(KI.NonStrokingColorRgb, [
    nI(l),
    nI(I),
    nI(g)
  ]);
}, fW = function(l, I, g) {
  return HI.of(KI.StrokingColorRgb, [
    nI(l),
    nI(I),
    nI(g)
  ]);
}, PW = function(l, I, g, C) {
  return HI.of(KI.NonStrokingColorCmyk, [
    nI(l),
    nI(I),
    nI(g),
    nI(C)
  ]);
}, qW = function(l, I, g, C) {
  return HI.of(KI.StrokingColorCmyk, [
    nI(l),
    nI(I),
    nI(g),
    nI(C)
  ]);
}, XF = function(l) {
  return HI.of(KI.BeginMarkedContent, [C0(l)]);
}, HF = function() {
  return HI.of(KI.EndMarkedContent);
}, PC;
(function(l) {
  l.Grayscale = "Grayscale", l.RGB = "RGB", l.CMYK = "CMYK";
})(PC || (PC = {}));
var pF = function(l) {
  return Eg(l, "gray", 0, 1), { type: PC.Grayscale, gray: l };
}, EI = function(l, I, g) {
  return Eg(l, "red", 0, 1), Eg(I, "green", 0, 1), Eg(g, "blue", 0, 1), { type: PC.RGB, red: l, green: I, blue: g };
}, kF = function(l, I, g, C) {
  return Eg(l, "cyan", 0, 1), Eg(I, "magenta", 0, 1), Eg(g, "yellow", 0, 1), Eg(C, "key", 0, 1), { type: PC.CMYK, cyan: l, magenta: I, yellow: g, key: C };
}, XZ = PC.Grayscale, HZ = PC.RGB, pZ = PC.CMYK, RA = function(l) {
  return l.type === XZ ? vW(l.gray) : l.type === HZ ? OW(l.red, l.green, l.blue) : l.type === pZ ? PW(l.cyan, l.magenta, l.yellow, l.key) : pl("Invalid color: " + JSON.stringify(l));
}, zl = function(l) {
  return l.type === XZ ? xW(l.gray) : l.type === HZ ? fW(l.red, l.green, l.blue) : l.type === pZ ? qW(l.cyan, l.magenta, l.yellow, l.key) : pl("Invalid color: " + JSON.stringify(l));
}, yg = function(l, I) {
  return I === void 0 && (I = 1), l?.length === 1 ? pF(l[0] * I) : l?.length === 3 ? EI(l[0] * I, l[1] * I, l[2] * I) : l?.length === 4 ? kF(l[0] * I, l[1] * I, l[2] * I, l[3] * I) : void 0;
}, CB = function(l) {
  return l.type === XZ ? [l.gray] : l.type === HZ ? [l.red, l.green, l.blue] : l.type === pZ ? [l.cyan, l.magenta, l.yellow, l.key] : pl("Invalid color: " + JSON.stringify(l));
}, dI = 0, ZI = 0, yI = 0, XI = 0, il = 0, Bl = 0, AB = /* @__PURE__ */ new Map([
  ["A", 7],
  ["a", 7],
  ["C", 6],
  ["c", 6],
  ["H", 1],
  ["h", 1],
  ["L", 2],
  ["l", 2],
  ["M", 2],
  ["m", 2],
  ["Q", 4],
  ["q", 4],
  ["S", 4],
  ["s", 4],
  ["T", 2],
  ["t", 2],
  ["V", 1],
  ["v", 1],
  ["Z", 0],
  ["z", 0]
]), _W = function(l) {
  for (var I, g = [], C = [], A = "", d = !1, Z = 0, i = 0, B = l; i < B.length; i++) {
    var F = B[i];
    if (AB.has(F))
      Z = AB.get(F), I && (A.length > 0 && (C[C.length] = +A), g[g.length] = { cmd: I, args: C }, C = [], A = "", d = !1), I = F;
    else if ([" ", ","].includes(F) || F === "-" && A.length > 0 && A[A.length - 1] !== "e" || F === "." && d) {
      if (A.length === 0)
        continue;
      C.length === Z ? (g[g.length] = { cmd: I, args: C }, C = [+A], I === "M" && (I = "L"), I === "m" && (I = "l")) : C[C.length] = +A, d = F === ".", A = ["-", "."].includes(F) ? F : "";
    } else
      A += F, F === "." && (d = !0);
  }
  return A.length > 0 && (C.length === Z ? (g[g.length] = { cmd: I, args: C }, C = [+A], I === "M" && (I = "L"), I === "m" && (I = "l")) : C[C.length] = +A), g[g.length] = { cmd: I, args: C }, g;
}, $W = function(l) {
  dI = ZI = yI = XI = il = Bl = 0;
  for (var I = [], g = 0; g < l.length; g++) {
    var C = l[g];
    if (C.cmd && typeof lB[C.cmd] == "function") {
      var A = lB[C.cmd](C.args);
      Array.isArray(A) ? I = I.concat(A) : I.push(A);
    }
  }
  return I;
}, lB = {
  M: function(l) {
    return dI = l[0], ZI = l[1], yI = XI = null, il = dI, Bl = ZI, hC(dI, ZI);
  },
  m: function(l) {
    return dI += l[0], ZI += l[1], yI = XI = null, il = dI, Bl = ZI, hC(dI, ZI);
  },
  C: function(l) {
    return dI = l[4], ZI = l[5], yI = l[2], XI = l[3], jg(l[0], l[1], l[2], l[3], l[4], l[5]);
  },
  c: function(l) {
    var I = jg(l[0] + dI, l[1] + ZI, l[2] + dI, l[3] + ZI, l[4] + dI, l[5] + ZI);
    return yI = dI + l[2], XI = ZI + l[3], dI += l[4], ZI += l[5], I;
  },
  S: function(l) {
    (yI === null || XI === null) && (yI = dI, XI = ZI);
    var I = jg(dI - (yI - dI), ZI - (XI - ZI), l[0], l[1], l[2], l[3]);
    return yI = l[0], XI = l[1], dI = l[2], ZI = l[3], I;
  },
  s: function(l) {
    (yI === null || XI === null) && (yI = dI, XI = ZI);
    var I = jg(dI - (yI - dI), ZI - (XI - ZI), dI + l[0], ZI + l[1], dI + l[2], ZI + l[3]);
    return yI = dI + l[0], XI = ZI + l[1], dI += l[2], ZI += l[3], I;
  },
  Q: function(l) {
    return yI = l[0], XI = l[1], dI = l[2], ZI = l[3], Cd(l[0], l[1], dI, ZI);
  },
  q: function(l) {
    var I = Cd(l[0] + dI, l[1] + ZI, l[2] + dI, l[3] + ZI);
    return yI = dI + l[0], XI = ZI + l[1], dI += l[2], ZI += l[3], I;
  },
  T: function(l) {
    yI === null || XI === null ? (yI = dI, XI = ZI) : (yI = dI - (yI - dI), XI = ZI - (XI - ZI));
    var I = Cd(yI, XI, l[0], l[1]);
    return yI = dI - (yI - dI), XI = ZI - (XI - ZI), dI = l[0], ZI = l[1], I;
  },
  t: function(l) {
    yI === null || XI === null ? (yI = dI, XI = ZI) : (yI = dI - (yI - dI), XI = ZI - (XI - ZI));
    var I = Cd(yI, XI, dI + l[0], ZI + l[1]);
    return dI += l[0], ZI += l[1], I;
  },
  A: function(l) {
    var I = dB(dI, ZI, l);
    return dI = l[5], ZI = l[6], I;
  },
  a: function(l) {
    l[5] += dI, l[6] += ZI;
    var I = dB(dI, ZI, l);
    return dI = l[5], ZI = l[6], I;
  },
  L: function(l) {
    return dI = l[0], ZI = l[1], yI = XI = null, og(dI, ZI);
  },
  l: function(l) {
    return dI += l[0], ZI += l[1], yI = XI = null, og(dI, ZI);
  },
  H: function(l) {
    return dI = l[0], yI = XI = null, og(dI, ZI);
  },
  h: function(l) {
    return dI += l[0], yI = XI = null, og(dI, ZI);
  },
  V: function(l) {
    return ZI = l[0], yI = XI = null, og(dI, ZI);
  },
  v: function(l) {
    return ZI += l[0], yI = XI = null, og(dI, ZI);
  },
  Z: function() {
    var l = fC();
    return dI = il, ZI = Bl, l;
  },
  z: function() {
    var l = fC();
    return dI = il, ZI = Bl, l;
  }
}, dB = function(l, I, g) {
  for (var C = g[0], A = g[1], d = g[2], Z = g[3], i = g[4], B = g[5], F = g[6], s = Ib(B, F, C, A, Z, i, d, l, I), c = [], G = 0, V = s; G < V.length; G++) {
    var W = V[G], R = gb.apply(void 0, W);
    c.push(jg.apply(void 0, R));
  }
  return c;
}, Ib = function(l, I, g, C, A, d, Z, i, B) {
  var F = Z * (Math.PI / 180), s = Math.sin(F), c = Math.cos(F);
  g = Math.abs(g), C = Math.abs(C), yI = c * (i - l) * 0.5 + s * (B - I) * 0.5, XI = c * (B - I) * 0.5 - s * (i - l) * 0.5;
  var G = yI * yI / (g * g) + XI * XI / (C * C);
  G > 1 && (G = Math.sqrt(G), g *= G, C *= G);
  var V = c / g, W = s / g, R = -s / C, U = c / C, n = V * i + W * B, m = R * i + U * B, e = V * l + W * I, N = R * l + U * I, w = (e - n) * (e - n) + (N - m) * (N - m), S = 1 / w - 0.25;
  S < 0 && (S = 0);
  var Y = Math.sqrt(S);
  d === A && (Y = -Y);
  var M = 0.5 * (n + e) - Y * (N - m), y = 0.5 * (m + N) + Y * (e - n), r = Math.atan2(m - y, n - M), z = Math.atan2(N - y, e - M), E = z - r;
  E < 0 && d === 1 ? E += 2 * Math.PI : E > 0 && d === 0 && (E -= 2 * Math.PI);
  for (var X = Math.ceil(Math.abs(E / (Math.PI * 0.5 + 1e-3))), O = [], _ = 0; _ < X; _++) {
    var p = r + _ * E / X, T = r + (_ + 1) * E / X;
    O[_] = [M, y, p, T, g, C, s, c];
  }
  return O;
}, gb = function(l, I, g, C, A, d, Z, i) {
  var B = i * A, F = -Z * d, s = Z * A, c = i * d, G = 0.5 * (C - g), V = 8 / 3 * Math.sin(G * 0.5) * Math.sin(G * 0.5) / Math.sin(G), W = l + Math.cos(g) - V * Math.sin(g), R = I + Math.sin(g) + V * Math.cos(g), U = l + Math.cos(C), n = I + Math.sin(C), m = U + V * Math.sin(C), e = n - V * Math.cos(C), N = [
    B * W + F * R,
    s * W + c * R,
    B * m + F * e,
    s * m + c * e,
    B * U + F * n,
    s * U + c * n
  ];
  return N;
}, Cb = function(l) {
  return $W(_W(l));
}, Ab = function(l, I) {
  for (var g = [
    bg(),
    I.graphicsState && bA(I.graphicsState),
    uF(),
    RA(I.color),
    MZ(I.font, I.size),
    EW(I.lineHeight),
    yF(hg(I.rotate), hg(I.xSkew), hg(I.ySkew), I.x, I.y)
  ].filter(Boolean), C = 0, A = l.length; C < A; C++)
    g.push(DF(l[C]), LW());
  return g.push(MF(), Rg()), g;
}, KF = function(l, I) {
  return [
    bg(),
    I.graphicsState && bA(I.graphicsState),
    ZC(I.x, I.y),
    TA(hg(I.rotate)),
    Jl(I.width, I.height),
    JZ(hg(I.xSkew), hg(I.ySkew)),
    yZ(l),
    Rg()
  ].filter(Boolean);
}, lb = function(l, I) {
  return [
    bg(),
    I.graphicsState && bA(I.graphicsState),
    ZC(I.x, I.y),
    TA(hg(I.rotate)),
    Jl(I.xScale, I.yScale),
    JZ(hg(I.xSkew), hg(I.ySkew)),
    yZ(l),
    Rg()
  ].filter(Boolean);
}, db = function(l) {
  var I, g;
  return [
    bg(),
    l.graphicsState && bA(l.graphicsState),
    l.color && zl(l.color),
    Kl(l.thickness),
    l0((I = l.dashArray) !== null && I !== void 0 ? I : [], (g = l.dashPhase) !== null && g !== void 0 ? g : 0),
    hC(l.start.x, l.start.y),
    l.lineCap && d0(l.lineCap),
    hC(l.start.x, l.start.y),
    og(l.end.x, l.end.y),
    rl(),
    Rg()
  ].filter(Boolean);
}, rA = function(l) {
  var I, g;
  return [
    bg(),
    l.graphicsState && bA(l.graphicsState),
    l.color && RA(l.color),
    l.borderColor && zl(l.borderColor),
    Kl(l.borderWidth),
    l.borderLineCap && d0(l.borderLineCap),
    l0((I = l.borderDashArray) !== null && I !== void 0 ? I : [], (g = l.borderDashPhase) !== null && g !== void 0 ? g : 0),
    ZC(l.x, l.y),
    TA(hg(l.rotate)),
    JZ(hg(l.xSkew), hg(l.ySkew)),
    hC(0, 0),
    og(0, l.height),
    og(l.width, l.height),
    og(l.width, 0),
    fC(),
    // prettier-ignore
    l.color && l.borderWidth ? uZ() : l.color ? DZ() : l.borderColor ? rl() : fC(),
    Rg()
  ].filter(Boolean);
}, wd = 4 * ((Math.sqrt(2) - 1) / 3), Zb = function(l) {
  var I = YI(l.x), g = YI(l.y), C = YI(l.xScale), A = YI(l.yScale);
  I -= C, g -= A;
  var d = C * wd, Z = A * wd, i = I + C * 2, B = g + A * 2, F = I + C, s = g + A;
  return [
    bg(),
    hC(I, s),
    jg(I, s - Z, F - d, g, F, g),
    jg(F + d, g, i, s - Z, i, s),
    jg(i, s + Z, F + d, B, F, B),
    jg(F - d, B, I, s + Z, I, s),
    Rg()
  ];
}, ib = function(l) {
  var I = YI(l.x), g = YI(l.y), C = YI(l.xScale), A = YI(l.yScale), d = -C, Z = -A, i = C * wd, B = A * wd, F = d + C * 2, s = Z + A * 2, c = d + C, G = Z + A;
  return [
    ZC(I, g),
    TA(hg(l.rotate)),
    hC(d, G),
    jg(d, G - B, c - i, Z, c, Z),
    jg(c + i, Z, F, G - B, F, G),
    jg(F, G + B, c + i, s, c, s),
    jg(c - i, s, d, G + B, d, G)
  ];
}, j0 = function(l) {
  var I, g, C;
  return kI([
    bg(),
    l.graphicsState && bA(l.graphicsState),
    l.color && RA(l.color),
    l.borderColor && zl(l.borderColor),
    Kl(l.borderWidth),
    l.borderLineCap && d0(l.borderLineCap),
    l0((I = l.borderDashArray) !== null && I !== void 0 ? I : [], (g = l.borderDashPhase) !== null && g !== void 0 ? g : 0)
  ], l.rotate === void 0 ? Zb({
    x: l.x,
    y: l.y,
    xScale: l.xScale,
    yScale: l.yScale
  }) : ib({
    x: l.x,
    y: l.y,
    xScale: l.xScale,
    yScale: l.yScale,
    rotate: (C = l.rotate) !== null && C !== void 0 ? C : FI(0)
  }), [
    // prettier-ignore
    l.color && l.borderWidth ? uZ() : l.color ? DZ() : l.borderColor ? rl() : fC(),
    Rg()
  ]).filter(Boolean);
}, Bb = function(l, I) {
  var g, C, A;
  return kI([
    bg(),
    I.graphicsState && bA(I.graphicsState),
    ZC(I.x, I.y),
    TA(hg((g = I.rotate) !== null && g !== void 0 ? g : FI(0))),
    // SVG path Y axis is opposite pdf-lib's
    I.scale ? Jl(I.scale, -I.scale) : Jl(1, -1),
    I.color && RA(I.color),
    I.borderColor && zl(I.borderColor),
    I.borderWidth && Kl(I.borderWidth),
    I.borderLineCap && d0(I.borderLineCap),
    l0((C = I.borderDashArray) !== null && C !== void 0 ? C : [], (A = I.borderDashPhase) !== null && A !== void 0 ? A : 0)
  ], Cb(l), [
    // prettier-ignore
    I.color && I.borderWidth ? uZ() : I.color ? DZ() : I.borderColor ? rl() : fC(),
    Rg()
  ]).filter(Boolean);
}, Fb = function(l) {
  var I = YI(l.size), g = -1 + 0.75, C = -1 + 0.51, A = 1 - 0.525, d = 1 - 0.31, Z = -1 + 0.325, i = 0.3995 / (A - C) + C;
  return [
    bg(),
    l.color && zl(l.color),
    Kl(l.thickness),
    ZC(l.x, l.y),
    hC(Z * I, i * I),
    og(g * I, C * I),
    og(d * I, A * I),
    rl(),
    Rg()
  ].filter(Boolean);
}, gA = function(l) {
  return l.rotation === 0 ? [
    ZC(0, 0),
    gd(0)
  ] : l.rotation === 90 ? [
    ZC(l.width, 0),
    gd(90)
  ] : l.rotation === 180 ? [
    ZC(l.width, l.height),
    gd(180)
  ] : l.rotation === 270 ? [
    ZC(0, l.height),
    gd(270)
  ] : [];
}, Ad = function(l) {
  var I = rA({
    x: l.x,
    y: l.y,
    width: l.width,
    height: l.height,
    borderWidth: l.borderWidth,
    color: l.color,
    borderColor: l.borderColor,
    rotate: FI(0),
    xSkew: FI(0),
    ySkew: FI(0)
  });
  if (!l.filled)
    return I;
  var g = YI(l.width), C = YI(l.height), A = Math.min(g, C) / 2, d = Fb({
    x: g / 2,
    y: C / 2,
    size: A,
    thickness: l.thickness,
    color: l.markColor
  });
  return kI([bg()], I, d, [Rg()]);
}, ld = function(l) {
  var I = YI(l.width), g = YI(l.height), C = Math.min(I, g) / 2, A = j0({
    x: l.x,
    y: l.y,
    xScale: C,
    yScale: C,
    color: l.color,
    borderColor: l.borderColor,
    borderWidth: l.borderWidth
  });
  if (!l.filled)
    return A;
  var d = j0({
    x: l.x,
    y: l.y,
    xScale: C * 0.45,
    yScale: C * 0.45,
    color: l.dotColor,
    borderColor: void 0,
    borderWidth: 0
  });
  return kI([bg()], A, d, [Rg()]);
}, ZB = function(l) {
  var I = YI(l.x), g = YI(l.y), C = YI(l.width), A = YI(l.height), d = rA({
    x: I,
    y: g,
    width: C,
    height: A,
    borderWidth: l.borderWidth,
    color: l.color,
    borderColor: l.borderColor,
    rotate: FI(0),
    xSkew: FI(0),
    ySkew: FI(0)
  }), Z = kZ(l.textLines, {
    color: l.textColor,
    font: l.font,
    size: l.fontSize,
    rotate: FI(0),
    xSkew: FI(0),
    ySkew: FI(0)
  });
  return kI([bg()], d, Z, [Rg()]);
}, kZ = function(l, I) {
  for (var g = [
    uF(),
    RA(I.color),
    MZ(I.font, I.size)
  ], C = 0, A = l.length; C < A; C++) {
    var d = l[C], Z = d.encoded, i = d.x, B = d.y;
    g.push(yF(hg(I.rotate), hg(I.xSkew), hg(I.ySkew), i, B), DF(Z));
  }
  return g.push(MF()), g;
}, rF = function(l) {
  var I = YI(l.x), g = YI(l.y), C = YI(l.width), A = YI(l.height), d = YI(l.borderWidth), Z = YI(l.padding), i = I + d / 2 + Z, B = g + d / 2 + Z, F = C - (d / 2 + Z) * 2, s = A - (d / 2 + Z) * 2, c = [
    hC(i, B),
    og(i, B + s),
    og(i + F, B + s),
    og(i + F, B),
    fC(),
    SF(),
    JF()
  ], G = rA({
    x: I,
    y: g,
    width: C,
    height: A,
    borderWidth: l.borderWidth,
    color: l.color,
    borderColor: l.borderColor,
    rotate: FI(0),
    xSkew: FI(0),
    ySkew: FI(0)
  }), V = kZ(l.textLines, {
    color: l.textColor,
    font: l.font,
    size: l.fontSize,
    rotate: FI(0),
    xSkew: FI(0),
    ySkew: FI(0)
  }), W = kI([
    XF("Tx"),
    bg()
  ], V, [
    Rg(),
    HF()
  ]);
  return kI([
    bg()
  ], G, c, W, [
    Rg()
  ]);
}, sb = function(l) {
  for (var I = YI(l.x), g = YI(l.y), C = YI(l.width), A = YI(l.height), d = YI(l.lineHeight), Z = YI(l.borderWidth), i = YI(l.padding), B = I + Z / 2 + i, F = g + Z / 2 + i, s = C - (Z / 2 + i) * 2, c = A - (Z / 2 + i) * 2, G = [
    hC(B, F),
    og(B, F + c),
    og(B + s, F + c),
    og(B + s, F),
    fC(),
    SF(),
    JF()
  ], V = rA({
    x: I,
    y: g,
    width: C,
    height: A,
    borderWidth: l.borderWidth,
    color: l.color,
    borderColor: l.borderColor,
    rotate: FI(0),
    xSkew: FI(0),
    ySkew: FI(0)
  }), W = [], R = 0, U = l.selectedLines.length; R < U; R++) {
    var n = l.textLines[l.selectedLines[R]];
    W.push.apply(W, rA({
      x: n.x - i,
      y: n.y - (d - n.height) / 2,
      width: C - Z,
      height: n.height + (d - n.height) / 2,
      borderWidth: 0,
      color: l.selectedColor,
      borderColor: void 0,
      rotate: FI(0),
      xSkew: FI(0),
      ySkew: FI(0)
    }));
  }
  var m = kZ(l.textLines, {
    color: l.textColor,
    font: l.font,
    size: l.fontSize,
    rotate: FI(0),
    xSkew: FI(0),
    ySkew: FI(0)
  }), e = kI([
    XF("Tx"),
    bg()
  ], m, [
    Rg(),
    HF()
  ]);
  return kI([
    bg()
  ], V, W, G, e, [
    Rg()
  ]);
}, cb = (
  /** @class */
  function(l) {
    q(I, l);
    function I() {
      var g = this, C = "Input document to `PDFDocument.load` is encrypted. You can use `PDFDocument.load(..., { ignoreEncryption: true })` if you wish to load the document anyways.";
      return g = l.call(this, C) || this, g;
    }
    return I;
  }(Error)
), Gb = (
  /** @class */
  function(l) {
    q(I, l);
    function I() {
      var g = this, C = "Input to `PDFDocument.embedFont` was a custom font, but no `fontkit` instance was found. You must register a `fontkit` instance with `PDFDocument.registerFontkit(...)` before embedding custom fonts.";
      return g = l.call(this, C) || this, g;
    }
    return I;
  }(Error)
), Vb = (
  /** @class */
  function(l) {
    q(I, l);
    function I() {
      var g = this, C = "A `page` passed to `PDFDocument.addPage` or `PDFDocument.insertPage` was from a different (foreign) PDF document. If you want to copy pages from one PDFDocument to another, you must use `PDFDocument.copyPages(...)` to copy the pages before adding or inserting them.";
      return g = l.call(this, C) || this, g;
    }
    return I;
  }(Error)
), Wb = (
  /** @class */
  function(l) {
    q(I, l);
    function I() {
      var g = this, C = "PDFDocument has no pages so `PDFDocument.removePage` cannot be called";
      return g = l.call(this, C) || this, g;
    }
    return I;
  }(Error)
), bb = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g) {
      var C = this, A = 'PDFDocument has no form field with the name "' + g + '"';
      return C = l.call(this, A) || this, C;
    }
    return I;
  }(Error)
), ZA = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C, A) {
      var d, Z, i = this, B = C?.name, F = (Z = (d = A?.constructor) === null || d === void 0 ? void 0 : d.name) !== null && Z !== void 0 ? Z : A, s = 'Expected field "' + g + '" to be of type ' + B + ", " + ("but it is actually of type " + F);
      return i = l.call(this, s) || this, i;
    }
    return I;
  }(Error)
);
(function(l) {
  q(I, l);
  function I(g) {
    var C = this, A = 'Failed to select check box due to missing onValue: "' + g + '"';
    return C = l.call(this, A) || this, C;
  }
  return I;
})(Error);
var zF = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g) {
      var C = this, A = 'A field already exists with the specified name: "' + g + '"';
      return C = l.call(this, A) || this, C;
    }
    return I;
  }(Error)
), Rb = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g) {
      var C = this, A = 'Field name contains invalid component: "' + g + '"';
      return C = l.call(this, A) || this, C;
    }
    return I;
  }(Error)
);
(function(l) {
  q(I, l);
  function I(g) {
    var C = this, A = 'A non-terminal field already exists with the specified name: "' + g + '"';
    return C = l.call(this, A) || this, C;
  }
  return I;
})(Error);
var nb = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g) {
      var C = this, A = "Reading rich text fields is not supported: Attempted to read rich text field: " + g;
      return C = l.call(this, A) || this, C;
    }
    return I;
  }(Error)
), Ub = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C) {
      var A = this, d = "Failed to layout combed text as lineLength=" + g + " is greater than cellCount=" + C;
      return A = l.call(this, d) || this, A;
    }
    return I;
  }(Error)
), ab = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C, A) {
      var d = this, Z = "Attempted to set text with length=" + g + " for TextField with maxLength=" + C + " and name=" + A;
      return d = l.call(this, Z) || this, d;
    }
    return I;
  }(Error)
), ob = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C, A) {
      var d = this, Z = "Attempted to set maxLength=" + C + ", which is less than " + g + ", the length of this field's current value (name=" + A + ")";
      return d = l.call(this, Z) || this, d;
    }
    return I;
  }(Error)
), Wg;
(function(l) {
  l[l.Left = 0] = "Left", l[l.Center = 1] = "Center", l[l.Right = 2] = "Right";
})(Wg || (Wg = {}));
var TF = 4, LF = 500, EF = function(l, I, g, C) {
  C === void 0 && (C = !1);
  for (var A = TF; A < LF; ) {
    for (var d = 0, Z = 0, i = l.length; Z < i; Z++) {
      d += 1;
      for (var B = l[Z], F = B.split(" "), s = g.width, c = 0, G = F.length; c < G; c++) {
        var V = c === G - 1, W = V ? F[c] : F[c] + " ", R = I.widthOfTextAtSize(W, A);
        s -= R, s <= 0 && (d += 1, s = g.width - R);
      }
    }
    if (!C && d > l.length)
      return A - 1;
    var U = I.heightAtSize(A), n = U + U * 0.2, m = n * d;
    if (m > Math.abs(g.height))
      return A - 1;
    A += 1;
  }
  return A;
}, eb = function(l, I, g, C) {
  for (var A = g.width / C, d = g.height, Z = TF, i = DG(l); Z < LF; ) {
    for (var B = 0, F = i.length; B < F; B++) {
      var s = i[B], c = I.widthOfTextAtSize(s, Z) > A * 0.75;
      if (c)
        return Z - 1;
    }
    var G = I.heightAtSize(Z, { descender: !1 });
    if (G > d)
      return Z - 1;
    Z += 1;
  }
  return Z;
}, mb = function(l) {
  for (var I = l.length; I > 0; I--)
    if (/\s/.test(l[I]))
      return I;
}, hb = function(l, I, g, C) {
  for (var A, d = l.length; d > 0; ) {
    var Z = l.substring(0, d), i = g.encodeText(Z), B = g.widthOfTextAtSize(Z, C);
    if (B < I) {
      var F = l.substring(d) || void 0;
      return { line: Z, encoded: i, width: B, remainder: F };
    }
    d = (A = mb(Z)) !== null && A !== void 0 ? A : 0;
  }
  return {
    line: l,
    encoded: g.encodeText(l),
    width: g.widthOfTextAtSize(l, C),
    remainder: void 0
  };
}, jF = function(l, I) {
  var g = I.alignment, C = I.fontSize, A = I.font, d = I.bounds, Z = TB(Hl(l));
  (C === void 0 || C === 0) && (C = EF(Z, A, d, !0));
  for (var i = A.heightAtSize(C), B = i + i * 0.2, F = [], s = d.x, c = d.y, G = d.x + d.width, V = d.y + d.height, W = d.y + d.height, R = 0, U = Z.length; R < U; R++)
    for (var n = Z[R]; n !== void 0; ) {
      var m = hb(n, d.width, A, C), e = m.line, N = m.encoded, w = m.width, S = m.remainder, Y = g === Wg.Left ? d.x : g === Wg.Center ? d.x + d.width / 2 - w / 2 : g === Wg.Right ? d.x + d.width - w : d.x;
      W -= B, Y < s && (s = Y), W < c && (c = W), Y + w > G && (G = Y + w), W + i > V && (V = W + i), F.push({ text: e, encoded: N, width: w, height: i, x: Y, y: W }), n = S?.trim();
    }
  return {
    fontSize: C,
    lineHeight: B,
    lines: F,
    bounds: {
      x: s,
      y: c,
      width: G - s,
      height: V - c
    }
  };
}, Qb = function(l, I) {
  var g = I.fontSize, C = I.font, A = I.bounds, d = I.cellCount, Z = LB(Hl(l));
  if (Z.length > d)
    throw new Ub(Z.length, d);
  (g === void 0 || g === 0) && (g = eb(Z, C, A, d));
  for (var i = A.width / d, B = C.heightAtSize(g, { descender: !1 }), F = A.y + (A.height / 2 - B / 2), s = [], c = A.x, G = A.y, V = A.x + A.width, W = A.y + A.height, R = 0, U = 0; R < d; ) {
    var n = EB(Z, U), m = n[0], e = n[1], N = C.encodeText(m), w = C.widthOfTextAtSize(m, g), S = A.x + (i * R + i / 2), Y = S - w / 2;
    Y < c && (c = Y), F < G && (G = F), Y + w > V && (V = Y + w), F + B > W && (W = F + B), s.push({ text: Z, encoded: N, width: w, height: B, x: Y, y: F }), R += 1, U += e;
  }
  return {
    fontSize: g,
    cells: s,
    bounds: {
      x: c,
      y: G,
      width: V - c,
      height: W - G
    }
  };
}, Yd = function(l, I) {
  var g = I.alignment, C = I.fontSize, A = I.font, d = I.bounds, Z = LB(Hl(l));
  (C === void 0 || C === 0) && (C = EF([Z], A, d));
  var i = A.encodeText(Z), B = A.widthOfTextAtSize(Z, C), F = A.heightAtSize(C, { descender: !1 }), s = g === Wg.Left ? d.x : g === Wg.Center ? d.x + d.width / 2 - B / 2 : g === Wg.Right ? d.x + d.width - B : d.x, c = d.y + (d.height / 2 - F / 2);
  return {
    fontSize: C,
    line: { text: Z, encoded: i, width: B, height: F, x: s, y: c },
    bounds: { x: s, y: c, width: B, height: F }
  };
}, LA = function(l) {
  return "normal" in l ? l : { normal: l };
}, tb = /\/([^\0\t\n\f\r\ ]+)[\0\t\n\f\r\ ]+(\d*\.\d+|\d+)[\0\t\n\f\r\ ]+Tf/, qC = function(l) {
  var I, g, C = (I = l.getDefaultAppearance()) !== null && I !== void 0 ? I : "", A = (g = RZ(C, tb).match) !== null && g !== void 0 ? g : [], d = Number(A[2]);
  return isFinite(d) ? d : void 0;
}, Nb = /(\d*\.\d+|\d+)[\0\t\n\f\r\ ]*(\d*\.\d+|\d+)?[\0\t\n\f\r\ ]*(\d*\.\d+|\d+)?[\0\t\n\f\r\ ]*(\d*\.\d+|\d+)?[\0\t\n\f\r\ ]+(g|rg|k)/, iC = function(l) {
  var I, g = (I = l.getDefaultAppearance()) !== null && I !== void 0 ? I : "", C = RZ(g, Nb).match, A = C ?? [], d = A[1], Z = A[2], i = A[3], B = A[4], F = A[5];
  if (F === "g" && d)
    return pF(Number(d));
  if (F === "rg" && d && Z && i)
    return EI(Number(d), Number(Z), Number(i));
  if (F === "k" && d && Z && i && B)
    return kF(Number(d), Number(Z), Number(i), Number(B));
}, BC = function(l, I, g, C) {
  var A;
  C === void 0 && (C = 0);
  var d = [
    RA(I).toString(),
    MZ((A = g?.name) !== null && A !== void 0 ? A : "dummy__noop", C).toString()
  ].join(`
`);
  l.setDefaultAppearance(d);
}, wb = function(l, I) {
  var g, C, A, d = iC(I), Z = iC(l.acroField), i = I.getRectangle(), B = I.getAppearanceCharacteristics(), F = I.getBorderStyle(), s = (g = F?.getWidth()) !== null && g !== void 0 ? g : 0, c = XC(B?.getRotation()), G = WA(i, c), V = G.width, W = G.height, R = gA(mI(mI({}, i), { rotation: c })), U = EI(0, 0, 0), n = (C = yg(B?.getBorderColor())) !== null && C !== void 0 ? C : U, m = yg(B?.getBackgroundColor()), e = yg(B?.getBackgroundColor(), 0.8), N = (A = d ?? Z) !== null && A !== void 0 ? A : U;
  BC(d ? I : l.acroField, N);
  var w = {
    x: 0 + s / 2,
    y: 0 + s / 2,
    width: V - s,
    height: W - s,
    thickness: 1.5,
    borderWidth: s,
    borderColor: n,
    markColor: N
  };
  return {
    normal: {
      on: kI(R, Ad(mI(mI({}, w), { color: m, filled: !0 }))),
      off: kI(R, Ad(mI(mI({}, w), { color: m, filled: !1 })))
    },
    down: {
      on: kI(R, Ad(mI(mI({}, w), { color: e, filled: !0 }))),
      off: kI(R, Ad(mI(mI({}, w), { color: e, filled: !1 })))
    }
  };
}, Yb = function(l, I) {
  var g, C, A, d = iC(I), Z = iC(l.acroField), i = I.getRectangle(), B = I.getAppearanceCharacteristics(), F = I.getBorderStyle(), s = (g = F?.getWidth()) !== null && g !== void 0 ? g : 0, c = XC(B?.getRotation()), G = WA(i, c), V = G.width, W = G.height, R = gA(mI(mI({}, i), { rotation: c })), U = EI(0, 0, 0), n = (C = yg(B?.getBorderColor())) !== null && C !== void 0 ? C : U, m = yg(B?.getBackgroundColor()), e = yg(B?.getBackgroundColor(), 0.8), N = (A = d ?? Z) !== null && A !== void 0 ? A : U;
  BC(d ? I : l.acroField, N);
  var w = {
    x: V / 2,
    y: W / 2,
    width: V - s,
    height: W - s,
    borderWidth: s,
    borderColor: n,
    dotColor: N
  };
  return {
    normal: {
      on: kI(R, ld(mI(mI({}, w), { color: m, filled: !0 }))),
      off: kI(R, ld(mI(mI({}, w), { color: m, filled: !1 })))
    },
    down: {
      on: kI(R, ld(mI(mI({}, w), { color: e, filled: !0 }))),
      off: kI(R, ld(mI(mI({}, w), { color: e, filled: !1 })))
    }
  };
}, Sb = function(l, I, g) {
  var C, A, d, Z, i, B = iC(I), F = iC(l.acroField), s = qC(I), c = qC(l.acroField), G = I.getRectangle(), V = I.getAppearanceCharacteristics(), W = I.getBorderStyle(), R = V?.getCaptions(), U = (C = R?.normal) !== null && C !== void 0 ? C : "", n = (d = (A = R?.down) !== null && A !== void 0 ? A : U) !== null && d !== void 0 ? d : "", m = (Z = W?.getWidth()) !== null && Z !== void 0 ? Z : 0, e = XC(V?.getRotation()), N = WA(G, e), w = N.width, S = N.height, Y = gA(mI(mI({}, G), { rotation: e })), M = EI(0, 0, 0), y = yg(V?.getBorderColor()), r = yg(V?.getBackgroundColor()), z = yg(V?.getBackgroundColor(), 0.8), E = {
    x: m,
    y: m,
    width: w - m * 2,
    height: S - m * 2
  }, X = Yd(U, {
    alignment: Wg.Center,
    fontSize: s ?? c,
    font: g,
    bounds: E
  }), O = Yd(n, {
    alignment: Wg.Center,
    fontSize: s ?? c,
    font: g,
    bounds: E
  }), _ = Math.min(X.fontSize, O.fontSize), p = (i = B ?? F) !== null && i !== void 0 ? i : M;
  BC(B || s !== void 0 ? I : l.acroField, p, g, _);
  var T = {
    x: 0 + m / 2,
    y: 0 + m / 2,
    width: w - m,
    height: S - m,
    borderWidth: m,
    borderColor: y,
    textColor: p,
    font: g.name,
    fontSize: _
  };
  return {
    normal: kI(Y, ZB(mI(mI({}, T), { color: r, textLines: [X.line] }))),
    down: kI(Y, ZB(mI(mI({}, T), { color: z, textLines: [O.line] })))
  };
}, Jb = function(l, I, g) {
  var C, A, d, Z, i = iC(I), B = iC(l.acroField), F = qC(I), s = qC(l.acroField), c = I.getRectangle(), G = I.getAppearanceCharacteristics(), V = I.getBorderStyle(), W = (C = l.getText()) !== null && C !== void 0 ? C : "", R = (A = V?.getWidth()) !== null && A !== void 0 ? A : 0, U = XC(G?.getRotation()), n = WA(c, U), m = n.width, e = n.height, N = gA(mI(mI({}, c), { rotation: U })), w = EI(0, 0, 0), S = yg(G?.getBorderColor()), Y = yg(G?.getBackgroundColor()), M, y, r = l.isCombed() ? 0 : 1, z = {
    x: R + r,
    y: R + r,
    width: m - (R + r) * 2,
    height: e - (R + r) * 2
  };
  if (l.isMultiline()) {
    var E = jF(W, {
      alignment: l.getAlignment(),
      fontSize: F ?? s,
      font: g,
      bounds: z
    });
    M = E.lines, y = E.fontSize;
  } else if (l.isCombed()) {
    var E = Qb(W, {
      fontSize: F ?? s,
      font: g,
      bounds: z,
      cellCount: (d = l.getMaxLength()) !== null && d !== void 0 ? d : 0
    });
    M = E.cells, y = E.fontSize;
  } else {
    var E = Yd(W, {
      alignment: l.getAlignment(),
      fontSize: F ?? s,
      font: g,
      bounds: z
    });
    M = [E.line], y = E.fontSize;
  }
  var X = (Z = i ?? B) !== null && Z !== void 0 ? Z : w;
  BC(i || F !== void 0 ? I : l.acroField, X, g, y);
  var O = {
    x: 0 + R / 2,
    y: 0 + R / 2,
    width: m - R,
    height: e - R,
    borderWidth: R ?? 0,
    borderColor: S,
    textColor: X,
    font: g.name,
    fontSize: y,
    color: Y,
    textLines: M,
    padding: r
  };
  return kI(N, rF(O));
}, Db = function(l, I, g) {
  var C, A, d, Z = iC(I), i = iC(l.acroField), B = qC(I), F = qC(l.acroField), s = I.getRectangle(), c = I.getAppearanceCharacteristics(), G = I.getBorderStyle(), V = (C = l.getSelected()[0]) !== null && C !== void 0 ? C : "", W = (A = G?.getWidth()) !== null && A !== void 0 ? A : 0, R = XC(c?.getRotation()), U = WA(s, R), n = U.width, m = U.height, e = gA(mI(mI({}, s), { rotation: R })), N = EI(0, 0, 0), w = yg(c?.getBorderColor()), S = yg(c?.getBackgroundColor()), Y = 1, M = {
    x: W + Y,
    y: W + Y,
    width: n - (W + Y) * 2,
    height: m - (W + Y) * 2
  }, y = Yd(V, {
    alignment: Wg.Left,
    fontSize: B ?? F,
    font: g,
    bounds: M
  }), r = y.line, z = y.fontSize, E = (d = Z ?? i) !== null && d !== void 0 ? d : N;
  BC(Z || B !== void 0 ? I : l.acroField, E, g, z);
  var X = {
    x: 0 + W / 2,
    y: 0 + W / 2,
    width: n - W,
    height: m - W,
    borderWidth: W ?? 0,
    borderColor: w,
    textColor: E,
    font: g.name,
    fontSize: z,
    color: S,
    textLines: [r],
    padding: Y
  };
  return kI(e, rF(X));
}, ub = function(l, I, g) {
  var C, A, d = iC(I), Z = iC(l.acroField), i = qC(I), B = qC(l.acroField), F = I.getRectangle(), s = I.getAppearanceCharacteristics(), c = I.getBorderStyle(), G = (C = c?.getWidth()) !== null && C !== void 0 ? C : 0, V = XC(s?.getRotation()), W = WA(F, V), R = W.width, U = W.height, n = gA(mI(mI({}, F), { rotation: V })), m = EI(0, 0, 0), e = yg(s?.getBorderColor()), N = yg(s?.getBackgroundColor()), w = l.getOptions(), S = l.getSelected();
  l.isSorted() && w.sort();
  for (var Y = "", M = 0, y = w.length; M < y; M++)
    Y += w[M], M < y - 1 && (Y += `
`);
  for (var r = 1, z = {
    x: G + r,
    y: G + r,
    width: R - (G + r) * 2,
    height: U - (G + r) * 2
  }, E = jF(Y, {
    alignment: Wg.Left,
    fontSize: i ?? B,
    font: g,
    bounds: z
  }), X = E.lines, O = E.fontSize, _ = E.lineHeight, p = [], M = 0, y = X.length; M < y; M++) {
    var T = X[M];
    S.includes(T.text) && p.push(M);
  }
  var UI = EI(153 / 255, 193 / 255, 218 / 255), sI = (A = d ?? Z) !== null && A !== void 0 ? A : m;
  return BC(d || i !== void 0 ? I : l.acroField, sI, g, O), kI(n, sb({
    x: 0 + G / 2,
    y: 0 + G / 2,
    width: R - G,
    height: U - G,
    borderWidth: G ?? 0,
    borderColor: e,
    textColor: sI,
    font: g.name,
    fontSize: O,
    color: N,
    textLines: X,
    lineHeight: _,
    selectedColor: UI,
    selectedLines: p,
    padding: r
  }));
}, vF = (
  /** @class */
  function() {
    function l(I, g, C) {
      this.alreadyEmbedded = !1, u(I, "ref", [[OI, "PDFRef"]]), u(g, "doc", [[MC, "PDFDocument"]]), u(C, "embedder", [[nF, "PDFPageEmbedder"]]), this.ref = I, this.doc = g, this.width = C.width, this.height = C.height, this.embedder = C;
    }
    return l.prototype.scale = function(I) {
      return u(I, "factor", ["number"]), { width: this.width * I, height: this.height * I };
    }, l.prototype.size = function() {
      return this.scale(1);
    }, l.prototype.embed = function() {
      return NI(this, void 0, void 0, function() {
        return wI(this, function(I) {
          switch (I.label) {
            case 0:
              return this.alreadyEmbedded ? [3, 2] : [4, this.embedder.embedIntoContext(this.doc.context, this.ref)];
            case 1:
              I.sent(), this.alreadyEmbedded = !0, I.label = 2;
            case 2:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, l.of = function(I, g, C) {
      return new l(I, g, C);
    }, l;
  }()
), xg = (
  /** @class */
  function() {
    function l(I, g, C) {
      this.modified = !0, u(I, "ref", [[OI, "PDFRef"]]), u(g, "doc", [[MC, "PDFDocument"]]), u(C, "embedder", [
        [QZ, "CustomFontEmbedder"],
        [od, "StandardFontEmbedder"]
      ]), this.ref = I, this.doc = g, this.name = C.fontName, this.embedder = C;
    }
    return l.prototype.encodeText = function(I) {
      return u(I, "text", ["string"]), this.modified = !0, this.embedder.encodeText(I);
    }, l.prototype.widthOfTextAtSize = function(I, g) {
      return u(I, "text", ["string"]), u(g, "size", ["number"]), this.embedder.widthOfTextAtSize(I, g);
    }, l.prototype.heightAtSize = function(I, g) {
      var C;
      return u(I, "size", ["number"]), f(g?.descender, "options.descender", ["boolean"]), this.embedder.heightOfFontAtSize(I, {
        descender: (C = g?.descender) !== null && C !== void 0 ? C : !0
      });
    }, l.prototype.sizeAtHeight = function(I) {
      return u(I, "height", ["number"]), this.embedder.sizeOfFontAtHeight(I);
    }, l.prototype.getCharacterSet = function() {
      return this.embedder instanceof od ? this.embedder.encoding.supportedCodePoints : this.embedder.font.characterSet;
    }, l.prototype.embed = function() {
      return NI(this, void 0, void 0, function() {
        return wI(this, function(I) {
          switch (I.label) {
            case 0:
              return this.modified ? [4, this.embedder.embedIntoContext(this.doc.context, this.ref)] : [3, 2];
            case 1:
              I.sent(), this.modified = !1, I.label = 2;
            case 2:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, l.of = function(I, g, C) {
      return new l(I, g, C);
    }, l;
  }()
), v0 = (
  /** @class */
  function() {
    function l(I, g, C) {
      u(I, "ref", [[OI, "PDFRef"]]), u(g, "doc", [[MC, "PDFDocument"]]), u(C, "embedder", [
        [VF, "JpegEmbedder"],
        [WF, "PngEmbedder"]
      ]), this.ref = I, this.doc = g, this.width = C.width, this.height = C.height, this.embedder = C;
    }
    return l.prototype.scale = function(I) {
      return u(I, "factor", ["number"]), { width: this.width * I, height: this.height * I };
    }, l.prototype.scaleToFit = function(I, g) {
      u(I, "width", ["number"]), u(g, "height", ["number"]);
      var C = I / this.width, A = g / this.height, d = Math.min(C, A);
      return this.scale(d);
    }, l.prototype.size = function() {
      return this.scale(1);
    }, l.prototype.embed = function() {
      return NI(this, void 0, void 0, function() {
        var I, g, C;
        return wI(this, function(A) {
          switch (A.label) {
            case 0:
              return this.embedder ? (this.embedTask || (I = this, g = I.doc, C = I.ref, this.embedTask = this.embedder.embedIntoContext(g.context, C)), [4, this.embedTask]) : [
                2
                /*return*/
              ];
            case 1:
              return A.sent(), this.embedder = void 0, [
                2
                /*return*/
              ];
          }
        });
      });
    }, l.of = function(I, g, C) {
      return new l(I, g, C);
    }, l;
  }()
), vC;
(function(l) {
  l[l.Left = 0] = "Left", l[l.Center = 1] = "Center", l[l.Right = 2] = "Right";
})(vC || (vC = {}));
var EA = function(l) {
  f(l?.x, "options.x", ["number"]), f(l?.y, "options.y", ["number"]), f(l?.width, "options.width", ["number"]), f(l?.height, "options.height", ["number"]), f(l?.textColor, "options.textColor", [
    [Object, "Color"]
  ]), f(l?.backgroundColor, "options.backgroundColor", [
    [Object, "Color"]
  ]), f(l?.borderColor, "options.borderColor", [
    [Object, "Color"]
  ]), f(l?.borderWidth, "options.borderWidth", ["number"]), f(l?.rotate, "options.rotate", [[Object, "Rotation"]]);
}, nA = (
  /** @class */
  function() {
    function l(I, g, C) {
      u(I, "acroField", [[zA, "PDFAcroTerminal"]]), u(g, "ref", [[OI, "PDFRef"]]), u(C, "doc", [[MC, "PDFDocument"]]), this.acroField = I, this.ref = g, this.doc = C;
    }
    return l.prototype.getName = function() {
      var I;
      return (I = this.acroField.getFullyQualifiedName()) !== null && I !== void 0 ? I : "";
    }, l.prototype.isReadOnly = function() {
      return this.acroField.hasFlag(VC.ReadOnly);
    }, l.prototype.enableReadOnly = function() {
      this.acroField.setFlagTo(VC.ReadOnly, !0);
    }, l.prototype.disableReadOnly = function() {
      this.acroField.setFlagTo(VC.ReadOnly, !1);
    }, l.prototype.isRequired = function() {
      return this.acroField.hasFlag(VC.Required);
    }, l.prototype.enableRequired = function() {
      this.acroField.setFlagTo(VC.Required, !0);
    }, l.prototype.disableRequired = function() {
      this.acroField.setFlagTo(VC.Required, !1);
    }, l.prototype.isExported = function() {
      return !this.acroField.hasFlag(VC.NoExport);
    }, l.prototype.enableExporting = function() {
      this.acroField.setFlagTo(VC.NoExport, !1);
    }, l.prototype.disableExporting = function() {
      this.acroField.setFlagTo(VC.NoExport, !0);
    }, l.prototype.needsAppearancesUpdate = function() {
      throw new dC(this.constructor.name, "needsAppearancesUpdate");
    }, l.prototype.defaultUpdateAppearances = function(I) {
      throw new dC(this.constructor.name, "defaultUpdateAppearances");
    }, l.prototype.markAsDirty = function() {
      this.doc.getForm().markFieldAsDirty(this.ref);
    }, l.prototype.markAsClean = function() {
      this.doc.getForm().markFieldAsClean(this.ref);
    }, l.prototype.isDirty = function() {
      return this.doc.getForm().fieldIsDirty(this.ref);
    }, l.prototype.createWidget = function(I) {
      var g, C = I.textColor, A = I.backgroundColor, d = I.borderColor, Z = I.borderWidth, i = YF(I.rotate), B = I.caption, F = I.x, s = I.y, c = I.width + Z, G = I.height + Z, V = !!I.hidden, W = I.page;
      ZF(i, "degreesAngle", 90);
      var R = L0.create(this.doc.context, this.ref), U = TW({ x: F, y: s, width: c, height: G }, Z, i);
      R.setRectangle(U), W && R.setP(W);
      var n = R.getOrCreateAppearanceCharacteristics();
      A && n.setBackgroundColor(CB(A)), n.setRotation(i), B && n.setCaptions({ normal: B }), d && n.setBorderColor(CB(d));
      var m = R.getOrCreateBorderStyle();
      if (Z !== void 0 && m.setWidth(Z), R.setFlagTo(ol.Print, !0), R.setFlagTo(ol.Hidden, V), R.setFlagTo(ol.Invisible, !1), C) {
        var e = (g = this.acroField.getDefaultAppearance()) !== null && g !== void 0 ? g : "", N = e + `
` + RA(C).toString();
        this.acroField.setDefaultAppearance(N);
      }
      return R;
    }, l.prototype.updateWidgetAppearanceWithFont = function(I, g, C) {
      var A = C.normal, d = C.rollover, Z = C.down;
      this.updateWidgetAppearances(I, {
        normal: this.createAppearanceStream(I, A, g),
        rollover: d && this.createAppearanceStream(I, d, g),
        down: Z && this.createAppearanceStream(I, Z, g)
      });
    }, l.prototype.updateOnOffWidgetAppearance = function(I, g, C) {
      var A = C.normal, d = C.rollover, Z = C.down;
      this.updateWidgetAppearances(I, {
        normal: this.createAppearanceDict(I, A, g),
        rollover: d && this.createAppearanceDict(I, d, g),
        down: Z && this.createAppearanceDict(I, Z, g)
      });
    }, l.prototype.updateWidgetAppearances = function(I, g) {
      var C = g.normal, A = g.rollover, d = g.down;
      I.setNormalAppearance(C), A ? I.setRolloverAppearance(A) : I.removeRolloverAppearance(), d ? I.setDownAppearance(d) : I.removeDownAppearance();
    }, l.prototype.createAppearanceStream = function(I, g, C) {
      var A, d = this.acroField.dict.context, Z = I.getRectangle(), i = Z.width, B = Z.height, F = C && { Font: (A = {}, A[C.name] = C.ref, A) }, s = d.formXObject(g, {
        Resources: F,
        BBox: d.obj([0, 0, i, B]),
        Matrix: d.obj([1, 0, 0, 1, 0, 0])
      }), c = d.register(s);
      return c;
    }, l.prototype.createImageAppearanceStream = function(I, g, C) {
      var A, d, Z = this.acroField.dict.context, i = I.getRectangle(), B = I.getAppearanceCharacteristics(), F = I.getBorderStyle(), s = (d = F?.getWidth()) !== null && d !== void 0 ? d : 0, c = XC(B?.getRotation()), G = gA(mI(mI({}, i), { rotation: c })), V = WA(i, c), W = g.scaleToFit(V.width - s * 2, V.height - s * 2), R = {
        x: s,
        y: s,
        width: W.width,
        height: W.height,
        //
        rotate: FI(0),
        xSkew: FI(0),
        ySkew: FI(0)
      };
      C === vC.Center ? (R.x += (V.width - s * 2) / 2 - W.width / 2, R.y += (V.height - s * 2) / 2 - W.height / 2) : C === vC.Right && (R.x = V.width - s - W.width, R.y = V.height - s - W.height);
      var U = this.doc.context.addRandomSuffix("Image", 10), n = kI(G, KF(U, R)), m = { XObject: (A = {}, A[U] = g.ref, A) }, e = Z.formXObject(n, {
        Resources: m,
        BBox: Z.obj([0, 0, i.width, i.height]),
        Matrix: Z.obj([1, 0, 0, 1, 0, 0])
      });
      return Z.register(e);
    }, l.prototype.createAppearanceDict = function(I, g, C) {
      var A = this.acroField.dict.context, d = this.createAppearanceStream(I, g.on), Z = this.createAppearanceStream(I, g.off), i = A.obj({});
      return i.set(C, d), i.set(Q.of("Off"), Z), i;
    }, l;
  }()
), Fl = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C, A) {
      var d = l.call(this, g, C, A) || this;
      return u(g, "acroCheckBox", [
        [Od, "PDFAcroCheckBox"]
      ]), d.acroField = g, d;
    }
    return I.prototype.check = function() {
      var g, C = (g = this.acroField.getOnValue()) !== null && g !== void 0 ? g : Q.of("Yes");
      this.markAsDirty(), this.acroField.setValue(C);
    }, I.prototype.uncheck = function() {
      this.markAsDirty(), this.acroField.setValue(Q.of("Off"));
    }, I.prototype.isChecked = function() {
      var g = this.acroField.getOnValue();
      return !!g && g === this.acroField.getValue();
    }, I.prototype.addToPage = function(g, C) {
      var A, d, Z, i, B, F;
      u(g, "page", [[lC, "PDFPage"]]), EA(C), C || (C = {}), "textColor" in C || (C.textColor = EI(0, 0, 0)), "backgroundColor" in C || (C.backgroundColor = EI(1, 1, 1)), "borderColor" in C || (C.borderColor = EI(0, 0, 0)), "borderWidth" in C || (C.borderWidth = 1);
      var s = this.createWidget({
        x: (A = C.x) !== null && A !== void 0 ? A : 0,
        y: (d = C.y) !== null && d !== void 0 ? d : 0,
        width: (Z = C.width) !== null && Z !== void 0 ? Z : 50,
        height: (i = C.height) !== null && i !== void 0 ? i : 50,
        textColor: C.textColor,
        backgroundColor: C.backgroundColor,
        borderColor: C.borderColor,
        borderWidth: (B = C.borderWidth) !== null && B !== void 0 ? B : 0,
        rotate: (F = C.rotate) !== null && F !== void 0 ? F : FI(0),
        hidden: C.hidden,
        page: g.ref
      }), c = this.doc.context.register(s.dict);
      this.acroField.addWidget(c), s.setAppearanceState(Q.of("Off")), this.updateWidgetAppearance(s, Q.of("Yes")), g.node.addAnnot(c);
    }, I.prototype.needsAppearancesUpdate = function() {
      for (var g, C = this.acroField.getWidgets(), A = 0, d = C.length; A < d; A++) {
        var Z = C[A], i = Z.getAppearanceState(), B = (g = Z.getAppearances()) === null || g === void 0 ? void 0 : g.normal;
        if (!(B instanceof tI) || i && !B.has(i))
          return !0;
      }
      return !1;
    }, I.prototype.defaultUpdateAppearances = function() {
      this.updateAppearances();
    }, I.prototype.updateAppearances = function(g) {
      var C;
      f(g, "provider", [Function]);
      for (var A = this.acroField.getWidgets(), d = 0, Z = A.length; d < Z; d++) {
        var i = A[d], B = (C = i.getOnValue()) !== null && C !== void 0 ? C : Q.of("Yes");
        B && this.updateWidgetAppearance(i, B, g);
      }
      this.markAsClean();
    }, I.prototype.updateWidgetAppearance = function(g, C, A) {
      var d = A ?? wb, Z = LA(d(this, g));
      this.updateOnOffWidgetAppearance(g, C, Z);
    }, I.of = function(g, C, A) {
      return new I(g, C, A);
    }, I;
  }(nA)
), Fd = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C, A) {
      var d = l.call(this, g, C, A) || this;
      return u(g, "acroComboBox", [
        [fd, "PDFAcroComboBox"]
      ]), d.acroField = g, d;
    }
    return I.prototype.getOptions = function() {
      for (var g = this.acroField.getOptions(), C = new Array(g.length), A = 0, d = C.length; A < d; A++) {
        var Z = g[A], i = Z.display, B = Z.value;
        C[A] = (i ?? B).decodeText();
      }
      return C;
    }, I.prototype.getSelected = function() {
      for (var g = this.acroField.getValues(), C = new Array(g.length), A = 0, d = g.length; A < d; A++)
        C[A] = g[A].decodeText();
      return C;
    }, I.prototype.setOptions = function(g) {
      u(g, "options", [Array]);
      for (var C = new Array(g.length), A = 0, d = g.length; A < d; A++)
        C[A] = { value: cI.fromText(g[A]) };
      this.acroField.setOptions(C);
    }, I.prototype.addOptions = function(g) {
      u(g, "options", ["string", Array]);
      for (var C = Array.isArray(g) ? g : [g], A = this.acroField.getOptions(), d = new Array(C.length), Z = 0, i = C.length; Z < i; Z++)
        d[Z] = { value: cI.fromText(C[Z]) };
      this.acroField.setOptions(A.concat(d));
    }, I.prototype.select = function(g, C) {
      C === void 0 && (C = !1), u(g, "options", ["string", Array]), u(C, "merge", ["boolean"]);
      var A = Array.isArray(g) ? g : [g], d = this.getOptions(), Z = A.find(function(c) {
        return !d.includes(c);
      });
      Z && this.enableEditing(), this.markAsDirty(), (A.length > 1 || A.length === 1 && C) && this.enableMultiselect();
      for (var i = new Array(A.length), B = 0, F = A.length; B < F; B++)
        i[B] = cI.fromText(A[B]);
      if (C) {
        var s = this.acroField.getValues();
        this.acroField.setValues(s.concat(i));
      } else
        this.acroField.setValues(i);
    }, I.prototype.clear = function() {
      this.markAsDirty(), this.acroField.setValues([]);
    }, I.prototype.setFontSize = function(g) {
      vd(g, "fontSize"), this.acroField.setFontSize(g), this.markAsDirty();
    }, I.prototype.isEditable = function() {
      return this.acroField.hasFlag(vI.Edit);
    }, I.prototype.enableEditing = function() {
      this.acroField.setFlagTo(vI.Edit, !0);
    }, I.prototype.disableEditing = function() {
      this.acroField.setFlagTo(vI.Edit, !1);
    }, I.prototype.isSorted = function() {
      return this.acroField.hasFlag(vI.Sort);
    }, I.prototype.enableSorting = function() {
      this.acroField.setFlagTo(vI.Sort, !0);
    }, I.prototype.disableSorting = function() {
      this.acroField.setFlagTo(vI.Sort, !1);
    }, I.prototype.isMultiselect = function() {
      return this.acroField.hasFlag(vI.MultiSelect);
    }, I.prototype.enableMultiselect = function() {
      this.acroField.setFlagTo(vI.MultiSelect, !0);
    }, I.prototype.disableMultiselect = function() {
      this.acroField.setFlagTo(vI.MultiSelect, !1);
    }, I.prototype.isSpellChecked = function() {
      return !this.acroField.hasFlag(vI.DoNotSpellCheck);
    }, I.prototype.enableSpellChecking = function() {
      this.acroField.setFlagTo(vI.DoNotSpellCheck, !1);
    }, I.prototype.disableSpellChecking = function() {
      this.acroField.setFlagTo(vI.DoNotSpellCheck, !0);
    }, I.prototype.isSelectOnClick = function() {
      return this.acroField.hasFlag(vI.CommitOnSelChange);
    }, I.prototype.enableSelectOnClick = function() {
      this.acroField.setFlagTo(vI.CommitOnSelChange, !0);
    }, I.prototype.disableSelectOnClick = function() {
      this.acroField.setFlagTo(vI.CommitOnSelChange, !1);
    }, I.prototype.addToPage = function(g, C) {
      var A, d, Z, i, B, F, s;
      u(g, "page", [[lC, "PDFPage"]]), EA(C), C || (C = {}), "textColor" in C || (C.textColor = EI(0, 0, 0)), "backgroundColor" in C || (C.backgroundColor = EI(1, 1, 1)), "borderColor" in C || (C.borderColor = EI(0, 0, 0)), "borderWidth" in C || (C.borderWidth = 1);
      var c = this.createWidget({
        x: (A = C.x) !== null && A !== void 0 ? A : 0,
        y: (d = C.y) !== null && d !== void 0 ? d : 0,
        width: (Z = C.width) !== null && Z !== void 0 ? Z : 200,
        height: (i = C.height) !== null && i !== void 0 ? i : 50,
        textColor: C.textColor,
        backgroundColor: C.backgroundColor,
        borderColor: C.borderColor,
        borderWidth: (B = C.borderWidth) !== null && B !== void 0 ? B : 0,
        rotate: (F = C.rotate) !== null && F !== void 0 ? F : FI(0),
        hidden: C.hidden,
        page: g.ref
      }), G = this.doc.context.register(c.dict);
      this.acroField.addWidget(G);
      var V = (s = C.font) !== null && s !== void 0 ? s : this.doc.getForm().getDefaultFont();
      this.updateWidgetAppearance(c, V), g.node.addAnnot(G);
    }, I.prototype.needsAppearancesUpdate = function() {
      var g;
      if (this.isDirty())
        return !0;
      for (var C = this.acroField.getWidgets(), A = 0, d = C.length; A < d; A++) {
        var Z = C[A], i = ((g = Z.getAppearances()) === null || g === void 0 ? void 0 : g.normal) instanceof vg;
        if (!i)
          return !0;
      }
      return !1;
    }, I.prototype.defaultUpdateAppearances = function(g) {
      u(g, "font", [[xg, "PDFFont"]]), this.updateAppearances(g);
    }, I.prototype.updateAppearances = function(g, C) {
      u(g, "font", [[xg, "PDFFont"]]), f(C, "provider", [Function]);
      for (var A = this.acroField.getWidgets(), d = 0, Z = A.length; d < Z; d++) {
        var i = A[d];
        this.updateWidgetAppearance(i, g, C);
      }
      this.markAsClean();
    }, I.prototype.updateWidgetAppearance = function(g, C, A) {
      var d = A ?? Db, Z = LA(d(this, g, C));
      this.updateWidgetAppearanceWithFont(g, C, Z);
    }, I.of = function(g, C, A) {
      return new I(g, C, A);
    }, I;
  }(nA)
), sd = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C, A) {
      var d = l.call(this, g, C, A) || this;
      return u(g, "acroListBox", [[$d, "PDFAcroListBox"]]), d.acroField = g, d;
    }
    return I.prototype.getOptions = function() {
      for (var g = this.acroField.getOptions(), C = new Array(g.length), A = 0, d = C.length; A < d; A++) {
        var Z = g[A], i = Z.display, B = Z.value;
        C[A] = (i ?? B).decodeText();
      }
      return C;
    }, I.prototype.getSelected = function() {
      for (var g = this.acroField.getValues(), C = new Array(g.length), A = 0, d = g.length; A < d; A++)
        C[A] = g[A].decodeText();
      return C;
    }, I.prototype.setOptions = function(g) {
      u(g, "options", [Array]), this.markAsDirty();
      for (var C = new Array(g.length), A = 0, d = g.length; A < d; A++)
        C[A] = { value: cI.fromText(g[A]) };
      this.acroField.setOptions(C);
    }, I.prototype.addOptions = function(g) {
      u(g, "options", ["string", Array]), this.markAsDirty();
      for (var C = Array.isArray(g) ? g : [g], A = this.acroField.getOptions(), d = new Array(C.length), Z = 0, i = C.length; Z < i; Z++)
        d[Z] = { value: cI.fromText(C[Z]) };
      this.acroField.setOptions(A.concat(d));
    }, I.prototype.select = function(g, C) {
      C === void 0 && (C = !1), u(g, "options", ["string", Array]), u(C, "merge", ["boolean"]);
      var A = Array.isArray(g) ? g : [g], d = this.getOptions();
      JV(A, "option", d), this.markAsDirty(), (A.length > 1 || A.length === 1 && C) && this.enableMultiselect();
      for (var Z = new Array(A.length), i = 0, B = A.length; i < B; i++)
        Z[i] = cI.fromText(A[i]);
      if (C) {
        var F = this.acroField.getValues();
        this.acroField.setValues(F.concat(Z));
      } else
        this.acroField.setValues(Z);
    }, I.prototype.clear = function() {
      this.markAsDirty(), this.acroField.setValues([]);
    }, I.prototype.setFontSize = function(g) {
      vd(g, "fontSize"), this.acroField.setFontSize(g), this.markAsDirty();
    }, I.prototype.isSorted = function() {
      return this.acroField.hasFlag(vI.Sort);
    }, I.prototype.enableSorting = function() {
      this.acroField.setFlagTo(vI.Sort, !0);
    }, I.prototype.disableSorting = function() {
      this.acroField.setFlagTo(vI.Sort, !1);
    }, I.prototype.isMultiselect = function() {
      return this.acroField.hasFlag(vI.MultiSelect);
    }, I.prototype.enableMultiselect = function() {
      this.acroField.setFlagTo(vI.MultiSelect, !0);
    }, I.prototype.disableMultiselect = function() {
      this.acroField.setFlagTo(vI.MultiSelect, !1);
    }, I.prototype.isSelectOnClick = function() {
      return this.acroField.hasFlag(vI.CommitOnSelChange);
    }, I.prototype.enableSelectOnClick = function() {
      this.acroField.setFlagTo(vI.CommitOnSelChange, !0);
    }, I.prototype.disableSelectOnClick = function() {
      this.acroField.setFlagTo(vI.CommitOnSelChange, !1);
    }, I.prototype.addToPage = function(g, C) {
      var A, d, Z, i, B, F, s;
      u(g, "page", [[lC, "PDFPage"]]), EA(C), C || (C = {}), "textColor" in C || (C.textColor = EI(0, 0, 0)), "backgroundColor" in C || (C.backgroundColor = EI(1, 1, 1)), "borderColor" in C || (C.borderColor = EI(0, 0, 0)), "borderWidth" in C || (C.borderWidth = 1);
      var c = this.createWidget({
        x: (A = C.x) !== null && A !== void 0 ? A : 0,
        y: (d = C.y) !== null && d !== void 0 ? d : 0,
        width: (Z = C.width) !== null && Z !== void 0 ? Z : 200,
        height: (i = C.height) !== null && i !== void 0 ? i : 100,
        textColor: C.textColor,
        backgroundColor: C.backgroundColor,
        borderColor: C.borderColor,
        borderWidth: (B = C.borderWidth) !== null && B !== void 0 ? B : 0,
        rotate: (F = C.rotate) !== null && F !== void 0 ? F : FI(0),
        hidden: C.hidden,
        page: g.ref
      }), G = this.doc.context.register(c.dict);
      this.acroField.addWidget(G);
      var V = (s = C.font) !== null && s !== void 0 ? s : this.doc.getForm().getDefaultFont();
      this.updateWidgetAppearance(c, V), g.node.addAnnot(G);
    }, I.prototype.needsAppearancesUpdate = function() {
      var g;
      if (this.isDirty())
        return !0;
      for (var C = this.acroField.getWidgets(), A = 0, d = C.length; A < d; A++) {
        var Z = C[A], i = ((g = Z.getAppearances()) === null || g === void 0 ? void 0 : g.normal) instanceof vg;
        if (!i)
          return !0;
      }
      return !1;
    }, I.prototype.defaultUpdateAppearances = function(g) {
      u(g, "font", [[xg, "PDFFont"]]), this.updateAppearances(g);
    }, I.prototype.updateAppearances = function(g, C) {
      u(g, "font", [[xg, "PDFFont"]]), f(C, "provider", [Function]);
      for (var A = this.acroField.getWidgets(), d = 0, Z = A.length; d < Z; d++) {
        var i = A[d];
        this.updateWidgetAppearance(i, g, C);
      }
      this.markAsClean();
    }, I.prototype.updateWidgetAppearance = function(g, C, A) {
      var d = A ?? ub, Z = LA(d(this, g, C));
      this.updateWidgetAppearanceWithFont(g, C, Z);
    }, I.of = function(g, C, A) {
      return new I(g, C, A);
    }, I;
  }(nA)
), sl = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C, A) {
      var d = l.call(this, g, C, A) || this;
      return u(g, "acroRadioButton", [
        [_d, "PDFAcroRadioButton"]
      ]), d.acroField = g, d;
    }
    return I.prototype.getOptions = function() {
      var g = this.acroField.getExportValues();
      if (g) {
        for (var C = new Array(g.length), A = 0, d = g.length; A < d; A++)
          C[A] = g[A].decodeText();
        return C;
      }
      for (var Z = this.acroField.getOnValues(), i = new Array(Z.length), A = 0, d = i.length; A < d; A++)
        i[A] = Z[A].decodeText();
      return i;
    }, I.prototype.getSelected = function() {
      var g = this.acroField.getValue();
      if (g !== Q.of("Off")) {
        var C = this.acroField.getExportValues();
        if (C) {
          for (var A = this.acroField.getOnValues(), d = 0, Z = A.length; d < Z; d++)
            if (A[d] === g)
              return C[d].decodeText();
        }
        return g.decodeText();
      }
    }, I.prototype.select = function(g) {
      u(g, "option", ["string"]);
      var C = this.getOptions();
      LC(g, "option", C), this.markAsDirty();
      var A = this.acroField.getOnValues(), d = this.acroField.getExportValues();
      if (d)
        for (var Z = 0, i = d.length; Z < i; Z++)
          d[Z].decodeText() === g && this.acroField.setValue(A[Z]);
      else
        for (var Z = 0, i = A.length; Z < i; Z++) {
          var B = A[Z];
          B.decodeText() === g && this.acroField.setValue(B);
        }
    }, I.prototype.clear = function() {
      this.markAsDirty(), this.acroField.setValue(Q.of("Off"));
    }, I.prototype.isOffToggleable = function() {
      return !this.acroField.hasFlag(AC.NoToggleToOff);
    }, I.prototype.enableOffToggling = function() {
      this.acroField.setFlagTo(AC.NoToggleToOff, !1);
    }, I.prototype.disableOffToggling = function() {
      this.acroField.setFlagTo(AC.NoToggleToOff, !0);
    }, I.prototype.isMutuallyExclusive = function() {
      return !this.acroField.hasFlag(AC.RadiosInUnison);
    }, I.prototype.enableMutualExclusion = function() {
      this.acroField.setFlagTo(AC.RadiosInUnison, !1);
    }, I.prototype.disableMutualExclusion = function() {
      this.acroField.setFlagTo(AC.RadiosInUnison, !0);
    }, I.prototype.addOptionToPage = function(g, C, A) {
      var d, Z, i, B, F, s, c, G, V;
      u(g, "option", ["string"]), u(C, "page", [[lC, "PDFPage"]]), EA(A);
      var W = this.createWidget({
        x: (d = A?.x) !== null && d !== void 0 ? d : 0,
        y: (Z = A?.y) !== null && Z !== void 0 ? Z : 0,
        width: (i = A?.width) !== null && i !== void 0 ? i : 50,
        height: (B = A?.height) !== null && B !== void 0 ? B : 50,
        textColor: (F = A?.textColor) !== null && F !== void 0 ? F : EI(0, 0, 0),
        backgroundColor: (s = A?.backgroundColor) !== null && s !== void 0 ? s : EI(1, 1, 1),
        borderColor: (c = A?.borderColor) !== null && c !== void 0 ? c : EI(0, 0, 0),
        borderWidth: (G = A?.borderWidth) !== null && G !== void 0 ? G : 1,
        rotate: (V = A?.rotate) !== null && V !== void 0 ? V : FI(0),
        hidden: A?.hidden,
        page: C.ref
      }), R = this.doc.context.register(W.dict), U = this.acroField.addWidgetWithOpt(R, cI.fromText(g), !this.isMutuallyExclusive());
      W.setAppearanceState(Q.of("Off")), this.updateWidgetAppearance(W, U), C.node.addAnnot(R);
    }, I.prototype.needsAppearancesUpdate = function() {
      for (var g, C = this.acroField.getWidgets(), A = 0, d = C.length; A < d; A++) {
        var Z = C[A], i = Z.getAppearanceState(), B = (g = Z.getAppearances()) === null || g === void 0 ? void 0 : g.normal;
        if (!(B instanceof tI) || i && !B.has(i))
          return !0;
      }
      return !1;
    }, I.prototype.defaultUpdateAppearances = function() {
      this.updateAppearances();
    }, I.prototype.updateAppearances = function(g) {
      f(g, "provider", [Function]);
      for (var C = this.acroField.getWidgets(), A = 0, d = C.length; A < d; A++) {
        var Z = C[A], i = Z.getOnValue();
        i && this.updateWidgetAppearance(Z, i, g);
      }
    }, I.prototype.updateWidgetAppearance = function(g, C, A) {
      var d = A ?? Yb, Z = LA(d(this, g));
      this.updateOnOffWidgetAppearance(g, C, Z);
    }, I.of = function(g, C, A) {
      return new I(g, C, A);
    }, I;
  }(nA)
), x0 = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C, A) {
      var d = l.call(this, g, C, A) || this;
      return u(g, "acroSignature", [
        [NZ, "PDFAcroSignature"]
      ]), d.acroField = g, d;
    }
    return I.prototype.needsAppearancesUpdate = function() {
      return !1;
    }, I.of = function(g, C, A) {
      return new I(g, C, A);
    }, I;
  }(nA)
), cd = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C, A) {
      var d = l.call(this, g, C, A) || this;
      return u(g, "acroText", [[Pd, "PDFAcroText"]]), d.acroField = g, d;
    }
    return I.prototype.getText = function() {
      var g = this.acroField.getValue();
      if (!g && this.isRichFormatted())
        throw new nb(this.getName());
      return g?.decodeText();
    }, I.prototype.setText = function(g) {
      f(g, "text", ["string"]);
      var C = this.getMaxLength();
      if (C !== void 0 && g && g.length > C)
        throw new ab(g.length, C, this.getName());
      this.markAsDirty(), this.disableRichFormatting(), g ? this.acroField.setValue(cI.fromText(g)) : this.acroField.removeValue();
    }, I.prototype.getAlignment = function() {
      var g = this.acroField.getQuadding();
      return g === 0 ? Wg.Left : g === 1 ? Wg.Center : g === 2 ? Wg.Right : Wg.Left;
    }, I.prototype.setAlignment = function(g) {
      LC(g, "alignment", Wg), this.markAsDirty(), this.acroField.setQuadding(g);
    }, I.prototype.getMaxLength = function() {
      return this.acroField.getMaxLength();
    }, I.prototype.setMaxLength = function(g) {
      if (GC(g, "maxLength", 0, Number.MAX_SAFE_INTEGER), this.markAsDirty(), g === void 0)
        this.acroField.removeMaxLength();
      else {
        var C = this.getText();
        if (C && C.length > g)
          throw new ob(C.length, g, this.getName());
        this.acroField.setMaxLength(g);
      }
    }, I.prototype.removeMaxLength = function() {
      this.markAsDirty(), this.acroField.removeMaxLength();
    }, I.prototype.setImage = function(g) {
      for (var C = this.getAlignment(), A = C === Wg.Center ? vC.Center : C === Wg.Right ? vC.Right : vC.Left, d = this.acroField.getWidgets(), Z = 0, i = d.length; Z < i; Z++) {
        var B = d[Z], F = this.createImageAppearanceStream(B, g, A);
        this.updateWidgetAppearances(B, { normal: F });
      }
      this.markAsClean();
    }, I.prototype.setFontSize = function(g) {
      vd(g, "fontSize"), this.acroField.setFontSize(g), this.markAsDirty();
    }, I.prototype.isMultiline = function() {
      return this.acroField.hasFlag(gg.Multiline);
    }, I.prototype.enableMultiline = function() {
      this.markAsDirty(), this.acroField.setFlagTo(gg.Multiline, !0);
    }, I.prototype.disableMultiline = function() {
      this.markAsDirty(), this.acroField.setFlagTo(gg.Multiline, !1);
    }, I.prototype.isPassword = function() {
      return this.acroField.hasFlag(gg.Password);
    }, I.prototype.enablePassword = function() {
      this.acroField.setFlagTo(gg.Password, !0);
    }, I.prototype.disablePassword = function() {
      this.acroField.setFlagTo(gg.Password, !1);
    }, I.prototype.isFileSelector = function() {
      return this.acroField.hasFlag(gg.FileSelect);
    }, I.prototype.enableFileSelection = function() {
      this.acroField.setFlagTo(gg.FileSelect, !0);
    }, I.prototype.disableFileSelection = function() {
      this.acroField.setFlagTo(gg.FileSelect, !1);
    }, I.prototype.isSpellChecked = function() {
      return !this.acroField.hasFlag(gg.DoNotSpellCheck);
    }, I.prototype.enableSpellChecking = function() {
      this.acroField.setFlagTo(gg.DoNotSpellCheck, !1);
    }, I.prototype.disableSpellChecking = function() {
      this.acroField.setFlagTo(gg.DoNotSpellCheck, !0);
    }, I.prototype.isScrollable = function() {
      return !this.acroField.hasFlag(gg.DoNotScroll);
    }, I.prototype.enableScrolling = function() {
      this.acroField.setFlagTo(gg.DoNotScroll, !1);
    }, I.prototype.disableScrolling = function() {
      this.acroField.setFlagTo(gg.DoNotScroll, !0);
    }, I.prototype.isCombed = function() {
      return this.acroField.hasFlag(gg.Comb) && !this.isMultiline() && !this.isPassword() && !this.isFileSelector() && this.getMaxLength() !== void 0;
    }, I.prototype.enableCombing = function() {
      if (this.getMaxLength() === void 0) {
        var g = "PDFTextFields must have a max length in order to be combed";
        console.warn(g);
      }
      this.markAsDirty(), this.disableMultiline(), this.disablePassword(), this.disableFileSelection(), this.acroField.setFlagTo(gg.Comb, !0);
    }, I.prototype.disableCombing = function() {
      this.markAsDirty(), this.acroField.setFlagTo(gg.Comb, !1);
    }, I.prototype.isRichFormatted = function() {
      return this.acroField.hasFlag(gg.RichText);
    }, I.prototype.enableRichFormatting = function() {
      this.acroField.setFlagTo(gg.RichText, !0);
    }, I.prototype.disableRichFormatting = function() {
      this.acroField.setFlagTo(gg.RichText, !1);
    }, I.prototype.addToPage = function(g, C) {
      var A, d, Z, i, B, F, s;
      u(g, "page", [[lC, "PDFPage"]]), EA(C), C || (C = {}), "textColor" in C || (C.textColor = EI(0, 0, 0)), "backgroundColor" in C || (C.backgroundColor = EI(1, 1, 1)), "borderColor" in C || (C.borderColor = EI(0, 0, 0)), "borderWidth" in C || (C.borderWidth = 1);
      var c = this.createWidget({
        x: (A = C.x) !== null && A !== void 0 ? A : 0,
        y: (d = C.y) !== null && d !== void 0 ? d : 0,
        width: (Z = C.width) !== null && Z !== void 0 ? Z : 200,
        height: (i = C.height) !== null && i !== void 0 ? i : 50,
        textColor: C.textColor,
        backgroundColor: C.backgroundColor,
        borderColor: C.borderColor,
        borderWidth: (B = C.borderWidth) !== null && B !== void 0 ? B : 0,
        rotate: (F = C.rotate) !== null && F !== void 0 ? F : FI(0),
        hidden: C.hidden,
        page: g.ref
      }), G = this.doc.context.register(c.dict);
      this.acroField.addWidget(G);
      var V = (s = C.font) !== null && s !== void 0 ? s : this.doc.getForm().getDefaultFont();
      this.updateWidgetAppearance(c, V), g.node.addAnnot(G);
    }, I.prototype.needsAppearancesUpdate = function() {
      var g;
      if (this.isDirty())
        return !0;
      for (var C = this.acroField.getWidgets(), A = 0, d = C.length; A < d; A++) {
        var Z = C[A], i = ((g = Z.getAppearances()) === null || g === void 0 ? void 0 : g.normal) instanceof vg;
        if (!i)
          return !0;
      }
      return !1;
    }, I.prototype.defaultUpdateAppearances = function(g) {
      u(g, "font", [[xg, "PDFFont"]]), this.updateAppearances(g);
    }, I.prototype.updateAppearances = function(g, C) {
      u(g, "font", [[xg, "PDFFont"]]), f(C, "provider", [Function]);
      for (var A = this.acroField.getWidgets(), d = 0, Z = A.length; d < Z; d++) {
        var i = A[d];
        this.updateWidgetAppearance(i, g, C);
      }
      this.markAsClean();
    }, I.prototype.updateWidgetAppearance = function(g, C, A) {
      var d = A ?? Jb, Z = LA(d(this, g, C));
      this.updateWidgetAppearanceWithFont(g, C, Z);
    }, I.of = function(g, C, A) {
      return new I(g, C, A);
    }, I;
  }(nA)
), Sd;
(function(l) {
  l.Courier = "Courier", l.CourierBold = "Courier-Bold", l.CourierOblique = "Courier-Oblique", l.CourierBoldOblique = "Courier-BoldOblique", l.Helvetica = "Helvetica", l.HelveticaBold = "Helvetica-Bold", l.HelveticaOblique = "Helvetica-Oblique", l.HelveticaBoldOblique = "Helvetica-BoldOblique", l.TimesRoman = "Times-Roman", l.TimesRomanBold = "Times-Bold", l.TimesRomanItalic = "Times-Italic", l.TimesRomanBoldItalic = "Times-BoldItalic", l.Symbol = "Symbol", l.ZapfDingbats = "ZapfDingbats";
})(Sd || (Sd = {}));
var Mb = (
  /** @class */
  function() {
    function l(I, g) {
      var C = this;
      this.embedDefaultFont = function() {
        return C.doc.embedStandardFont(Sd.Helvetica);
      }, u(I, "acroForm", [[hd, "PDFAcroForm"]]), u(g, "doc", [[MC, "PDFDocument"]]), this.acroForm = I, this.doc = g, this.dirtyFields = /* @__PURE__ */ new Set(), this.defaultFontCache = DC.populatedBy(this.embedDefaultFont);
    }
    return l.prototype.hasXFA = function() {
      return this.acroForm.dict.has(Q.of("XFA"));
    }, l.prototype.deleteXFA = function() {
      this.acroForm.dict.delete(Q.of("XFA"));
    }, l.prototype.getFields = function() {
      for (var I = this.acroForm.getAllFields(), g = [], C = 0, A = I.length; C < A; C++) {
        var d = I[C], Z = d[0], i = d[1], B = yb(Z, i, this.doc);
        B && g.push(B);
      }
      return g;
    }, l.prototype.getFieldMaybe = function(I) {
      u(I, "name", ["string"]);
      for (var g = this.getFields(), C = 0, A = g.length; C < A; C++) {
        var d = g[C];
        if (d.getName() === I)
          return d;
      }
    }, l.prototype.getField = function(I) {
      u(I, "name", ["string"]);
      var g = this.getFieldMaybe(I);
      if (g)
        return g;
      throw new bb(I);
    }, l.prototype.getButton = function(I) {
      u(I, "name", ["string"]);
      var g = this.getField(I);
      if (g instanceof Gd)
        return g;
      throw new ZA(I, Gd, g);
    }, l.prototype.getCheckBox = function(I) {
      u(I, "name", ["string"]);
      var g = this.getField(I);
      if (g instanceof Fl)
        return g;
      throw new ZA(I, Fl, g);
    }, l.prototype.getDropdown = function(I) {
      u(I, "name", ["string"]);
      var g = this.getField(I);
      if (g instanceof Fd)
        return g;
      throw new ZA(I, Fd, g);
    }, l.prototype.getOptionList = function(I) {
      u(I, "name", ["string"]);
      var g = this.getField(I);
      if (g instanceof sd)
        return g;
      throw new ZA(I, sd, g);
    }, l.prototype.getRadioGroup = function(I) {
      u(I, "name", ["string"]);
      var g = this.getField(I);
      if (g instanceof sl)
        return g;
      throw new ZA(I, sl, g);
    }, l.prototype.getSignature = function(I) {
      u(I, "name", ["string"]);
      var g = this.getField(I);
      if (g instanceof x0)
        return g;
      throw new ZA(I, x0, g);
    }, l.prototype.getTextField = function(I) {
      u(I, "name", ["string"]);
      var g = this.getField(I);
      if (g instanceof cd)
        return g;
      throw new ZA(I, cd, g);
    }, l.prototype.createButton = function(I) {
      u(I, "name", ["string"]);
      var g = wA(I), C = this.findOrCreateNonTerminals(g.nonTerminal), A = qd.create(this.doc.context);
      return A.setPartialName(g.terminal), YA(C, [A, A.ref], g.terminal), Gd.of(A, A.ref, this.doc);
    }, l.prototype.createCheckBox = function(I) {
      u(I, "name", ["string"]);
      var g = wA(I), C = this.findOrCreateNonTerminals(g.nonTerminal), A = Od.create(this.doc.context);
      return A.setPartialName(g.terminal), YA(C, [A, A.ref], g.terminal), Fl.of(A, A.ref, this.doc);
    }, l.prototype.createDropdown = function(I) {
      u(I, "name", ["string"]);
      var g = wA(I), C = this.findOrCreateNonTerminals(g.nonTerminal), A = fd.create(this.doc.context);
      return A.setPartialName(g.terminal), YA(C, [A, A.ref], g.terminal), Fd.of(A, A.ref, this.doc);
    }, l.prototype.createOptionList = function(I) {
      u(I, "name", ["string"]);
      var g = wA(I), C = this.findOrCreateNonTerminals(g.nonTerminal), A = $d.create(this.doc.context);
      return A.setPartialName(g.terminal), YA(C, [A, A.ref], g.terminal), sd.of(A, A.ref, this.doc);
    }, l.prototype.createRadioGroup = function(I) {
      u(I, "name", ["string"]);
      var g = wA(I), C = this.findOrCreateNonTerminals(g.nonTerminal), A = _d.create(this.doc.context);
      return A.setPartialName(g.terminal), YA(C, [A, A.ref], g.terminal), sl.of(A, A.ref, this.doc);
    }, l.prototype.createTextField = function(I) {
      u(I, "name", ["string"]);
      var g = wA(I), C = this.findOrCreateNonTerminals(g.nonTerminal), A = Pd.create(this.doc.context);
      return A.setPartialName(g.terminal), YA(C, [A, A.ref], g.terminal), cd.of(A, A.ref, this.doc);
    }, l.prototype.flatten = function(I) {
      I === void 0 && (I = { updateFieldAppearances: !0 }), I.updateFieldAppearances && this.updateFieldAppearances();
      for (var g = this.getFields(), C = 0, A = g.length; C < A; C++) {
        for (var d = g[C], Z = d.acroField.getWidgets(), i = 0, B = Z.length; i < B; i++) {
          var F = Z[i], s = this.findWidgetPage(F), c = this.findWidgetAppearanceRef(d, F), G = s.node.newXObject("FlatWidget", c), V = F.getRectangle(), W = kI([
            bg(),
            ZC(V.x, V.y)
          ], gA(mI(mI({}, V), { rotation: 0 })), [
            yZ(G),
            Rg()
          ]).filter(Boolean);
          s.pushOperators.apply(s, W);
        }
        this.removeField(d);
      }
    }, l.prototype.removeField = function(I) {
      for (var g = I.acroField.getWidgets(), C = /* @__PURE__ */ new Set(), A = 0, d = g.length; A < d; A++) {
        var Z = g[A], i = this.findWidgetAppearanceRef(I, Z), B = this.findWidgetPage(Z);
        C.add(B), B.node.removeAnnot(i);
      }
      C.forEach(function(V) {
        return V.node.removeAnnot(I.ref);
      }), this.acroForm.removeField(I.acroField);
      for (var F = I.acroField.normalizedEntries().Kids, s = F.size(), c = 0; c < s; c++) {
        var G = F.get(c);
        G instanceof OI && this.doc.context.delete(G);
      }
      this.doc.context.delete(I.ref);
    }, l.prototype.updateFieldAppearances = function(I) {
      f(I, "font", [[xg, "PDFFont"]]), I = I ?? this.getDefaultFont();
      for (var g = this.getFields(), C = 0, A = g.length; C < A; C++) {
        var d = g[C];
        d.needsAppearancesUpdate() && d.defaultUpdateAppearances(I);
      }
    }, l.prototype.markFieldAsDirty = function(I) {
      f(I, "fieldRef", [[OI, "PDFRef"]]), this.dirtyFields.add(I);
    }, l.prototype.markFieldAsClean = function(I) {
      f(I, "fieldRef", [[OI, "PDFRef"]]), this.dirtyFields.delete(I);
    }, l.prototype.fieldIsDirty = function(I) {
      return f(I, "fieldRef", [[OI, "PDFRef"]]), this.dirtyFields.has(I);
    }, l.prototype.getDefaultFont = function() {
      return this.defaultFontCache.access();
    }, l.prototype.findWidgetPage = function(I) {
      var g = I.P(), C = this.doc.getPages().find(function(d) {
        return d.ref === g;
      });
      if (C === void 0) {
        var A = this.doc.context.getObjectRef(I.dict);
        if (A === void 0)
          throw new Error("Could not find PDFRef for PDFObject");
        if (C = this.doc.findPageForAnnotationRef(A), C === void 0)
          throw new Error("Could not find page for PDFRef " + A);
      }
      return C;
    }, l.prototype.findWidgetAppearanceRef = function(I, g) {
      var C, A = g.getNormalAppearance();
      if (A instanceof tI && (I instanceof Fl || I instanceof sl)) {
        var d = I.acroField.getValue(), Z = (C = A.get(d)) !== null && C !== void 0 ? C : A.get(Q.of("Off"));
        Z instanceof OI && (A = Z);
      }
      if (!(A instanceof OI)) {
        var i = I.getName();
        throw new Error("Failed to extract appearance ref for: " + i);
      }
      return A;
    }, l.prototype.findOrCreateNonTerminals = function(I) {
      for (var g = [
        this.acroForm
      ], C = 0, A = I.length; C < A; C++) {
        var d = I[C];
        if (!d)
          throw new Rb(d);
        var Z = g[0], i = g[1], B = this.findNonTerminal(d, Z);
        if (B)
          g = B;
        else {
          var F = md.create(this.doc.context);
          F.setPartialName(d), F.setParent(i);
          var s = this.doc.context.register(F.dict);
          Z.addField(s), g = [F, s];
        }
      }
      return g;
    }, l.prototype.findNonTerminal = function(I, g) {
      for (var C = g instanceof hd ? this.acroForm.getFields() : wZ(g.Kids()), A = 0, d = C.length; A < d; A++) {
        var Z = C[A], i = Z[0], B = Z[1];
        if (i.getPartialName() === I) {
          if (i instanceof md)
            return [i, B];
          throw new zF(I);
        }
      }
    }, l.of = function(I, g) {
      return new l(I, g);
    }, l;
  }()
), yb = function(l, I, g) {
  if (l instanceof qd)
    return Gd.of(l, I, g);
  if (l instanceof Od)
    return Fl.of(l, I, g);
  if (l instanceof fd)
    return Fd.of(l, I, g);
  if (l instanceof $d)
    return sd.of(l, I, g);
  if (l instanceof Pd)
    return cd.of(l, I, g);
  if (l instanceof _d)
    return sl.of(l, I, g);
  if (l instanceof NZ)
    return x0.of(l, I, g);
}, wA = function(l) {
  if (l.length === 0)
    throw new Error("PDF field names must not be empty strings");
  for (var I = l.split("."), g = 0, C = I.length; g < C; g++)
    if (I[g] === "")
      throw new Error('Periods in PDF field names must be separated by at least one character: "' + l + '"');
  return I.length === 1 ? { nonTerminal: [], terminal: I[0] } : {
    nonTerminal: I.slice(0, I.length - 1),
    terminal: I[I.length - 1]
  };
}, YA = function(l, I, g) {
  for (var C = l[0], A = l[1], d = I[0], Z = I[1], i = C.normalizedEntries(), B = wZ("Kids" in i ? i.Kids : i.Fields), F = 0, s = B.length; F < s; F++)
    if (B[F][0].getPartialName() === g)
      throw new zF(g);
  C.addField(Z), d.setParent(A);
}, Xb = {
  "4A0": [4767.87, 6740.79],
  "2A0": [3370.39, 4767.87],
  A0: [2383.94, 3370.39],
  A1: [1683.78, 2383.94],
  A2: [1190.55, 1683.78],
  A3: [841.89, 1190.55],
  A4: [595.28, 841.89],
  A5: [419.53, 595.28],
  A6: [297.64, 419.53],
  A7: [209.76, 297.64],
  A8: [147.4, 209.76],
  A9: [104.88, 147.4],
  A10: [73.7, 104.88],
  B0: [2834.65, 4008.19],
  B1: [2004.09, 2834.65],
  B2: [1417.32, 2004.09],
  B3: [1000.63, 1417.32],
  B4: [708.66, 1000.63],
  B5: [498.9, 708.66],
  B6: [354.33, 498.9],
  B7: [249.45, 354.33],
  B8: [175.75, 249.45],
  B9: [124.72, 175.75],
  B10: [87.87, 124.72],
  C0: [2599.37, 3676.54],
  C1: [1836.85, 2599.37],
  C2: [1298.27, 1836.85],
  C3: [918.43, 1298.27],
  C4: [649.13, 918.43],
  C5: [459.21, 649.13],
  C6: [323.15, 459.21],
  C7: [229.61, 323.15],
  C8: [161.57, 229.61],
  C9: [113.39, 161.57],
  C10: [79.37, 113.39],
  RA0: [2437.8, 3458.27],
  RA1: [1729.13, 2437.8],
  RA2: [1218.9, 1729.13],
  RA3: [864.57, 1218.9],
  RA4: [609.45, 864.57],
  SRA0: [2551.18, 3628.35],
  SRA1: [1814.17, 2551.18],
  SRA2: [1275.59, 1814.17],
  SRA3: [907.09, 1275.59],
  SRA4: [637.8, 907.09],
  Executive: [521.86, 756],
  Folio: [612, 936],
  Legal: [612, 1008],
  Letter: [612, 792],
  Tabloid: [792, 1224]
}, O0;
(function(l) {
  l[l.Fastest = 1 / 0] = "Fastest", l[l.Fast = 1500] = "Fast", l[l.Medium = 500] = "Medium", l[l.Slow = 100] = "Slow";
})(O0 || (O0 = {}));
var Hb = (
  /** @class */
  function() {
    function l(I, g, C) {
      this.alreadyEmbedded = !1, this.ref = I, this.doc = g, this.embedder = C;
    }
    return l.prototype.embed = function() {
      return NI(this, void 0, void 0, function() {
        var I, g, C, A, d;
        return wI(this, function(Z) {
          switch (Z.label) {
            case 0:
              return this.alreadyEmbedded ? [3, 2] : [4, this.embedder.embedIntoContext(this.doc.context, this.ref)];
            case 1:
              I = Z.sent(), this.doc.catalog.has(Q.of("Names")) || this.doc.catalog.set(Q.of("Names"), this.doc.context.obj({})), g = this.doc.catalog.lookup(Q.of("Names"), tI), g.has(Q.of("EmbeddedFiles")) || g.set(Q.of("EmbeddedFiles"), this.doc.context.obj({})), C = g.lookup(Q.of("EmbeddedFiles"), tI), C.has(Q.of("Names")) || C.set(Q.of("Names"), this.doc.context.obj([])), A = C.lookup(Q.of("Names"), LI), A.push(cI.fromText(this.embedder.fileName)), A.push(I), this.doc.catalog.has(Q.of("AF")) || this.doc.catalog.set(Q.of("AF"), this.doc.context.obj([])), d = this.doc.catalog.lookup(Q.of("AF"), LI), d.push(I), this.alreadyEmbedded = !0, Z.label = 2;
            case 2:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, l.of = function(I, g, C) {
      return new l(I, g, C);
    }, l;
  }()
), pb = (
  /** @class */
  function() {
    function l(I, g, C) {
      this.alreadyEmbedded = !1, this.ref = I, this.doc = g, this.embedder = C;
    }
    return l.prototype.embed = function() {
      return NI(this, void 0, void 0, function() {
        var I, g, C, A, d, Z, i;
        return wI(this, function(B) {
          switch (B.label) {
            case 0:
              return this.alreadyEmbedded ? [3, 2] : (I = this.doc, g = I.catalog, C = I.context, [4, this.embedder.embedIntoContext(this.doc.context, this.ref)]);
            case 1:
              A = B.sent(), g.has(Q.of("Names")) || g.set(Q.of("Names"), C.obj({})), d = g.lookup(Q.of("Names"), tI), d.has(Q.of("JavaScript")) || d.set(Q.of("JavaScript"), C.obj({})), Z = d.lookup(Q.of("JavaScript"), tI), Z.has(Q.of("Names")) || Z.set(Q.of("Names"), C.obj([])), i = Z.lookup(Q.of("Names"), LI), i.push(cI.fromText(this.embedder.scriptName)), i.push(A), this.alreadyEmbedded = !0, B.label = 2;
            case 2:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, l.of = function(I, g, C) {
      return new l(I, g, C);
    }, l;
  }()
), kb = (
  /** @class */
  function() {
    function l(I, g) {
      this.script = I, this.scriptName = g;
    }
    return l.for = function(I, g) {
      return new l(I, g);
    }, l.prototype.embedIntoContext = function(I, g) {
      return NI(this, void 0, void 0, function() {
        var C;
        return wI(this, function(A) {
          return C = I.obj({
            Type: "Action",
            S: "JavaScript",
            JS: cI.fromText(this.script)
          }), g ? (I.assign(g, C), [2, g]) : [2, I.register(C)];
        });
      });
    }, l;
  }()
), MC = (
  /** @class */
  function() {
    function l(I, g, C) {
      var A = this;
      if (this.defaultWordBreaks = [" "], this.computePages = function() {
        var d = [];
        return A.catalog.Pages().traverse(function(Z, i) {
          if (Z instanceof uC) {
            var B = A.pageMap.get(Z);
            B || (B = lC.of(Z, i, A), A.pageMap.set(Z, B)), d.push(B);
          }
        }), d;
      }, this.getOrCreateForm = function() {
        var d = A.catalog.getOrCreateAcroForm();
        return Mb.of(d, A);
      }, u(I, "context", [[z0, "PDFContext"]]), u(g, "ignoreEncryption", ["boolean"]), this.context = I, this.catalog = I.lookup(I.trailerInfo.Root), this.isEncrypted = !!I.lookup(I.trailerInfo.Encrypt), this.pageCache = DC.populatedBy(this.computePages), this.pageMap = /* @__PURE__ */ new Map(), this.formCache = DC.populatedBy(this.getOrCreateForm), this.fonts = [], this.images = [], this.embeddedPages = [], this.embeddedFiles = [], this.javaScripts = [], !g && this.isEncrypted)
        throw new cb();
      C && this.updateInfoDict();
    }
    return l.load = function(I, g) {
      return g === void 0 && (g = {}), NI(this, void 0, void 0, function() {
        var C, A, d, Z, i, B, F, s, c, G, V, W;
        return wI(this, function(R) {
          switch (R.label) {
            case 0:
              return C = g.ignoreEncryption, A = C === void 0 ? !1 : C, d = g.parseSpeed, Z = d === void 0 ? O0.Slow : d, i = g.throwOnInvalidObject, B = i === void 0 ? !1 : i, F = g.updateMetadata, s = F === void 0 ? !0 : F, c = g.capNumbers, G = c === void 0 ? !1 : c, u(I, "pdf", ["string", Uint8Array, ArrayBuffer]), u(A, "ignoreEncryption", ["boolean"]), u(Z, "parseSpeed", ["number"]), u(B, "throwOnInvalidObject", ["boolean"]), V = PA(I), [4, rW.forBytesWithOptions(V, Z, B, G).parseDocument()];
            case 1:
              return W = R.sent(), [2, new l(W, A, s)];
          }
        });
      });
    }, l.create = function(I) {
      return I === void 0 && (I = {}), NI(this, void 0, void 0, function() {
        var g, C, A, d, Z, i;
        return wI(this, function(B) {
          return g = I.updateMetadata, C = g === void 0 ? !0 : g, A = z0.create(), d = hF.withContext(A), Z = A.register(d), i = mF.withContextAndPages(A, Z), A.trailerInfo.Root = A.register(i), [2, new l(A, !1, C)];
        });
      });
    }, l.prototype.registerFontkit = function(I) {
      this.fontkit = I;
    }, l.prototype.getForm = function() {
      var I = this.formCache.access();
      return I.hasXFA() && (console.warn("Removing XFA form data as pdf-lib does not support reading or writing XFA"), I.deleteXFA()), I;
    }, l.prototype.getTitle = function() {
      var I = this.getInfoDict().lookup(Q.Title);
      if (I)
        return KC(I), I.decodeText();
    }, l.prototype.getAuthor = function() {
      var I = this.getInfoDict().lookup(Q.Author);
      if (I)
        return KC(I), I.decodeText();
    }, l.prototype.getSubject = function() {
      var I = this.getInfoDict().lookup(Q.Subject);
      if (I)
        return KC(I), I.decodeText();
    }, l.prototype.getKeywords = function() {
      var I = this.getInfoDict().lookup(Q.Keywords);
      if (I)
        return KC(I), I.decodeText();
    }, l.prototype.getCreator = function() {
      var I = this.getInfoDict().lookup(Q.Creator);
      if (I)
        return KC(I), I.decodeText();
    }, l.prototype.getProducer = function() {
      var I = this.getInfoDict().lookup(Q.Producer);
      if (I)
        return KC(I), I.decodeText();
    }, l.prototype.getCreationDate = function() {
      var I = this.getInfoDict().lookup(Q.CreationDate);
      if (I)
        return KC(I), I.decodeDate();
    }, l.prototype.getModificationDate = function() {
      var I = this.getInfoDict().lookup(Q.ModDate);
      if (I)
        return KC(I), I.decodeDate();
    }, l.prototype.setTitle = function(I, g) {
      u(I, "title", ["string"]);
      var C = Q.of("Title");
      if (this.getInfoDict().set(C, cI.fromText(I)), g?.showInWindowTitleBar) {
        var A = this.catalog.getOrCreateViewerPreferences();
        A.setDisplayDocTitle(!0);
      }
    }, l.prototype.setAuthor = function(I) {
      u(I, "author", ["string"]);
      var g = Q.of("Author");
      this.getInfoDict().set(g, cI.fromText(I));
    }, l.prototype.setSubject = function(I) {
      u(I, "author", ["string"]);
      var g = Q.of("Subject");
      this.getInfoDict().set(g, cI.fromText(I));
    }, l.prototype.setKeywords = function(I) {
      u(I, "keywords", [Array]);
      var g = Q.of("Keywords");
      this.getInfoDict().set(g, cI.fromText(I.join(" ")));
    }, l.prototype.setCreator = function(I) {
      u(I, "creator", ["string"]);
      var g = Q.of("Creator");
      this.getInfoDict().set(g, cI.fromText(I));
    }, l.prototype.setProducer = function(I) {
      u(I, "creator", ["string"]);
      var g = Q.of("Producer");
      this.getInfoDict().set(g, cI.fromText(I));
    }, l.prototype.setLanguage = function(I) {
      u(I, "language", ["string"]);
      var g = Q.of("Lang");
      this.catalog.set(g, xI.of(I));
    }, l.prototype.setCreationDate = function(I) {
      u(I, "creationDate", [[Date, "Date"]]);
      var g = Q.of("CreationDate");
      this.getInfoDict().set(g, xI.fromDate(I));
    }, l.prototype.setModificationDate = function(I) {
      u(I, "modificationDate", [[Date, "Date"]]);
      var g = Q.of("ModDate");
      this.getInfoDict().set(g, xI.fromDate(I));
    }, l.prototype.getPageCount = function() {
      return this.pageCount === void 0 && (this.pageCount = this.getPages().length), this.pageCount;
    }, l.prototype.getPages = function() {
      return this.pageCache.access();
    }, l.prototype.getPage = function(I) {
      var g = this.getPages();
      return Eg(I, "index", 0, g.length - 1), g[I];
    }, l.prototype.getPageIndices = function() {
      return rG(0, this.getPageCount());
    }, l.prototype.removePage = function(I) {
      var g = this.getPageCount();
      if (this.pageCount === 0)
        throw new Wb();
      Eg(I, "index", 0, g - 1), this.catalog.removeLeafNode(I), this.pageCount = g - 1;
    }, l.prototype.addPage = function(I) {
      return u(I, "page", ["undefined", [lC, "PDFPage"], Array]), this.insertPage(this.getPageCount(), I);
    }, l.prototype.insertPage = function(I, g) {
      var C = this.getPageCount();
      if (Eg(I, "index", 0, C), u(g, "page", ["undefined", [lC, "PDFPage"], Array]), !g || Array.isArray(g)) {
        var A = Array.isArray(g) ? g : Xb.A4;
        g = lC.create(this), g.setSize.apply(g, A);
      } else if (g.doc !== this)
        throw new Vb();
      var d = this.catalog.insertLeafNode(g.ref, I);
      return g.node.setParent(d), this.pageMap.set(g.node, g), this.pageCache.invalidate(), this.pageCount = C + 1, g;
    }, l.prototype.copyPages = function(I, g) {
      return NI(this, void 0, void 0, function() {
        var C, A, d, Z, i, B, F, s;
        return wI(this, function(c) {
          switch (c.label) {
            case 0:
              return u(I, "srcDoc", [[l, "PDFDocument"]]), u(g, "indices", [Array]), [4, I.flush()];
            case 1:
              for (c.sent(), C = ji.for(I.context, this.context), A = I.getPages(), d = new Array(g.length), Z = 0, i = g.length; Z < i; Z++)
                B = A[g[Z]], F = C.copy(B.node), s = this.context.register(F), d[Z] = lC.of(F, s, this);
              return [2, d];
          }
        });
      });
    }, l.prototype.copy = function() {
      return NI(this, void 0, void 0, function() {
        var I, g, C, A;
        return wI(this, function(d) {
          switch (d.label) {
            case 0:
              return [4, l.create()];
            case 1:
              return I = d.sent(), [4, I.copyPages(this, this.getPageIndices())];
            case 2:
              for (g = d.sent(), C = 0, A = g.length; C < A; C++)
                I.addPage(g[C]);
              return this.getAuthor() !== void 0 && I.setAuthor(this.getAuthor()), this.getCreationDate() !== void 0 && I.setCreationDate(this.getCreationDate()), this.getCreator() !== void 0 && I.setCreator(this.getCreator()), this.getModificationDate() !== void 0 && I.setModificationDate(this.getModificationDate()), this.getProducer() !== void 0 && I.setProducer(this.getProducer()), this.getSubject() !== void 0 && I.setSubject(this.getSubject()), this.getTitle() !== void 0 && I.setTitle(this.getTitle()), I.defaultWordBreaks = this.defaultWordBreaks, [2, I];
          }
        });
      });
    }, l.prototype.addJavaScript = function(I, g) {
      u(I, "name", ["string"]), u(g, "script", ["string"]);
      var C = kb.for(g, I), A = this.context.nextRef(), d = pb.of(A, this, C);
      this.javaScripts.push(d);
    }, l.prototype.attach = function(I, g, C) {
      return C === void 0 && (C = {}), NI(this, void 0, void 0, function() {
        var A, d, Z, i;
        return wI(this, function(B) {
          return u(I, "attachment", ["string", Uint8Array, ArrayBuffer]), u(g, "name", ["string"]), f(C.mimeType, "mimeType", ["string"]), f(C.description, "description", ["string"]), f(C.creationDate, "options.creationDate", [Date]), f(C.modificationDate, "options.modificationDate", [
            Date
          ]), gC(C.afRelationship, "options.afRelationship", T0), A = PA(I), d = GW.for(A, g, C), Z = this.context.nextRef(), i = Hb.of(Z, this, d), this.embeddedFiles.push(i), [
            2
            /*return*/
          ];
        });
      });
    }, l.prototype.embedFont = function(I, g) {
      return g === void 0 && (g = {}), NI(this, void 0, void 0, function() {
        var C, A, d, Z, i, B, F, s, c, G;
        return wI(this, function(V) {
          switch (V.label) {
            case 0:
              return C = g.subset, A = C === void 0 ? !1 : C, d = g.customName, Z = g.features, u(I, "font", ["string", Uint8Array, ArrayBuffer]), u(A, "subset", ["boolean"]), Hi(I) ? (i = od.for(I, d), [3, 7]) : [3, 1];
            case 1:
              return TG(I) ? (B = PA(I), F = this.assertFontkit(), A ? [4, cW.for(F, B, d, Z)] : [3, 3]) : [3, 6];
            case 2:
              return s = V.sent(), [3, 5];
            case 3:
              return [4, QZ.for(F, B, d, Z)];
            case 4:
              s = V.sent(), V.label = 5;
            case 5:
              return i = s, [3, 7];
            case 6:
              throw new TypeError("`font` must be one of `StandardFonts | string | Uint8Array | ArrayBuffer`");
            case 7:
              return c = this.context.nextRef(), G = xg.of(c, this, i), this.fonts.push(G), [2, G];
          }
        });
      });
    }, l.prototype.embedStandardFont = function(I, g) {
      if (u(I, "font", ["string"]), !Hi(I))
        throw new TypeError("`font` must be one of type `StandardFonts`");
      var C = od.for(I, g), A = this.context.nextRef(), d = xg.of(A, this, C);
      return this.fonts.push(d), d;
    }, l.prototype.embedJpg = function(I) {
      return NI(this, void 0, void 0, function() {
        var g, C, A, d;
        return wI(this, function(Z) {
          switch (Z.label) {
            case 0:
              return u(I, "jpg", ["string", Uint8Array, ArrayBuffer]), g = PA(I), [4, VF.for(g)];
            case 1:
              return C = Z.sent(), A = this.context.nextRef(), d = v0.of(A, this, C), this.images.push(d), [2, d];
          }
        });
      });
    }, l.prototype.embedPng = function(I) {
      return NI(this, void 0, void 0, function() {
        var g, C, A, d;
        return wI(this, function(Z) {
          switch (Z.label) {
            case 0:
              return u(I, "png", ["string", Uint8Array, ArrayBuffer]), g = PA(I), [4, WF.for(g)];
            case 1:
              return C = Z.sent(), A = this.context.nextRef(), d = v0.of(A, this, C), this.images.push(d), [2, d];
          }
        });
      });
    }, l.prototype.embedPdf = function(I, g) {
      return g === void 0 && (g = [0]), NI(this, void 0, void 0, function() {
        var C, A, d;
        return wI(this, function(Z) {
          switch (Z.label) {
            case 0:
              return u(I, "pdf", [
                "string",
                Uint8Array,
                ArrayBuffer,
                [l, "PDFDocument"]
              ]), u(g, "indices", [Array]), I instanceof l ? (A = I, [3, 3]) : [3, 1];
            case 1:
              return [4, l.load(I)];
            case 2:
              A = Z.sent(), Z.label = 3;
            case 3:
              return C = A, d = zG(C.getPages(), g), [2, this.embedPages(d)];
          }
        });
      });
    }, l.prototype.embedPage = function(I, g, C) {
      return NI(this, void 0, void 0, function() {
        var A;
        return wI(this, function(d) {
          switch (d.label) {
            case 0:
              return u(I, "page", [[lC, "PDFPage"]]), [4, this.embedPages([I], [g], [C])];
            case 1:
              return A = d.sent()[0], [2, A];
          }
        });
      });
    }, l.prototype.embedPages = function(I, g, C) {
      return g === void 0 && (g = []), C === void 0 && (C = []), NI(this, void 0, void 0, function() {
        var F, s, A, d, Z, i, B, F, s, c, G, V, W, R, U;
        return wI(this, function(n) {
          switch (n.label) {
            case 0:
              if (I.length === 0)
                return [2, []];
              for (F = 0, s = I.length - 1; F < s; F++)
                if (A = I[F], d = I[F + 1], A.node.context !== d.node.context)
                  throw new kV();
              Z = I[0].node.context, i = Z === this.context ? function(m) {
                return m;
              } : ji.for(Z, this.context).copy, B = new Array(I.length), F = 0, s = I.length, n.label = 1;
            case 1:
              return F < s ? (c = i(I[F].node), G = g[F], V = C[F], [4, nF.for(c, G, V)]) : [3, 4];
            case 2:
              W = n.sent(), R = this.context.nextRef(), B[F] = vF.of(R, this, W), n.label = 3;
            case 3:
              return F++, [3, 1];
            case 4:
              return (U = this.embeddedPages).push.apply(U, B), [2, B];
          }
        });
      });
    }, l.prototype.flush = function() {
      return NI(this, void 0, void 0, function() {
        return wI(this, function(I) {
          switch (I.label) {
            case 0:
              return [4, this.embedAll(this.fonts)];
            case 1:
              return I.sent(), [4, this.embedAll(this.images)];
            case 2:
              return I.sent(), [4, this.embedAll(this.embeddedPages)];
            case 3:
              return I.sent(), [4, this.embedAll(this.embeddedFiles)];
            case 4:
              return I.sent(), [4, this.embedAll(this.javaScripts)];
            case 5:
              return I.sent(), [
                2
                /*return*/
              ];
          }
        });
      });
    }, l.prototype.save = function(I) {
      return I === void 0 && (I = {}), NI(this, void 0, void 0, function() {
        var g, C, A, d, Z, i, B, F, s, c;
        return wI(this, function(G) {
          switch (G.label) {
            case 0:
              return g = I.useObjectStreams, C = g === void 0 ? !0 : g, A = I.addDefaultPage, d = A === void 0 ? !0 : A, Z = I.objectsPerTick, i = Z === void 0 ? 50 : Z, B = I.updateFieldAppearances, F = B === void 0 ? !0 : B, u(C, "useObjectStreams", ["boolean"]), u(d, "addDefaultPage", ["boolean"]), u(i, "objectsPerTick", ["number"]), u(F, "updateFieldAppearances", ["boolean"]), d && this.getPageCount() === 0 && this.addPage(), F && (s = this.formCache.getValue(), s && s.updateFieldAppearances()), [4, this.flush()];
            case 1:
              return G.sent(), c = C ? dW : cF, [2, c.forContext(this.context, i).serializeToBuffer()];
          }
        });
      });
    }, l.prototype.saveAsBase64 = function(I) {
      return I === void 0 && (I = {}), NI(this, void 0, void 0, function() {
        var g, C, A, d, Z;
        return wI(this, function(i) {
          switch (i.label) {
            case 0:
              return g = I.dataUri, C = g === void 0 ? !1 : g, A = hG(I, ["dataUri"]), u(C, "dataUri", ["boolean"]), [4, this.save(A)];
            case 1:
              return d = i.sent(), Z = QG(d), [2, C ? "data:application/pdf;base64," + Z : Z];
          }
        });
      });
    }, l.prototype.findPageForAnnotationRef = function(I) {
      for (var g = this.getPages(), C = 0, A = g.length; C < A; C++) {
        var d = g[C], Z = d.node.Annots();
        if (Z?.indexOf(I) !== void 0)
          return d;
      }
    }, l.prototype.embedAll = function(I) {
      return NI(this, void 0, void 0, function() {
        var g, C;
        return wI(this, function(A) {
          switch (A.label) {
            case 0:
              g = 0, C = I.length, A.label = 1;
            case 1:
              return g < C ? [4, I[g].embed()] : [3, 4];
            case 2:
              A.sent(), A.label = 3;
            case 3:
              return g++, [3, 1];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    }, l.prototype.updateInfoDict = function() {
      var I = "pdf-lib (https://github.com/Hopding/pdf-lib)", g = /* @__PURE__ */ new Date(), C = this.getInfoDict();
      this.setProducer(I), this.setModificationDate(g), C.get(Q.of("Creator")) || this.setCreator(I), C.get(Q.of("CreationDate")) || this.setCreationDate(g);
    }, l.prototype.getInfoDict = function() {
      var I = this.context.lookup(this.context.trailerInfo.Info);
      if (I instanceof tI)
        return I;
      var g = this.context.obj({});
      return this.context.trailerInfo.Info = this.context.register(g), g;
    }, l.prototype.assertFontkit = function() {
      if (!this.fontkit)
        throw new Gb();
      return this.fontkit;
    }, l;
  }()
);
function KC(l) {
  if (!(l instanceof cI) && !(l instanceof xI))
    throw new Ud([cI, xI], l);
}
var SC;
(function(l) {
  l.Normal = "Normal", l.Multiply = "Multiply", l.Screen = "Screen", l.Overlay = "Overlay", l.Darken = "Darken", l.Lighten = "Lighten", l.ColorDodge = "ColorDodge", l.ColorBurn = "ColorBurn", l.HardLight = "HardLight", l.SoftLight = "SoftLight", l.Difference = "Difference", l.Exclusion = "Exclusion";
})(SC || (SC = {}));
var lC = (
  /** @class */
  function() {
    function l(I, g, C) {
      this.fontSize = 24, this.fontColor = EI(0, 0, 0), this.lineHeight = 24, this.x = 0, this.y = 0, u(I, "leafNode", [[uC, "PDFPageLeaf"]]), u(g, "ref", [[OI, "PDFRef"]]), u(C, "doc", [[MC, "PDFDocument"]]), this.node = I, this.ref = g, this.doc = C;
    }
    return l.prototype.setRotation = function(I) {
      var g = YF(I);
      ZF(g, "degreesAngle", 90), this.node.set(Q.of("Rotate"), this.doc.context.obj(g));
    }, l.prototype.getRotation = function() {
      var I = this.node.Rotate();
      return FI(I ? I.asNumber() : 0);
    }, l.prototype.setSize = function(I, g) {
      u(I, "width", ["number"]), u(g, "height", ["number"]);
      var C = this.getMediaBox();
      this.setMediaBox(C.x, C.y, I, g);
      var A = this.getCropBox(), d = this.getBleedBox(), Z = this.getTrimBox(), i = this.getArtBox(), B = this.node.CropBox(), F = this.node.BleedBox(), s = this.node.TrimBox(), c = this.node.ArtBox();
      B && ql(A, C) && this.setCropBox(C.x, C.y, I, g), F && ql(d, C) && this.setBleedBox(C.x, C.y, I, g), s && ql(Z, C) && this.setTrimBox(C.x, C.y, I, g), c && ql(i, C) && this.setArtBox(C.x, C.y, I, g);
    }, l.prototype.setWidth = function(I) {
      u(I, "width", ["number"]), this.setSize(I, this.getSize().height);
    }, l.prototype.setHeight = function(I) {
      u(I, "height", ["number"]), this.setSize(this.getSize().width, I);
    }, l.prototype.setMediaBox = function(I, g, C, A) {
      u(I, "x", ["number"]), u(g, "y", ["number"]), u(C, "width", ["number"]), u(A, "height", ["number"]);
      var d = this.doc.context.obj([I, g, I + C, g + A]);
      this.node.set(Q.MediaBox, d);
    }, l.prototype.setCropBox = function(I, g, C, A) {
      u(I, "x", ["number"]), u(g, "y", ["number"]), u(C, "width", ["number"]), u(A, "height", ["number"]);
      var d = this.doc.context.obj([I, g, I + C, g + A]);
      this.node.set(Q.CropBox, d);
    }, l.prototype.setBleedBox = function(I, g, C, A) {
      u(I, "x", ["number"]), u(g, "y", ["number"]), u(C, "width", ["number"]), u(A, "height", ["number"]);
      var d = this.doc.context.obj([I, g, I + C, g + A]);
      this.node.set(Q.BleedBox, d);
    }, l.prototype.setTrimBox = function(I, g, C, A) {
      u(I, "x", ["number"]), u(g, "y", ["number"]), u(C, "width", ["number"]), u(A, "height", ["number"]);
      var d = this.doc.context.obj([I, g, I + C, g + A]);
      this.node.set(Q.TrimBox, d);
    }, l.prototype.setArtBox = function(I, g, C, A) {
      u(I, "x", ["number"]), u(g, "y", ["number"]), u(C, "width", ["number"]), u(A, "height", ["number"]);
      var d = this.doc.context.obj([I, g, I + C, g + A]);
      this.node.set(Q.ArtBox, d);
    }, l.prototype.getSize = function() {
      var I = this.getMediaBox(), g = I.width, C = I.height;
      return { width: g, height: C };
    }, l.prototype.getWidth = function() {
      return this.getSize().width;
    }, l.prototype.getHeight = function() {
      return this.getSize().height;
    }, l.prototype.getMediaBox = function() {
      var I = this.node.MediaBox();
      return I.asRectangle();
    }, l.prototype.getCropBox = function() {
      var I, g = this.node.CropBox();
      return (I = g?.asRectangle()) !== null && I !== void 0 ? I : this.getMediaBox();
    }, l.prototype.getBleedBox = function() {
      var I, g = this.node.BleedBox();
      return (I = g?.asRectangle()) !== null && I !== void 0 ? I : this.getCropBox();
    }, l.prototype.getTrimBox = function() {
      var I, g = this.node.TrimBox();
      return (I = g?.asRectangle()) !== null && I !== void 0 ? I : this.getCropBox();
    }, l.prototype.getArtBox = function() {
      var I, g = this.node.ArtBox();
      return (I = g?.asRectangle()) !== null && I !== void 0 ? I : this.getCropBox();
    }, l.prototype.translateContent = function(I, g) {
      u(I, "x", ["number"]), u(g, "y", ["number"]), this.node.normalize(), this.getContentStream();
      var C = this.createContentStream(bg(), ZC(I, g)), A = this.doc.context.register(C), d = this.createContentStream(Rg()), Z = this.doc.context.register(d);
      this.node.wrapContentStreams(A, Z);
    }, l.prototype.scale = function(I, g) {
      u(I, "x", ["number"]), u(g, "y", ["number"]), this.setSize(this.getWidth() * I, this.getHeight() * g), this.scaleContent(I, g), this.scaleAnnotations(I, g);
    }, l.prototype.scaleContent = function(I, g) {
      u(I, "x", ["number"]), u(g, "y", ["number"]), this.node.normalize(), this.getContentStream();
      var C = this.createContentStream(bg(), Jl(I, g)), A = this.doc.context.register(C), d = this.createContentStream(Rg()), Z = this.doc.context.register(d);
      this.node.wrapContentStreams(A, Z);
    }, l.prototype.scaleAnnotations = function(I, g) {
      u(I, "x", ["number"]), u(g, "y", ["number"]);
      var C = this.node.Annots();
      if (C)
        for (var A = 0; A < C.size(); A++) {
          var d = C.lookup(A);
          d instanceof tI && this.scaleAnnot(d, I, g);
        }
    }, l.prototype.resetPosition = function() {
      this.getContentStream(!1), this.x = 0, this.y = 0;
    }, l.prototype.setFont = function(I) {
      u(I, "font", [[xg, "PDFFont"]]), this.font = I, this.fontKey = this.node.newFontDictionary(this.font.name, this.font.ref);
    }, l.prototype.setFontSize = function(I) {
      u(I, "fontSize", ["number"]), this.fontSize = I;
    }, l.prototype.setFontColor = function(I) {
      u(I, "fontColor", [[Object, "Color"]]), this.fontColor = I;
    }, l.prototype.setLineHeight = function(I) {
      u(I, "lineHeight", ["number"]), this.lineHeight = I;
    }, l.prototype.getPosition = function() {
      return { x: this.x, y: this.y };
    }, l.prototype.getX = function() {
      return this.x;
    }, l.prototype.getY = function() {
      return this.y;
    }, l.prototype.moveTo = function(I, g) {
      u(I, "x", ["number"]), u(g, "y", ["number"]), this.x = I, this.y = g;
    }, l.prototype.moveDown = function(I) {
      u(I, "yDecrease", ["number"]), this.y -= I;
    }, l.prototype.moveUp = function(I) {
      u(I, "yIncrease", ["number"]), this.y += I;
    }, l.prototype.moveLeft = function(I) {
      u(I, "xDecrease", ["number"]), this.x -= I;
    }, l.prototype.moveRight = function(I) {
      u(I, "xIncrease", ["number"]), this.x += I;
    }, l.prototype.pushOperators = function() {
      for (var I = [], g = 0; g < arguments.length; g++)
        I[g] = arguments[g];
      dF(I, "operator", [[HI, "PDFOperator"]]);
      var C = this.getContentStream();
      C.push.apply(C, I);
    }, l.prototype.drawText = function(I, g) {
      var C, A, d, Z, i, B, F;
      g === void 0 && (g = {}), u(I, "text", ["string"]), f(g.color, "options.color", [[Object, "Color"]]), GC(g.opacity, "opacity.opacity", 0, 1), f(g.font, "options.font", [[xg, "PDFFont"]]), f(g.size, "options.size", ["number"]), f(g.rotate, "options.rotate", [[Object, "Rotation"]]), f(g.xSkew, "options.xSkew", [[Object, "Rotation"]]), f(g.ySkew, "options.ySkew", [[Object, "Rotation"]]), f(g.x, "options.x", ["number"]), f(g.y, "options.y", ["number"]), f(g.lineHeight, "options.lineHeight", ["number"]), f(g.maxWidth, "options.maxWidth", ["number"]), f(g.wordBreaks, "options.wordBreaks", [Array]), gC(g.blendMode, "options.blendMode", SC);
      for (var s = this.setOrEmbedFont(g.font), c = s.oldFont, G = s.newFont, V = s.newFontKey, W = g.size || this.fontSize, R = g.wordBreaks || this.doc.defaultWordBreaks, U = function(Y) {
        return G.widthOfTextAtSize(Y, W);
      }, n = g.maxWidth === void 0 ? TB(Hl(I)) : MG(I, R, g.maxWidth, U), m = new Array(n.length), e = 0, N = n.length; e < N; e++)
        m[e] = G.encodeText(n[e]);
      var w = this.maybeEmbedGraphicsState({
        opacity: g.opacity,
        blendMode: g.blendMode
      }), S = this.getContentStream();
      S.push.apply(S, Ab(m, {
        color: (C = g.color) !== null && C !== void 0 ? C : this.fontColor,
        font: V,
        size: W,
        rotate: (A = g.rotate) !== null && A !== void 0 ? A : FI(0),
        xSkew: (d = g.xSkew) !== null && d !== void 0 ? d : FI(0),
        ySkew: (Z = g.ySkew) !== null && Z !== void 0 ? Z : FI(0),
        x: (i = g.x) !== null && i !== void 0 ? i : this.x,
        y: (B = g.y) !== null && B !== void 0 ? B : this.y,
        lineHeight: (F = g.lineHeight) !== null && F !== void 0 ? F : this.lineHeight,
        graphicsState: w
      })), g.font && (c ? this.setFont(c) : this.resetFont());
    }, l.prototype.drawImage = function(I, g) {
      var C, A, d, Z, i, B, F;
      g === void 0 && (g = {}), u(I, "image", [[v0, "PDFImage"]]), f(g.x, "options.x", ["number"]), f(g.y, "options.y", ["number"]), f(g.width, "options.width", ["number"]), f(g.height, "options.height", ["number"]), f(g.rotate, "options.rotate", [[Object, "Rotation"]]), f(g.xSkew, "options.xSkew", [[Object, "Rotation"]]), f(g.ySkew, "options.ySkew", [[Object, "Rotation"]]), GC(g.opacity, "opacity.opacity", 0, 1), gC(g.blendMode, "options.blendMode", SC);
      var s = this.node.newXObject("Image", I.ref), c = this.maybeEmbedGraphicsState({
        opacity: g.opacity,
        blendMode: g.blendMode
      }), G = this.getContentStream();
      G.push.apply(G, KF(s, {
        x: (C = g.x) !== null && C !== void 0 ? C : this.x,
        y: (A = g.y) !== null && A !== void 0 ? A : this.y,
        width: (d = g.width) !== null && d !== void 0 ? d : I.size().width,
        height: (Z = g.height) !== null && Z !== void 0 ? Z : I.size().height,
        rotate: (i = g.rotate) !== null && i !== void 0 ? i : FI(0),
        xSkew: (B = g.xSkew) !== null && B !== void 0 ? B : FI(0),
        ySkew: (F = g.ySkew) !== null && F !== void 0 ? F : FI(0),
        graphicsState: c
      }));
    }, l.prototype.drawPage = function(I, g) {
      var C, A, d, Z, i;
      g === void 0 && (g = {}), u(I, "embeddedPage", [
        [vF, "PDFEmbeddedPage"]
      ]), f(g.x, "options.x", ["number"]), f(g.y, "options.y", ["number"]), f(g.xScale, "options.xScale", ["number"]), f(g.yScale, "options.yScale", ["number"]), f(g.width, "options.width", ["number"]), f(g.height, "options.height", ["number"]), f(g.rotate, "options.rotate", [[Object, "Rotation"]]), f(g.xSkew, "options.xSkew", [[Object, "Rotation"]]), f(g.ySkew, "options.ySkew", [[Object, "Rotation"]]), GC(g.opacity, "opacity.opacity", 0, 1), gC(g.blendMode, "options.blendMode", SC);
      var B = this.node.newXObject("EmbeddedPdfPage", I.ref), F = this.maybeEmbedGraphicsState({
        opacity: g.opacity,
        blendMode: g.blendMode
      }), s = g.width !== void 0 ? g.width / I.width : g.xScale !== void 0 ? g.xScale : 1, c = g.height !== void 0 ? g.height / I.height : g.yScale !== void 0 ? g.yScale : 1, G = this.getContentStream();
      G.push.apply(G, lb(B, {
        x: (C = g.x) !== null && C !== void 0 ? C : this.x,
        y: (A = g.y) !== null && A !== void 0 ? A : this.y,
        xScale: s,
        yScale: c,
        rotate: (d = g.rotate) !== null && d !== void 0 ? d : FI(0),
        xSkew: (Z = g.xSkew) !== null && Z !== void 0 ? Z : FI(0),
        ySkew: (i = g.ySkew) !== null && i !== void 0 ? i : FI(0),
        graphicsState: F
      }));
    }, l.prototype.drawSvgPath = function(I, g) {
      var C, A, d, Z, i, B, F, s, c;
      g === void 0 && (g = {}), u(I, "path", ["string"]), f(g.x, "options.x", ["number"]), f(g.y, "options.y", ["number"]), f(g.scale, "options.scale", ["number"]), f(g.rotate, "options.rotate", [[Object, "Rotation"]]), f(g.borderWidth, "options.borderWidth", ["number"]), f(g.color, "options.color", [[Object, "Color"]]), GC(g.opacity, "opacity.opacity", 0, 1), f(g.borderColor, "options.borderColor", [
        [Object, "Color"]
      ]), f(g.borderDashArray, "options.borderDashArray", [
        Array
      ]), f(g.borderDashPhase, "options.borderDashPhase", [
        "number"
      ]), gC(g.borderLineCap, "options.borderLineCap", MA), GC(g.borderOpacity, "options.borderOpacity", 0, 1), gC(g.blendMode, "options.blendMode", SC);
      var G = this.maybeEmbedGraphicsState({
        opacity: g.opacity,
        borderOpacity: g.borderOpacity,
        blendMode: g.blendMode
      });
      !("color" in g) && !("borderColor" in g) && (g.borderColor = EI(0, 0, 0));
      var V = this.getContentStream();
      V.push.apply(V, Bb(I, {
        x: (C = g.x) !== null && C !== void 0 ? C : this.x,
        y: (A = g.y) !== null && A !== void 0 ? A : this.y,
        scale: g.scale,
        rotate: (d = g.rotate) !== null && d !== void 0 ? d : FI(0),
        color: (Z = g.color) !== null && Z !== void 0 ? Z : void 0,
        borderColor: (i = g.borderColor) !== null && i !== void 0 ? i : void 0,
        borderWidth: (B = g.borderWidth) !== null && B !== void 0 ? B : 0,
        borderDashArray: (F = g.borderDashArray) !== null && F !== void 0 ? F : void 0,
        borderDashPhase: (s = g.borderDashPhase) !== null && s !== void 0 ? s : void 0,
        borderLineCap: (c = g.borderLineCap) !== null && c !== void 0 ? c : void 0,
        graphicsState: G
      }));
    }, l.prototype.drawLine = function(I) {
      var g, C, A, d, Z;
      u(I.start, "options.start", [
        [Object, "{ x: number, y: number }"]
      ]), u(I.end, "options.end", [
        [Object, "{ x: number, y: number }"]
      ]), u(I.start.x, "options.start.x", ["number"]), u(I.start.y, "options.start.y", ["number"]), u(I.end.x, "options.end.x", ["number"]), u(I.end.y, "options.end.y", ["number"]), f(I.thickness, "options.thickness", ["number"]), f(I.color, "options.color", [[Object, "Color"]]), f(I.dashArray, "options.dashArray", [Array]), f(I.dashPhase, "options.dashPhase", ["number"]), gC(I.lineCap, "options.lineCap", MA), GC(I.opacity, "opacity.opacity", 0, 1), gC(I.blendMode, "options.blendMode", SC);
      var i = this.maybeEmbedGraphicsState({
        borderOpacity: I.opacity,
        blendMode: I.blendMode
      });
      "color" in I || (I.color = EI(0, 0, 0));
      var B = this.getContentStream();
      B.push.apply(B, db({
        start: I.start,
        end: I.end,
        thickness: (g = I.thickness) !== null && g !== void 0 ? g : 1,
        color: (C = I.color) !== null && C !== void 0 ? C : void 0,
        dashArray: (A = I.dashArray) !== null && A !== void 0 ? A : void 0,
        dashPhase: (d = I.dashPhase) !== null && d !== void 0 ? d : void 0,
        lineCap: (Z = I.lineCap) !== null && Z !== void 0 ? Z : void 0,
        graphicsState: i
      }));
    }, l.prototype.drawRectangle = function(I) {
      var g, C, A, d, Z, i, B, F, s, c, G, V, W;
      I === void 0 && (I = {}), f(I.x, "options.x", ["number"]), f(I.y, "options.y", ["number"]), f(I.width, "options.width", ["number"]), f(I.height, "options.height", ["number"]), f(I.rotate, "options.rotate", [[Object, "Rotation"]]), f(I.xSkew, "options.xSkew", [[Object, "Rotation"]]), f(I.ySkew, "options.ySkew", [[Object, "Rotation"]]), f(I.borderWidth, "options.borderWidth", ["number"]), f(I.color, "options.color", [[Object, "Color"]]), GC(I.opacity, "opacity.opacity", 0, 1), f(I.borderColor, "options.borderColor", [
        [Object, "Color"]
      ]), f(I.borderDashArray, "options.borderDashArray", [
        Array
      ]), f(I.borderDashPhase, "options.borderDashPhase", [
        "number"
      ]), gC(I.borderLineCap, "options.borderLineCap", MA), GC(I.borderOpacity, "options.borderOpacity", 0, 1), gC(I.blendMode, "options.blendMode", SC);
      var R = this.maybeEmbedGraphicsState({
        opacity: I.opacity,
        borderOpacity: I.borderOpacity,
        blendMode: I.blendMode
      });
      !("color" in I) && !("borderColor" in I) && (I.color = EI(0, 0, 0));
      var U = this.getContentStream();
      U.push.apply(U, rA({
        x: (g = I.x) !== null && g !== void 0 ? g : this.x,
        y: (C = I.y) !== null && C !== void 0 ? C : this.y,
        width: (A = I.width) !== null && A !== void 0 ? A : 150,
        height: (d = I.height) !== null && d !== void 0 ? d : 100,
        rotate: (Z = I.rotate) !== null && Z !== void 0 ? Z : FI(0),
        xSkew: (i = I.xSkew) !== null && i !== void 0 ? i : FI(0),
        ySkew: (B = I.ySkew) !== null && B !== void 0 ? B : FI(0),
        borderWidth: (F = I.borderWidth) !== null && F !== void 0 ? F : 0,
        color: (s = I.color) !== null && s !== void 0 ? s : void 0,
        borderColor: (c = I.borderColor) !== null && c !== void 0 ? c : void 0,
        borderDashArray: (G = I.borderDashArray) !== null && G !== void 0 ? G : void 0,
        borderDashPhase: (V = I.borderDashPhase) !== null && V !== void 0 ? V : void 0,
        graphicsState: R,
        borderLineCap: (W = I.borderLineCap) !== null && W !== void 0 ? W : void 0
      }));
    }, l.prototype.drawSquare = function(I) {
      I === void 0 && (I = {});
      var g = I.size;
      f(g, "size", ["number"]), this.drawRectangle(mI(mI({}, I), { width: g, height: g }));
    }, l.prototype.drawEllipse = function(I) {
      var g, C, A, d, Z, i, B, F, s, c, G;
      I === void 0 && (I = {}), f(I.x, "options.x", ["number"]), f(I.y, "options.y", ["number"]), f(I.xScale, "options.xScale", ["number"]), f(I.yScale, "options.yScale", ["number"]), f(I.rotate, "options.rotate", [[Object, "Rotation"]]), f(I.color, "options.color", [[Object, "Color"]]), GC(I.opacity, "opacity.opacity", 0, 1), f(I.borderColor, "options.borderColor", [
        [Object, "Color"]
      ]), GC(I.borderOpacity, "options.borderOpacity", 0, 1), f(I.borderWidth, "options.borderWidth", ["number"]), f(I.borderDashArray, "options.borderDashArray", [
        Array
      ]), f(I.borderDashPhase, "options.borderDashPhase", [
        "number"
      ]), gC(I.borderLineCap, "options.borderLineCap", MA), gC(I.blendMode, "options.blendMode", SC);
      var V = this.maybeEmbedGraphicsState({
        opacity: I.opacity,
        borderOpacity: I.borderOpacity,
        blendMode: I.blendMode
      });
      !("color" in I) && !("borderColor" in I) && (I.color = EI(0, 0, 0));
      var W = this.getContentStream();
      W.push.apply(W, j0({
        x: (g = I.x) !== null && g !== void 0 ? g : this.x,
        y: (C = I.y) !== null && C !== void 0 ? C : this.y,
        xScale: (A = I.xScale) !== null && A !== void 0 ? A : 100,
        yScale: (d = I.yScale) !== null && d !== void 0 ? d : 100,
        rotate: (Z = I.rotate) !== null && Z !== void 0 ? Z : void 0,
        color: (i = I.color) !== null && i !== void 0 ? i : void 0,
        borderColor: (B = I.borderColor) !== null && B !== void 0 ? B : void 0,
        borderWidth: (F = I.borderWidth) !== null && F !== void 0 ? F : 0,
        borderDashArray: (s = I.borderDashArray) !== null && s !== void 0 ? s : void 0,
        borderDashPhase: (c = I.borderDashPhase) !== null && c !== void 0 ? c : void 0,
        borderLineCap: (G = I.borderLineCap) !== null && G !== void 0 ? G : void 0,
        graphicsState: V
      }));
    }, l.prototype.drawCircle = function(I) {
      I === void 0 && (I = {});
      var g = I.size, C = g === void 0 ? 100 : g;
      f(C, "size", ["number"]), this.drawEllipse(mI(mI({}, I), { xScale: C, yScale: C }));
    }, l.prototype.setOrEmbedFont = function(I) {
      var g = this.font, C = this.fontKey;
      I ? this.setFont(I) : this.getFont();
      var A = this.font, d = this.fontKey;
      return { oldFont: g, oldFontKey: C, newFont: A, newFontKey: d };
    }, l.prototype.getFont = function() {
      if (!this.font || !this.fontKey) {
        var I = this.doc.embedStandardFont(Sd.Helvetica);
        this.setFont(I);
      }
      return [this.font, this.fontKey];
    }, l.prototype.resetFont = function() {
      this.font = void 0, this.fontKey = void 0;
    }, l.prototype.getContentStream = function(I) {
      return I === void 0 && (I = !0), I && this.contentStream ? this.contentStream : (this.contentStream = this.createContentStream(), this.contentStreamRef = this.doc.context.register(this.contentStream), this.node.addContentStream(this.contentStreamRef), this.contentStream);
    }, l.prototype.createContentStream = function() {
      for (var I = [], g = 0; g < arguments.length; g++)
        I[g] = arguments[g];
      var C = this.doc.context.obj({}), A = Rl.of(C, I);
      return A;
    }, l.prototype.maybeEmbedGraphicsState = function(I) {
      var g = I.opacity, C = I.borderOpacity, A = I.blendMode;
      if (!(g === void 0 && C === void 0 && A === void 0)) {
        var d = this.doc.context.obj({
          Type: "ExtGState",
          ca: g,
          CA: C,
          BM: A
        }), Z = this.node.newExtGState("GS", d);
        return Z;
      }
    }, l.prototype.scaleAnnot = function(I, g, C) {
      for (var A = ["RD", "CL", "Vertices", "QuadPoints", "L", "Rect"], d = 0, Z = A.length; d < Z; d++) {
        var i = I.lookup(Q.of(A[d]));
        i instanceof LI && i.scalePDFNumbers(g, C);
      }
      var B = I.lookup(Q.of("InkList"));
      if (B instanceof LI)
        for (var d = 0, Z = B.size(); d < Z; d++) {
          var F = B.lookup(d);
          F instanceof LI && F.scalePDFNumbers(g, C);
        }
    }, l.of = function(I, g, C) {
      return new l(I, g, C);
    }, l.create = function(I) {
      u(I, "doc", [[MC, "PDFDocument"]]);
      var g = OI.of(-1), C = uC.withContextAndParent(I.context, g), A = I.context.register(C);
      return new l(C, A, I);
    }, l;
  }()
), Gd = (
  /** @class */
  function(l) {
    q(I, l);
    function I(g, C, A) {
      var d = l.call(this, g, C, A) || this;
      return u(g, "acroButton", [
        [qd, "PDFAcroPushButton"]
      ]), d.acroField = g, d;
    }
    return I.prototype.setImage = function(g, C) {
      C === void 0 && (C = vC.Center);
      for (var A = this.acroField.getWidgets(), d = 0, Z = A.length; d < Z; d++) {
        var i = A[d], B = this.createImageAppearanceStream(i, g, C);
        this.updateWidgetAppearances(i, { normal: B });
      }
      this.markAsClean();
    }, I.prototype.setFontSize = function(g) {
      vd(g, "fontSize"), this.acroField.setFontSize(g), this.markAsDirty();
    }, I.prototype.addToPage = function(g, C, A) {
      var d, Z, i, B, F, s, c, G, V, W, R;
      f(g, "text", ["string"]), f(C, "page", [[lC, "PDFPage"]]), EA(A);
      var U = this.createWidget({
        x: ((d = A?.x) !== null && d !== void 0 ? d : 0) - ((Z = A?.borderWidth) !== null && Z !== void 0 ? Z : 0) / 2,
        y: ((i = A?.y) !== null && i !== void 0 ? i : 0) - ((B = A?.borderWidth) !== null && B !== void 0 ? B : 0) / 2,
        width: (F = A?.width) !== null && F !== void 0 ? F : 100,
        height: (s = A?.height) !== null && s !== void 0 ? s : 50,
        textColor: (c = A?.textColor) !== null && c !== void 0 ? c : EI(0, 0, 0),
        backgroundColor: (G = A?.backgroundColor) !== null && G !== void 0 ? G : EI(0.75, 0.75, 0.75),
        borderColor: A?.borderColor,
        borderWidth: (V = A?.borderWidth) !== null && V !== void 0 ? V : 0,
        rotate: (W = A?.rotate) !== null && W !== void 0 ? W : FI(0),
        caption: g,
        hidden: A?.hidden,
        page: C.ref
      }), n = this.doc.context.register(U.dict);
      this.acroField.addWidget(n);
      var m = (R = A?.font) !== null && R !== void 0 ? R : this.doc.getForm().getDefaultFont();
      this.updateWidgetAppearance(U, m), C.node.addAnnot(n);
    }, I.prototype.needsAppearancesUpdate = function() {
      var g;
      if (this.isDirty())
        return !0;
      for (var C = this.acroField.getWidgets(), A = 0, d = C.length; A < d; A++) {
        var Z = C[A], i = ((g = Z.getAppearances()) === null || g === void 0 ? void 0 : g.normal) instanceof vg;
        if (!i)
          return !0;
      }
      return !1;
    }, I.prototype.defaultUpdateAppearances = function(g) {
      u(g, "font", [[xg, "PDFFont"]]), this.updateAppearances(g);
    }, I.prototype.updateAppearances = function(g, C) {
      u(g, "font", [[xg, "PDFFont"]]), f(C, "provider", [Function]);
      for (var A = this.acroField.getWidgets(), d = 0, Z = A.length; d < Z; d++) {
        var i = A[d];
        this.updateWidgetAppearance(i, g, C);
      }
    }, I.prototype.updateWidgetAppearance = function(g, C, A) {
      var d = A ?? Sb, Z = LA(d(this, g, C));
      this.updateWidgetAppearanceWithFont(g, C, Z);
    }, I.of = function(g, C, A) {
      return new I(g, C, A);
    }, I;
  }(nA)
), Kb = Object.defineProperty, rb = Object.getOwnPropertyDescriptor, UA = (l, I, g, C) => {
  for (var A = C > 1 ? void 0 : C ? rb(I, g) : I, d = l.length - 1, Z; d >= 0; d--)
    (Z = l[d]) && (A = (C ? Z(I, g, A) : Z(A)) || A);
  return C && A && Kb(I, g, A), A;
};
let QC = class extends Gl {
  constructor() {
    if (super(), this.MIN_ZOOM = 0.25, this.MAX_ZOOM = 4, this.currentPage = 1, this.pageCount = 0, this.zoomLevel = 1, this.isPDFLoaded = !1, this.pdfDoc = null, this.originalPdfBuffer = null, this.viewport = null, this.pageElements = /* @__PURE__ */ new Map(), this.selectedElementId = null, this.isEditMode = !1, this.isDragging = !1, this.dragStartPosition = null, this.dragOffset = null, this.currentRenderTask = null, this.isRendering = !1, this.elementOriginalBounds = /* @__PURE__ */ new Map(), this.variables = {}, this.VARIABLE_PATTERN = /\{\{(\w+)\}\}/g, typeof window < "u" && "Worker" in window) {
      const l = new URL("data:text/javascript;base64,", import.meta.url);
      oG.workerSrc = l.href;
    }
  }
  // Document Loading
  async loadPDF(l) {
    console.log("LoadPDF called with : ", l);
    try {
      let I;
      l instanceof File || l instanceof Blob ? I = await l.arrayBuffer() : I = await (await fetch(l)).arrayBuffer(), this.originalPdfBuffer = new Uint8Array(I);
      const g = eG({ data: I });
      this.pdfDoc = await g.promise, this.pageCount = this.pdfDoc.numPages, this.isPDFLoaded = !0, await this.goToPage(1), this.dispatchPDFEvent("pdf-loaded", {
        pageCount: this.pageCount
      });
    } catch (I) {
      throw console.error("Error loading PDF:", I), this.dispatchPDFEvent("pdf-error", {
        error: I instanceof Error ? I.message : "Failed to load PDF"
      }), I;
    }
  }
  async goToPage(l) {
    if (!this.pdfDoc)
      throw new Error("No PDF loaded");
    if (l < 1 || l > this.pageCount)
      throw new Error(`Invalid page number: ${l}. Valid range: 1-${this.pageCount}`);
    try {
      this.currentRenderTask && (await this.currentRenderTask.cancel(), this.currentRenderTask = null);
      const I = await this.pdfDoc.getPage(l), g = I.getViewport({ scale: this.zoomLevel });
      this.viewport = g;
      const C = this.baseCanvas.getContext("2d");
      this.baseCanvas.width = g.width, this.baseCanvas.height = g.height, this.topCanvas.width = g.width, this.topCanvas.height = g.height, this.currentRenderTask = I.render({
        canvasContext: C,
        viewport: g
      }), await this.currentRenderTask.promise, this.currentPage = l, await this.renderElements(l), this.dispatchPDFEvent("page-change", {
        page: l,
        pageCount: this.pageCount
      });
    } catch (I) {
      if (I?.name !== "RenderingCancelledException")
        throw console.error("Error navigating to page:", I), I;
    } finally {
      this.currentRenderTask = null;
    }
  }
  async setZoom(l) {
    if (!this.pdfDoc || !this.viewport)
      throw new Error("No PDF loaded");
    let I;
    typeof l == "number" ? I = Math.max(this.MIN_ZOOM, Math.min(l, this.MAX_ZOOM)) : I = await this.calculatePresetZoom(l), I !== this.zoomLevel && (this.zoomLevel = I, await this.goToPage(this.currentPage), this.dispatchPDFEvent("zoom-change", {
      scale: I,
      width: this.viewport.width,
      height: this.viewport.height
    }));
  }
  async calculatePresetZoom(l) {
    const I = this.clientWidth, g = this.clientHeight, A = (await this.pdfDoc.getPage(this.currentPage)).getViewport({ scale: 1 });
    if (l === "fit-width")
      return I / A.width;
    {
      const d = I / A.width, Z = g / A.height;
      return Math.min(d, Z);
    }
  }
  dispatchPDFEvent(l, I) {
    const g = new CustomEvent(l, {
      detail: I,
      bubbles: !0,
      composed: !0
    });
    this.dispatchEvent(g);
  }
  // unloadPDF()
  // rotate()
  // save()
  // saveAs()
  // print()
  // pdf-loaded
  // pdf-error
  // page-change
  // zoom-change
  // Helper methods for element management
  async addElementToPage(l, I) {
    this.pageElements.has(l) || this.pageElements.set(l, /* @__PURE__ */ new Map()), this.pageElements.get(l)?.set(I.id, I), this.renderElements(l), this.requestUpdate(), this.dispatchPDFEvent("element-added", {
      pageNumber: l,
      elementId: I.id,
      element: I
    });
  }
  async removeElementFromPage(l, I) {
    const g = this.pageElements.get(l);
    g?.has(I) && (g.delete(I), this.requestUpdate(), this.dispatchPDFEvent("element-removed", {
      pageNumber: l,
      elementId: I
    }));
  }
  getPageElements(l) {
    return this.pageElements.get(l) || /* @__PURE__ */ new Map();
  }
  updateElement(l, I, g) {
    const C = this.pageElements.get(l), A = C?.get(I);
    if (A && C) {
      if (A && A.type === "text" && ("content" in g || "style" in g)) {
        const Z = this.calculateTextBounds(A);
        g.bounds = Z;
      }
      const d = { ...A, ...g };
      C.set(I, d), this.requestUpdate(), this.dispatchPDFEvent("element-updated", {
        pageNumber: l,
        elementId: I,
        updates: g
      });
    }
  }
  renderElements(l) {
    if (!this.isRendering)
      try {
        this.isRendering = !0;
        const I = this.topCanvas.getContext("2d"), g = this.getPageElements(l);
        I.clearRect(0, 0, this.topCanvas.width, this.topCanvas.height), Array.from(g.values()).sort((A, d) => (A.zIndex || 0) - (d.zIndex || 0)).forEach((A) => {
          if (A.visible) {
            switch (A.type) {
              case "text":
                this.renderTextElement(I, A);
                break;
            }
            A.selected && this.renderSelectionBox(I, A);
          }
        });
      } finally {
        this.isRendering = !1;
      }
  }
  renderTextElement(l, I) {
    l.save(), console.log("Canvas dimensions:", {
      width: this.topCanvas.width,
      height: this.topCanvas.height
    }), console.log("Zoomed values:", {
      x: I.position.x * this.zoomLevel,
      y: I.position.y * this.zoomLevel,
      fontSize: I.style.fontSize * this.zoomLevel
    });
    try {
      const g = this.processTextVariables(I.content), C = Number(I.position.x * this.zoomLevel), A = Number(I.position.y * this.zoomLevel), d = Number(I.style.fontSize * this.zoomLevel), Z = I.style.padding ? Number(I.style.padding * this.zoomLevel) : 0;
      if (l.translate(C, A), I.rotation && l.rotate(I.rotation * Math.PI / 180), I.scale) {
        const i = Number((I.scale.x * this.zoomLevel).toFixed(3)), B = Number((I.scale.y * this.zoomLevel).toFixed(3));
        l.scale(i, B);
      }
      if (l.font = `${I.style.fontStyle} ${I.style.fontWeight} ${d}px ${I.style.fontFamily}`, l.fillStyle = I.style.color, l.globalAlpha = I.opacity || 1, I.style.backgroundColor && I.style.backgroundColor !== "transparent") {
        l.fillStyle = I.style.backgroundColor;
        const i = l.measureText(g), B = Number((I.style.fontSize * I.style.lineHeight * this.zoomLevel).toFixed(2));
        if (I.style.borderRadius) {
          const F = Number((I.style.borderRadius * this.zoomLevel).toFixed(2));
          this.roundRect(
            l,
            -Z,
            -Z,
            i.width + Z * 2,
            B + Z * 2,
            F
          );
        } else
          l.fillRect(
            -Z,
            -Z,
            i.width + Z * 2,
            B + Z * 2
          );
      }
      if (l.fillStyle = I.style.color, l.fillText(g, 0, d), I.bounds && (I.bounds = {
        width: Number((I.bounds.width * this.zoomLevel).toFixed(2)),
        height: Number((I.bounds.height * this.zoomLevel).toFixed(2))
      }), I.style.textDecoration !== "none") {
        l.beginPath();
        const i = l.measureText(g);
        switch (I.style.textDecoration) {
          case "underline":
            l.moveTo(0, d + Number((3 * this.zoomLevel).toFixed(2))), l.lineTo(i.width, d + Number((3 * this.zoomLevel).toFixed(2)));
            break;
          case "line-through":
            l.moveTo(0, d / 2), l.lineTo(i.width, d / 2);
            break;
          case "overline":
            l.moveTo(0, 0), l.lineTo(i.width, 0);
            break;
        }
        l.strokeStyle = I.style.color, l.stroke();
      }
    } finally {
      l.restore();
    }
  }
  renderSelectionBox(l, I) {
    if (!I.bounds) return;
    const g = this.elementOriginalBounds.get(I.id) || I.bounds;
    l.save();
    try {
      const C = I.position.x * this.zoomLevel, A = I.position.y * this.zoomLevel, d = g.width * this.zoomLevel, Z = g.height * this.zoomLevel, i = 5, B = 5, F = Math.max(2, i * this.zoomLevel), s = Math.max(3, B * this.zoomLevel), c = Math.max(1, this.zoomLevel * 0.5);
      l.translate(C, A), I.rotation && l.rotate(I.rotation * Math.PI / 180), l.strokeStyle = "#1a73e8", l.lineWidth = c, l.setLineDash([s, s]), l.strokeRect(
        -F,
        -F,
        d + F * 2,
        Z + F * 2
      ), console.log("Selection Box Dimensions:", {
        zoom: this.zoomLevel,
        originalBounds: g,
        zoomedBounds: {
          width: d,
          height: Z
        },
        position: {
          x: C,
          y: A
        }
      });
    } finally {
      l.restore();
    }
  }
  roundRect(l, I, g, C, A, d) {
    l.beginPath(), l.moveTo(I + d, g), l.lineTo(I + C - d, g), l.arcTo(I + C, g, I + C, g + d, d), l.lineTo(I + C, g + A - d), l.arcTo(I + C, g + A, I + C - d, g + A, d), l.lineTo(I + d, g + A), l.arcTo(I, g + A, I, g + A - d, d), l.lineTo(I, g + d), l.arcTo(I, g, I + d, g, d), l.closePath(), l.fill();
  }
  // These methods should be added to the class
  setSelectedElement(l) {
    this.selectedElementId !== l && (this.selectedElementId && this.updateElement(
      this.currentPage,
      this.selectedElementId,
      { selected: !1 }
    ), this.selectedElementId = l, l && this.updateElement(
      this.currentPage,
      l,
      { selected: !0 }
    ), this.isEditMode = !1, this.dispatchPDFEvent("selection-change", {
      selectedElementId: l,
      pageNumber: this.currentPage
    }));
  }
  getSelectedElement() {
    return this.selectedElementId && this.pageElements.get(this.currentPage)?.get(this.selectedElementId) || null;
  }
  // Mouse Event Handlers
  handleMouseDown(l) {
    const I = this.getCanvasPoint(l), g = this.findElementAtPoint(I);
    g ? (this.isDragging = !0, this.dragStartPosition = I, this.dragOffset = {
      x: I.x - g.position.x,
      y: I.y - g.position.y
    }, this.setSelectedElement(g.id), l.preventDefault()) : this.setSelectedElement(null);
  }
  handleMouseMove(l) {
    if (!this.isDragging || !this.selectedElementId || !this.dragOffset) return;
    const I = this.getCanvasPoint(l), g = {
      x: I.x - this.dragOffset.x,
      y: I.y - this.dragOffset.y
    };
    this.updateElement(
      this.currentPage,
      this.selectedElementId,
      { position: g }
    ), this.renderElements(this.currentPage);
  }
  handleMouseUp(l) {
    if (this.isDragging && this.selectedElementId) {
      const I = this.getCanvasPoint(l);
      this.dispatchPDFEvent("element-moved", {
        elementId: this.selectedElementId,
        position: I
      });
    }
    this.isDragging = !1, this.dragStartPosition = null, this.dragOffset = null;
  }
  handleDoubleClick(l) {
    const I = this.getCanvasPoint(l), g = this.findElementAtPoint(I);
    g?.type === "text" && (this.isEditMode = !0, this.dispatchPDFEvent("edit-mode-changed", {
      elementId: g.id,
      isEditing: !0
    }));
  }
  // Helper Methods
  getCanvasPoint(l) {
    const I = this.topCanvas.getBoundingClientRect(), g = this.topCanvas.width / I.width, C = this.topCanvas.height / I.height, A = Number(((l.clientX - I.left) * g / this.zoomLevel).toFixed(2)), d = Number(((l.clientY - I.top) * C / this.zoomLevel).toFixed(2));
    return { x: A, y: d };
  }
  findElementAtPoint(l) {
    const I = this.pageElements.get(this.currentPage);
    return I && Array.from(I.values()).sort((C, A) => (A.zIndex || 0) - (C.zIndex || 0)).find((C) => this.isPointInElement(l, C)) || null;
  }
  isPointInElement(l, I) {
    if (!I.bounds) return !1;
    const g = {
      width: Number((I.bounds.width * this.zoomLevel).toFixed(2)),
      height: Number((I.bounds.height * this.zoomLevel).toFixed(2))
    };
    if (I.rotation) {
      const C = {
        x: Number((I.position.x * this.zoomLevel).toFixed(2)),
        y: Number((I.position.y * this.zoomLevel).toFixed(2))
      }, A = this.rotatePoint(
        {
          x: l.x * this.zoomLevel,
          y: l.y * this.zoomLevel
        },
        C,
        -I.rotation
      );
      l = {
        x: Number((A.x / this.zoomLevel).toFixed(2)),
        y: Number((A.y / this.zoomLevel).toFixed(2))
      };
    }
    return l.x >= I.position.x && l.x <= I.position.x + g.width / this.zoomLevel && l.y >= I.position.y && l.y <= I.position.y + g.height / this.zoomLevel;
  }
  rotatePoint(l, I, g) {
    const C = g * Math.PI / 180, A = Math.cos(C), d = Math.sin(C), Z = l.x - I.x, i = l.y - I.y;
    return {
      x: I.x + (Z * A - i * d),
      y: I.y + (Z * d + i * A)
    };
  }
  /**
  * Updates a single property of a text element
  */
  updateTextProperty(l, I, g) {
    const C = this.getPageElements(this.currentPage).get(l);
    if (!C || C.type !== "text")
      throw new Error("Invalid element ID or not a text element");
    const A = C, d = {
      ...A.style,
      [I]: g
    };
    if (this.updateElement(this.currentPage, l, {
      style: d
    }), this.shouldRecalculateBounds(I)) {
      const Z = this.calculateTextBounds(A);
      this.elementOriginalBounds.set(l, Z);
    }
    this.renderElements(this.currentPage), this.dispatchPDFEvent("text-property-changed", {
      elementId: l,
      property: I,
      value: g
    });
  }
  /**
   * Updates multiple properties of a text element at once
   */
  updateTextProperties(l, I) {
    const g = this.getPageElements(this.currentPage).get(l);
    if (!g || g.type !== "text")
      throw new Error("Invalid element ID or not a text element");
    const C = g, A = {
      ...C.style,
      ...I
    };
    if (this.updateElement(this.currentPage, l, {
      style: A
    }), Object.keys(I).some(
      (Z) => this.shouldRecalculateBounds(Z)
    )) {
      const Z = this.calculateTextBounds(C);
      this.elementOriginalBounds.set(l, Z);
    }
    this.renderElements(this.currentPage), this.dispatchPDFEvent("text-properties-changed", {
      elementId: l,
      updates: I
    });
  }
  /**
   * Gets all properties of a text element
   */
  getTextProperties(l) {
    const I = this.getPageElements(this.currentPage).get(l);
    if (!I || I.type !== "text")
      throw new Error("Invalid element ID or not a text element");
    return I.style;
  }
  /**
   * Updates text content
   */
  updateTextContent(l, I) {
    const g = this.getPageElements(this.currentPage).get(l);
    if (!g || g.type !== "text")
      throw new Error("Invalid element ID or not a text element");
    this.updateElement(this.currentPage, l, {
      content: I
    });
    const C = this.calculateTextBounds(g);
    this.elementOriginalBounds.set(l, C), this.renderElements(this.currentPage), this.dispatchPDFEvent("text-content-changed", {
      elementId: l,
      content: I
    });
  }
  /**
   * Helper to determine if a property change requires bounds recalculation
   */
  shouldRecalculateBounds(l) {
    return [
      "fontSize",
      "fontFamily",
      "fontWeight",
      "fontStyle",
      "letterSpacing",
      "wordSpacing",
      "padding"
    ].includes(l);
  }
  // Connect event listeners
  firstUpdated() {
    this.topCanvas.addEventListener("mousedown", this.handleMouseDown.bind(this)), this.topCanvas.addEventListener("mousemove", this.handleMouseMove.bind(this)), this.topCanvas.addEventListener("mouseup", this.handleMouseUp.bind(this)), this.topCanvas.addEventListener("dblclick", this.handleDoubleClick.bind(this));
  }
  // Cleanup
  disconnectedCallback() {
    super.disconnectedCallback(), this.topCanvas.removeEventListener("mousedown", this.handleMouseDown.bind(this)), this.topCanvas.removeEventListener("mousemove", this.handleMouseMove.bind(this)), this.topCanvas.removeEventListener("mouseup", this.handleMouseUp.bind(this)), this.topCanvas.removeEventListener("dblclick", this.handleDoubleClick.bind(this));
  }
  /**
   * Adds a text element to the current page
   * @param content - The text content
   * @param position - The position {x, y} where to add the text
   * @param style - Optional style overrides
   * @returns The ID of the created text element
   */
  async addText(l, I, g) {
    if (!this.pdfDoc)
      throw new Error("No PDF loaded");
    const C = crypto.randomUUID(), A = {
      id: C,
      type: "text",
      content: l,
      position: I,
      scale: { x: 1, y: 1 },
      rotation: 0,
      opacity: 1,
      visible: !0,
      selected: !1,
      locked: !1,
      zIndex: this.getNextZIndex(),
      style: { ...mG, ...g },
      editable: !0,
      selectable: !0,
      autoSize: !0
    };
    return A.bounds = await this.calculateTextBounds(A), this.addElementToPage(this.currentPage, A), this.setSelectedElement(C), C;
  }
  /**
   * Calculates the bounds of a text element
   */
  calculateTextBounds(l) {
    const I = this.topCanvas.getContext("2d"), g = this.processTextVariables(l.content);
    I.font = `${l.style.fontStyle} ${l.style.fontWeight} ${l.style.fontSize}px ${l.style.fontFamily}`;
    const A = {
      width: I.measureText(g).width,
      height: l.style.fontSize * l.style.lineHeight
    };
    return this.elementOriginalBounds.set(l.id, A), A;
  }
  /**
   * Gets the next available z-index
   */
  getNextZIndex() {
    const l = this.pageElements.get(this.currentPage);
    return !l || l.size === 0 ? 1 : Math.max(
      ...Array.from(l.values()).map((g) => g.zIndex || 0)
    ) + 1;
  }
  // Public method to set variables
  setVariables(l) {
    this.variables = { ...this.variables, ...l }, this.renderElements(this.currentPage);
  }
  // Public method to get variables
  getVariables() {
    return { ...this.variables };
  }
  // Public method to clear variables
  clearVariables() {
    this.variables = {}, this.renderElements(this.currentPage);
  }
  // Helper method to process variables in text
  processTextVariables(l) {
    return l.replace(this.VARIABLE_PATTERN, (I, g) => this.variables[g] || I);
  }
  // Helper method to extract variables from text
  extractVariables(l) {
    const I = [];
    let g;
    for (; (g = this.VARIABLE_PATTERN.exec(l)) !== null; )
      I.push(g[1]);
    return I;
  }
  async downloadPDF(l = "document.pdf") {
    if (!this.pdfDoc)
      throw new Error("No PDF loaded");
    try {
      const I = await this.pdfDoc.getData(), g = await MC.load(I), C = g.getPages()[this.currentPage - 1], { height: A } = this.viewport, d = this.getPageElements(this.currentPage);
      for (const s of d.values())
        if (s.type === "text") {
          const c = s, G = this.processTextVariables(c.content);
          try {
            const V = await g.embedFont("Helvetica"), W = A - c.position.y, R = this.parseColor(c.style.color);
            C.drawText(G, {
              x: c.position.x,
              y: W,
              size: c.style.fontSize,
              font: V,
              color: R,
              rotate: FI(c.rotation || 0),
              opacity: c.opacity || 1
            });
          } catch (V) {
            console.error("Error adding text element:", V);
          }
        }
      const Z = await g.save(), i = new Blob([Z], { type: "application/pdf" }), B = URL.createObjectURL(i), F = document.createElement("a");
      F.href = B, F.download = l, document.body.appendChild(F), F.click(), document.body.removeChild(F), URL.revokeObjectURL(B), this.dispatchPDFEvent("pdf-downloaded", {
        filename: l,
        withElements: !0
      });
    } catch (I) {
      throw console.error("Error downloading PDF:", I), I;
    }
  }
  // Helper function for color conversion
  parseColor(l) {
    return l = l.replace("#", ""), EI(
      parseInt(l.substr(0, 2), 16) / 255,
      parseInt(l.substr(2, 2), 16) / 255,
      parseInt(l.substr(4, 2), 16) / 255
    );
  }
  // Batch download method
  async batchDownload(l) {
    if (!this.pdfDoc)
      throw new Error("No PDF loaded");
    try {
      let I = 0;
      const g = l.length;
      for (const C of l) {
        this.variables = C.variables;
        const A = await this.generatePDFWithVariables(), d = new Blob([A], { type: "application/pdf" }), Z = C.filename || `document-${C.id}.pdf`, i = URL.createObjectURL(d), B = document.createElement("a");
        B.href = i, B.download = Z, document.body.appendChild(B), B.click(), document.body.removeChild(B), URL.revokeObjectURL(i), I++, this.dispatchPDFEvent("batch-progress", {
          current: I,
          total: g,
          dataSetId: C.id,
          percentage: I / g * 100
        });
      }
      this.variables = {}, this.dispatchPDFEvent("batch-complete", {
        totalProcessed: g
      });
    } catch (I) {
      throw console.error("Batch processing error:", I), this.dispatchPDFEvent("batch-error", { error: I }), I;
    }
  }
  // Helper method to generate PDF with specific variables
  async generatePDFWithVariables() {
    const l = await this.pdfDoc.getData(), I = await MC.load(l), g = I.getPages()[this.currentPage - 1], C = this.getPageElements(this.currentPage);
    for (const A of C.values())
      if (A.type === "text") {
        const d = A, Z = this.processTextVariables(d.content), i = await I.embedFont("Helvetica"), B = this.viewport.height - d.position.y;
        g.drawText(Z, {
          x: d.position.x,
          y: B,
          size: d.style.fontSize,
          font: i,
          color: this.parseColor(d.style.color),
          rotate: FI(d.rotation || 0),
          opacity: d.opacity || 1
        });
      }
    return await I.save();
  }
  render() {
    return is`
            <div class="canvas-container">
                <canvas id="baseCanvas"></canvas>
                <canvas id="topCanvas"></canvas>
            </div>
        `;
  }
};
QC.styles = OF`
        :host {
            display: block;
            width: 100%;
            height: 100%;
            position: relative;
        }

        .canvas-container {
            position: relative;
            width: fit-content;  /* Container adapts to canvas size */
            height: fit-content;
            // margin: 0 auto;      /* Center the PDF if smaller than container */
        }

        canvas {
            position: absolute;
            top: 0;
            left: 0;
            // width: 100%;
            // height: 100%;
        }

        #baseCanvas {
            z-index: 1;
        }

        #topCanvas {
            z-index: 2;
            pointer-events: auto;
        }
    `;
UA([
  ud({ type: Number })
], QC.prototype, "currentPage", 2);
UA([
  ud({ type: Number })
], QC.prototype, "pageCount", 2);
UA([
  ud({ type: Number })
], QC.prototype, "zoomLevel", 2);
UA([
  ud({ type: Boolean })
], QC.prototype, "isPDFLoaded", 2);
UA([
  GB("#baseCanvas")
], QC.prototype, "baseCanvas", 2);
UA([
  GB("#topCanvas")
], QC.prototype, "topCanvas", 2);
QC = UA([
  ns("pdf-box")
], QC);
const Lb = QC;
export {
  QC as PDFBox,
  Lb as default
};
